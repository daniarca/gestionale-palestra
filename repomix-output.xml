This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
cors.json
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/AggiungiPagamentoDialog.jsx
src/components/DocumentList.jsx
src/components/EventEditDialog.jsx
src/components/FileUpload.jsx
src/components/GestisciMembriDialog.jsx
src/components/GruppoEditDialog.jsx
src/components/IscrittiLista.jsx
src/components/IscrittoDetailDialog.jsx
src/components/IscrittoEditDialog.jsx
src/components/IscrittoForm.jsx
src/components/Layout.jsx
src/components/Notifier.jsx
src/components/RegistroTecnicoDialog.jsx
src/components/SplitText.jsx
src/components/StatCard.jsx
src/components/StoricoPagamenti.jsx
src/components/TecnicoEditDialog.jsx
src/components/ThemeSelector.jsx
src/components/TiltedCard.css
src/components/TiltedCard.jsx
src/context/AuthContext.jsx
src/context/NotificationContext.jsx
src/context/ThemeContext.jsx
src/firebase.js
src/index.css
src/main.jsx
src/pages/AgendaPage.jsx
src/pages/ArchivioPage.jsx
src/pages/CalendarioPage.jsx
src/pages/CreditsPage.jsx
src/pages/DashboardPage.jsx
src/pages/DocumentazionePage.jsx
src/pages/GruppiPage.jsx
src/pages/IscrittiPage.jsx
src/pages/LoginPage.jsx
src/pages/OrarioPage.jsx
src/pages/RegistroTecniciPage.jsx
src/pages/ReportPage.jsx
src/pages/SchedaSocioPage.jsx
src/pages/SchedaTecnicoPage.jsx
src/pages/TecniciPage.jsx
src/services/firebaseService.js
src/theme.js
src/utils/exportToExcel.js
src/utils/generateReceipt.js
src/utils/numberToWords.js
src/utils/timeSlots.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="cors.json">
[
  {
    "origin": [
      "http://localhost:5173",
      "http://localhost:5174",
      "http://localhost:5175"
    ],
    "method": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    "responseHeader": ["Content-Type", "Authorization"],
    "maxAgeSeconds": 3600
  }
]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/DocumentList.jsx">
import React from 'react';
import { List, ListItem, ListItemText, IconButton, ListItemAvatar, Avatar, Typography } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import DownloadIcon from '@mui/icons-material/Download';
import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';

function DocumentList({ documents = [], onDelete }) {
  if (documents.length === 0) {
    return <Typography sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>Nessun documento caricato.</Typography>;
  }

  return (
    <List>
      {documents.map((doc) => (
        <ListItem
          key={doc.id}
          secondaryAction={
            <>
              <IconButton edge="end" href={doc.url} target="_blank" rel="noopener noreferrer" title="Scarica">
                <DownloadIcon />
              </IconButton>
              <IconButton edge="end" onClick={() => onDelete(doc.id, doc.filePath)} sx={{ ml: 1 }} title="Elimina">
                <DeleteIcon color="error" />
              </IconButton>
            </>
          }
        >
          <ListItemAvatar>
            <Avatar><InsertDriveFileIcon /></Avatar>
          </ListItemAvatar>
          <ListItemText 
            primary={doc.name} 
            secondary={`Caricato il: ${new Date(doc.createdAt.toDate()).toLocaleDateString('it-IT')}`} 
          />
        </ListItem>
      ))}
    </List>
  );
}

export default DocumentList;
</file>

<file path="src/components/EventEditDialog.jsx">
import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  FormControlLabel,
  Switch,
  Box,
  Typography,
  InputAdornment,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import CheckIcon from "@mui/icons-material/Check";
import TitleIcon from "@mui/icons-material/Title";
import NotesIcon from "@mui/icons-material/Notes";
import moment from "moment";

const colors = [
  "#F44336",
  "#E91E63",
  "#9C27B0",
  "#673AB7",
  "#3F51B5",
  "#2196F3",
  "#03A9F4",
  "#00BCD4",
  "#009688",
  "#4CAF50",
  "#8BC34A",
  "#CDDC39",
  "#FFEB3B",
  "#FFC107",
  "#FF9800",
  "#FF5722",
];

function EventEditDialog({ open, onClose, onSave, onDelete, event, dateInfo }) {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [start, setStart] = useState("");
  const [end, setEnd] = useState("");
  const [allDay, setAllDay] = useState(true);
  const [color, setColor] = useState(colors[0]);
  const [titleError, setTitleError] = useState(false);

  useEffect(() => {
    if (!open) {
      setTitleError(false);
      return;
    }

    if (event) {
      const isAllDay = event.allDay;
      setTitle(event.title || "");
      setDescription(event.description || "");
      setAllDay(isAllDay);
      setColor(event.color || colors[0]);
      setStart(
        moment(event.start).format(isAllDay ? "YYYY-MM-DD" : "YYYY-MM-DDTHH:mm")
      );
      setEnd(
        moment(event.end || event.start).format(
          isAllDay ? "YYYY-MM-DD" : "YYYY-MM-DDTHH:mm"
        )
      );
    } else if (dateInfo) {
      const isAllDay = dateInfo.allDay;
      setTitle("");
      setDescription("");
      setAllDay(isAllDay);
      setColor(colors[0]);
      const startDate = dateInfo.startStr || dateInfo.dateStr;
      const endDate = dateInfo.endStr || dateInfo.dateStr;
      setStart(
        moment(startDate).format(isAllDay ? "YYYY-MM-DD" : "YYYY-MM-DDTHH:mm")
      );
      setEnd(
        moment(endDate).format(isAllDay ? "YYYY-MM-DD" : "YYYY-MM-DDTHH:mm")
      );
    }
  }, [event, dateInfo, open]);

  const handleSave = () => {
    if (!title.trim()) {
      setTitleError(true);
      return;
    }
    onSave({
      id: event?.id,
      title,
      description,
      start,
      end: allDay ? null : end,
      allDay,
      color,
    });
  };

  const handleDelete = () => event?.id && onDelete(event.id);
  const handleTitleChange = (e) => {
    setTitle(e.target.value);
    if (titleError) setTitleError(false);
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      fullWidth
      maxWidth="sm"
      PaperProps={{ sx: { borderRadius: 3 } }}
    >
      <DialogTitle sx={{ fontWeight: "bold", fontSize: "1.5rem" }}>
        {event ? "Modifica Evento" : "Nuovo Evento"}
      </DialogTitle>
      <DialogContent dividers sx={{ p: 3 }}>
        {/* === LAYOUT CAMBIATO: DA GRID A FLEXBOX VERTICALE === */}
        <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
          {/* TITOLO A PIENA LARGHEZZA */}
          <TextField
            autoFocus
            fullWidth
            label="Titolo Evento"
            value={title}
            onChange={handleTitleChange}
            error={titleError}
            helperText={titleError ? "Il titolo è obbligatorio." : ""}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <TitleIcon color="action" />
                </InputAdornment>
              ),
            }}
          />

          {/* NOTE A PIENA LARGHEZZA */}
          <TextField
            fullWidth
            label="Note / Descrizione"
            multiline
            rows={4}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <NotesIcon color="action" />
                </InputAdornment>
              ),
            }}
          />

          {/* SWITCH "TUTTO IL GIORNO" */}
          <FormControlLabel
            control={
              <Switch
                checked={allDay}
                onChange={(e) => setAllDay(e.target.checked)}
              />
            }
            label="Tutto il giorno"
          />

          {/* CONTENITORE PER DATA/ORA (FLEXBOX ORIZZONTALE) */}
          <Box
            sx={{
              display: "flex",
              gap: 2,
              flexDirection: { xs: "column", sm: "row" },
            }}
          >
            <TextField
              fullWidth
              label="Inizio"
              type={allDay ? "date" : "datetime-local"}
              value={start}
              onChange={(e) => setStart(e.target.value)}
              InputLabelProps={{ shrink: true }}
            />
            {!allDay && (
              <TextField
                fullWidth
                label="Fine"
                type="datetime-local"
                value={end}
                onChange={(e) => setEnd(e.target.value)}
                InputLabelProps={{ shrink: true }}
              />
            )}
          </Box>

          {/* COLORE EVENTO */}
          <Box>
            <Typography
              variant="subtitle1"
              fontWeight="medium"
              sx={{ color: "text.secondary", mb: 1.5 }}
            >
              Colore Evento
            </Typography>
            <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1.5 }}>
              {colors.map((c) => (
                <Box
                  key={c}
                  onClick={() => setColor(c)}
                  sx={{
                    width: 32,
                    height: 32,
                    borderRadius: "50%",
                    backgroundColor: c,
                    cursor: "pointer",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    border: "3px solid",
                    borderColor: color === c ? c : "transparent",
                    outline: color === c ? `2px solid #fff` : "none",
                    boxShadow: color === c ? `0 0 0 2px ${c}` : "none",
                    transition: "all 0.2s ease-in-out",
                    "&:hover": { transform: "scale(1.15)" },
                  }}
                >
                  {color === c && (
                    <CheckIcon sx={{ color: "#fff", fontSize: 20 }} />
                  )}
                </Box>
              ))}
            </Box>
          </Box>
        </Box>
      </DialogContent>
      <DialogActions sx={{ justifyContent: "space-between", p: "16px 24px" }}>
        {event ? (
          <Button
            onClick={handleDelete}
            color="error"
            startIcon={<DeleteIcon />}
          >
            Elimina
          </Button>
        ) : (
          <Box />
        )}
        <Box>
          <Button onClick={onClose} sx={{ mr: 1 }}>
            Annulla
          </Button>
          <Button onClick={handleSave} variant="contained" size="large">
            Salva Evento
          </Button>
        </Box>
      </DialogActions>
    </Dialog>
  );
}

export default EventEditDialog;
</file>

<file path="src/components/FileUpload.jsx">
import React, { useState } from 'react';
import { Box, Button, LinearProgress, Typography } from '@mui/material';
import UploadFileIcon from '@mui/icons-material/UploadFile';

function FileUpload({ onUpload, isLoading }) {
  const [selectedFile, setSelectedFile] = useState(null);

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleUploadClick = () => {
    if (selectedFile) {
      onUpload(selectedFile);
      setSelectedFile(null);
    }
  };

  return (
    <Box sx={{ p: 2, border: '2px dashed', borderColor: 'divider', borderRadius: 2, textAlign: 'center' }}>
      <Typography gutterBottom>Carica un nuovo documento (PDF, JPG, PNG)</Typography>
      <Button variant="outlined" component="label">
        Seleziona File
        <input type="file" hidden onChange={handleFileChange} />
      </Button>
      {selectedFile && <Typography sx={{ mt: 1 }}>File selezionato: {selectedFile.name}</Typography>}
      {isLoading ? (
        <LinearProgress sx={{ mt: 2 }} />
      ) : (
        <Button 
          variant="contained" 
          startIcon={<UploadFileIcon />} 
          onClick={handleUploadClick} 
          disabled={!selectedFile}
          sx={{ display: 'block', mx: 'auto', mt: 2 }}
        >
          Carica
        </Button>
      )}
    </Box>
  );
}

export default FileUpload;
</file>

<file path="src/components/IscrittoDetailDialog.jsx">
import React, { useState, useEffect } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, Grid, Typography, Box, CircularProgress } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import PaymentIcon from '@mui/icons-material/Payment';
import StoricoPagamenti from './StoricoPagamenti.jsx';
import { collection, query, where, getDocs } from "firebase/firestore";
import { db } from '../firebase.js';

function IscrittoDetailDialog({ iscritto, open, onClose, onEdit, onDelete, onAggiungiPagamento }) {
  const [pagamenti, setPagamenti] = useState([]);
  const [loadingPagamenti, setLoadingPagamenti] = useState(true);

  useEffect(() => {
    if (open && iscritto) {
      const fetchPagamenti = async () => {
        setLoadingPagamenti(true);
        const q = query(collection(db, "pagamenti"), where("iscrittoId", "==", iscritto.id));
        const querySnapshot = await getDocs(q);
        const pagamentiList = querySnapshot.docs.map(doc => doc.data());
        setPagamenti(pagamentiList);
        setLoadingPagamenti(false);
      };
      fetchPagamenti();
    }
  }, [open, iscritto]);

  if (!iscritto) return null;

  const formatDate = (dateString) => {
    if (!dateString) return 'N/D';
    return new Date(dateString).toLocaleDateString('it-IT');
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
      <DialogTitle sx={{ fontWeight: 'bold' }}>Scheda di {iscritto.nome} {iscritto.cognome}</DialogTitle>
      <DialogContent dividers>
        <Grid container spacing={2}>
          <Grid item xs={12} md={7}>
            <Typography><strong>Sede:</strong> {iscritto.sede || 'N/D'}</Typography>
            <Typography><strong>Email:</strong> {iscritto.email || 'N/D'}</Typography>
            <Typography><strong>Cellulare:</strong> {iscritto.cellulare || 'N/D'}</Typography>
            <Typography><strong>Nato/a il:</strong> {formatDate(iscritto.dataNascita)} a {iscritto.luogoNascita || 'N/D'}</Typography>
            <Typography><strong>Residenza:</strong> {`${iscritto.via || ''} ${iscritto.numeroCivico || ''}, ${iscritto.cap || ''} ${iscritto.residenza || ''}`}</Typography>
            <Typography><strong>Codice Fiscale:</strong> {iscritto.codiceFiscale || 'N/D'}</Typography>
            <Typography><strong>Codice Assicurazione:</strong> {iscritto.codiceAssicurazione || 'N/D'}</Typography>
            <Typography><strong>Genitore:</strong> {iscritto.nomeGenitore || 'N/D'} (CF: {iscritto.cfGenitore || 'N/D'})</Typography>
            <Typography><strong>Quota Iscrizione:</strong> {iscritto.quotaIscrizione ? `${iscritto.quotaIscrizione}€` : 'N/D'}</Typography>
            <Typography><strong>Quota Mensile:</strong> {iscritto.quotaMensile ? `${iscritto.quotaMensile}€` : 'N/D'}</Typography>
            <Typography><strong>Scadenza Abbonamento:</strong> {formatDate(iscritto.abbonamento?.scadenza)}</Typography>
            <Typography><strong>Scadenza Certificato:</strong> {formatDate(iscritto.certificatoMedico?.scadenza)}</Typography>
            <Typography><strong>Annotazioni:</strong> {iscritto.annotazioni || 'Nessuna'}</Typography>
          </Grid>
          <Grid item xs={12} md={5}>
            {loadingPagamenti ? <CircularProgress /> : 
              <StoricoPagamenti 
                pagamenti={pagamenti} 
                quotaMensile={iscritto.quotaMensile}
                quotaIscrizione={iscritto.quotaIscrizione}
              />
            }
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: '16px 24px', justifyContent: 'space-between' }}>
        <Button onClick={onAggiungiPagamento} startIcon={<PaymentIcon />} color="success" variant="contained">Aggiungi Pagamento</Button>
        <Box>
          <Button onClick={onEdit} startIcon={<EditIcon />}>Modifica Dati</Button>
          <Button color="error" onClick={() => onDelete(iscritto.id)} startIcon={<DeleteIcon />}>Elimina</Button>
          <Button onClick={onClose}>Chiudi</Button>
        </Box>
      </DialogActions>
    </Dialog>
  );
}

export default IscrittoDetailDialog;
</file>

<file path="src/components/RegistroTecnicoDialog.jsx">
// File: src/components/RegistroTecnicoDialog.jsx (Aggiornato)

import React, { useState, useEffect } from "react";
import {
  Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button,
  FormControl, InputLabel, Select, MenuItem, Box, Typography, Stack, InputAdornment
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import PersonIcon from '@mui/icons-material/Person';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import moment from "moment";

function RegistroTecnicoDialog({ open, onClose, onSave, onDelete, event, dateInfo, tecnici = [] }) {
  const [tecnicoId, setTecnicoId] = useState('');
  const [status, setStatus] = useState('Presente');
  const [oreLavorate, setOreLavorate] = useState(8);
  const [start, setStart] = useState('');
  const [tecnicoError, setTecnicoError] = useState(false);

  useEffect(() => {
    if (!open) {
      setTecnicoError(false);
      return;
    }

    if (event) { // Modifica di un evento esistente
      setTecnicoId(event.tecnicoId || '');
      setStatus(event.status || 'Presente');
      setOreLavorate(event.oreLavorate || 8);
      setStart(moment(event.start).format("YYYY-MM-DD"));
    } else if (dateInfo) { // Creazione di un nuovo evento
      setTecnicoId('');
      setStatus('Presente');
      setOreLavorate(8);
      setStart(moment(dateInfo.startStr || dateInfo.dateStr).format("YYYY-MM-DD"));
    }
  }, [event, dateInfo, open]);

  const handleSave = () => {
    if (!tecnicoId) {
      setTecnicoError(true);
      return;
    }
    onSave({
      id: event?.id,
      tecnicoId,
      status,
      oreLavorate: status === 'Presente' ? parseFloat(oreLavorate) : 0,
      start,
      end: start, // Per eventi di un giorno, start e end sono uguali
      allDay: true,
    });
  };

  const handleDelete = () => event?.id && onDelete(event.id);

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="xs">
      <DialogTitle sx={{ fontWeight: "bold" }}>
        {event ? "Modifica Presenza" : "Registra Presenza"}
      </DialogTitle>
      <DialogContent dividers sx={{ p: 3 }}>
        <Stack spacing={3}>
          <TextField
            fullWidth
            label="Data"
            type="date"
            value={start}
            onChange={(e) => setStart(e.target.value)}
            InputLabelProps={{ shrink: true }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <CalendarTodayIcon />
                </InputAdornment>
              ),
            }}
          />
          <FormControl fullWidth error={tecnicoError}>
            <InputLabel>Tecnico</InputLabel>
            <Select
              label="Tecnico"
              value={tecnicoId}
              onChange={(e) => {
                setTecnicoId(e.target.value);
                if (tecnicoError) setTecnicoError(false);
              }}
              startAdornment={
                <InputAdornment position="start">
                  <PersonIcon />
                </InputAdornment>
              }
            >
              {tecnici.map(t => (
                <MenuItem key={t.id} value={t.id}>{t.cognome} {t.nome}</MenuItem>
              ))}
            </Select>
            {tecnicoError && <Typography color="error" variant="caption" sx={{ pl: 2, pt: 0.5}}>Selezionare un tecnico è obbligatorio.</Typography>}
          </FormControl>
          <FormControl fullWidth>
            <InputLabel>Stato</InputLabel>
            <Select
              label="Stato"
              value={status}
              onChange={(e) => setStatus(e.target.value)}
               startAdornment={
                <InputAdornment position="start">
                  <CheckCircleOutlineIcon />
                </InputAdornment>
              }
            >
              <MenuItem value="Presente">Presente</MenuItem>
              <MenuItem value="Assente">Assente</MenuItem>
            </Select>
          </FormControl>
          {status === 'Presente' && (
            <TextField
              fullWidth
              label="Ore Lavorate"
              type="number"
              value={oreLavorate}
              onChange={(e) => setOreLavorate(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <AccessTimeIcon />
                  </InputAdornment>
                ),
              }}
            />
          )}
        </Stack>
      </DialogContent>
      <DialogActions sx={{ justifyContent: "space-between", p: "16px 24px" }}>
        {event ? (
          <Button onClick={handleDelete} color="error" startIcon={<DeleteIcon />}>Elimina</Button>
        ) : <Box />}
        <Box>
          <Button onClick={onClose} sx={{ mr: 1 }}>Annulla</Button>
          <Button onClick={handleSave} variant="contained" color="primary">Salva</Button>
        </Box>
      </DialogActions>
    </Dialog>
  );
}

export default RegistroTecnicoDialog;
</file>

<file path="src/components/SplitText.jsx">
import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';

const SplitText = ({
  text,
  className,
  delay = 100,
  duration = 0.6,
  ease = "power3.out",
  splitType = "chars",
  from = { opacity: 0, y: 40 },
  to = { opacity: 1, y: 0 },
  onLetterAnimationComplete
}) => {
  const containerRef = useRef(null);

  useEffect(() => {
    if (!containerRef.current) return;

    const elements = containerRef.current.querySelectorAll('.split-char');
    if (elements.length === 0) return;

    gsap.fromTo(elements, 
      { ...from },
      { 
        ...to,
        duration,
        ease,
        stagger: delay / 1000, // GSAP usa i secondi, quindi convertiamo
        onComplete: onLetterAnimationComplete,
      }
    );
  }, [text, delay, duration, ease, from, to, onLetterAnimationComplete]);

  const chars = text.split('').map((char, index) => (
    <span
      key={index}
      className="split-char"
      style={{ display: 'inline-block', opacity: 0 }} // Inizia invisibile
    >
      {char === ' ' ? '\u00A0' : char}
    </span>
  ));

  return (
    <div ref={containerRef} className={className} aria-label={text}>
      {chars}
    </div>
  );
};

export default SplitText;
</file>

<file path="src/components/StatCard.jsx">
import React from 'react';
import { Paper, Typography, Box } from '@mui/material';

function StatCard({ title, value, icon, color = 'primary.main' }) {
  return (
    <Paper 
      elevation={0}
      sx={{ 
        p: 3,
        borderRadius: 4,
        backgroundColor: 'background.paper',
        height: '100%'
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', color: 'text.secondary', mb: 1.5 }}>
        {/* Clona l'icona passata come prop per applicare uno stile */}
        {React.cloneElement(icon, { sx: { fontSize: '1.1rem' } })}
        <Typography variant="body2" sx={{ ml: 1, fontWeight: 'medium' }}>
          {title}
        </Typography>
      </Box>
      <Typography variant="h3" component="p" sx={{ fontWeight: 'bold', color }}>
        {value}
      </Typography>
    </Paper>
  );
}

export default StatCard;
</file>

<file path="src/components/ThemeSelector.jsx">
// src/components/ThemeSelector.jsx

import React from 'react';
import { Button, Box, Typography, Menu, MenuItem } from '@mui/material';
import PaletteIcon from '@mui/icons-material/Palette';
import { useTheme } from '../context/ThemeContext.jsx';

// Elenco dei temi disponibili
const themeOptions = [
  { name: 'Nordic', key: 'nordic' },
  { name: 'Default', key: 'default' },
  { name: 'ASD Gym', key: 'asdgym' },
  { name: 'Federal', key: 'federal' },
  { name: 'Persian Pink', key: 'persianpink' },
];

function ThemeSelector() {
  const { currentTheme, toggleTheme } = useTheme();
  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleThemeChange = (themeKey) => {
    toggleTheme(themeKey);
    handleClose();
  };

  return (
    <Box>
      <Button
        id="theme-button"
        aria-controls={open ? 'theme-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        onClick={handleClick}
        startIcon={<PaletteIcon />}
        variant="contained"
      >
        Cambia Tema
      </Button>
      <Menu
        id="theme-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'theme-button',
        }}
      >
        {themeOptions.map((option) => (
          <MenuItem
            key={option.key}
            onClick={() => handleThemeChange(option.key)}
            selected={option.key === currentTheme}
          >
            {option.name}
          </MenuItem>
        ))}
      </Menu>
    </Box>
  );
}

export default ThemeSelector;
</file>

<file path="src/context/AuthContext.jsx">
import React, { createContext, useState, useEffect, useContext } from 'react';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { Box, CircularProgress } from '@mui/material';

const AuthContext = createContext();

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const auth = getAuth();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, user => {
      setCurrentUser(user);
      setLoading(false);
    });
    return unsubscribe;
  }, [auth]);

  // Mostra un caricamento finché Firebase non ha controllato lo stato di login
  if (loading) {
    return <Box sx={{ display: 'flex', height: '100vh', alignItems: 'center', justifyContent: 'center' }}><CircularProgress /></Box>;
  }

  return (
    <AuthContext.Provider value={{ currentUser }}>
      {children}
    </AuthContext.Provider>
  );
}
</file>

<file path="src/context/NotificationContext.jsx">
// File: src/context/NotificationContext.jsx (Nuovo File)

import React, { createContext, useState, useContext } from 'react';

const NotificationContext = createContext();

export function useNotification() {
  return useContext(NotificationContext);
}

export function NotificationProvider({ children }) {
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'info', // success, error, warning, info
  });

  const showNotification = (message, severity = 'info') => {
    setNotification({ open: true, message, severity });
  };

  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setNotification(prev => ({ ...prev, open: false }));
  };

  const value = {
    notification,
    showNotification,
    handleClose,
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
}
</file>

<file path="src/pages/AgendaPage.jsx">
// File: src/pages/AgendaPage.jsx

import React, { useState, useEffect, useCallback } from "react";
import { Box, Paper, useTheme } from "@mui/material";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import listPlugin from "@fullcalendar/list";
import interactionPlugin from "@fullcalendar/interaction";
import itLocale from "@fullcalendar/core/locales/it"; // <-- 1. IMPORTA LA LINGUA ITALIANA
import { useNotification } from "../context/NotificationContext.jsx";
import EventEditDialog from "../components/EventEditDialog.jsx";
import {
  fetchAgendaEvents,
  addAgendaEvent,
  updateAgendaEvent,
  deleteAgendaEvent,
} from "../services/firebaseService.js";

function AgendaPage() {
  const [events, setEvents] = useState([]);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [selectedDateInfo, setSelectedDateInfo] = useState(null);
  const { showNotification } = useNotification();
  const theme = useTheme();

  const loadEvents = useCallback(async () => {
    try {
      const fetchedEvents = await fetchAgendaEvents();
      setEvents(fetchedEvents);
    } catch (error) {
      console.error("Errore caricamento eventi:", error);
      showNotification("Errore nel caricamento degli eventi.", "error");
    }
  }, [showNotification]);

  useEffect(() => {
    loadEvents();
  }, [loadEvents]);

  const handleDateSelect = (selectInfo) => {
    setSelectedDateInfo(selectInfo);
    setSelectedEvent(null);
    setDialogOpen(true);
  };

  const handleEventClick = (clickInfo) => {
    const eventData = {
      id: clickInfo.event.id,
      title: clickInfo.event.title,
      start: clickInfo.event.startStr,
      end: clickInfo.event.endStr,
      allDay: clickInfo.event.allDay,
      color: clickInfo.event.backgroundColor,
      description: clickInfo.event.extendedProps.description || "",
    };
    setSelectedEvent(eventData);
    setSelectedDateInfo(null);
    setDialogOpen(true);
  };

  const handleEventDrop = async (dropInfo) => {
    const { event } = dropInfo;
    const updatedEvent = {
      id: event.id,
      title: event.title,
      start: event.startStr,
      end: event.endStr,
      allDay: event.allDay,
      color: event.backgroundColor,
      description: event.extendedProps.description || "",
    };
    try {
      await updateAgendaEvent(updatedEvent);
      showNotification("Evento spostato con successo!", "success");
      loadEvents();
    } catch (error) {
      console.error("Errore spostamento evento:", error);
      showNotification("Errore durante l'aggiornamento dell'evento.", "error");
      dropInfo.revert();
    }
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
    setSelectedEvent(null);
    setSelectedDateInfo(null);
  };

  const handleDialogSave = async (eventData) => {
    try {
      if (eventData.id) {
        await updateAgendaEvent(eventData);
        showNotification("Evento modificato con successo!", "success");
      } else {
        await addAgendaEvent(eventData);
        showNotification("Evento creato con successo!", "success");
      }
    } catch (error) {
      console.error("Errore salvataggio:", error);
      showNotification("Errore durante il salvataggio dell'evento.", "error");
    } finally {
      handleDialogClose();
      loadEvents();
    }
  };

  const handleEventDelete = async (eventId) => {
    if (!window.confirm("Sei sicuro di voler eliminare questo evento?")) return;
    try {
      await deleteAgendaEvent(eventId);
      showNotification("Evento eliminato.", "success");
    } catch (error) {
      showNotification("Errore during l'eliminazione.", "error");
    } finally {
      handleDialogClose();
      loadEvents();
    }
  };

  return (
    <>
      <Paper sx={{ p: { xs: 1, sm: 2, md: 3 }, borderRadius: 4 }}>
        {/* 2. BOX CONTENITORE PER APPLICARE STILI AL CALENDARIO */}
        <Box
          sx={{
            ".fc .fc-button-primary": {
              backgroundColor: theme.palette.primary.main,
              color: theme.palette.primary.contrastText,
              border: "none",
              borderRadius: theme.shape.borderRadius,
              textTransform: "none",
              fontWeight: "bold",
              boxShadow: "none",
              "&:hover": {
                backgroundColor: theme.palette.primary.dark,
              },
              "&:focus": {
                boxShadow: "none",
              },
            },
            ".fc .fc-button-primary:not(:disabled).fc-button-active": {
              backgroundColor: theme.palette.primary.dark,
            },
            ".fc .fc-button": {
              textTransform: "none",
              fontWeight: "bold",
            },
            ".fc-toolbar-title": {
              color: theme.palette.text.primary,
              fontWeight: "bold",
            },
            ".fc-col-header-cell-cushion, .fc-daygrid-day-number": {
              color: theme.palette.text.secondary,
              textDecoration: "none",
            },
          }}
        >
          <FullCalendar
            plugins={[
              dayGridPlugin,
              timeGridPlugin,
              listPlugin,
              interactionPlugin,
            ]}
            locale={itLocale} // <-- 3. APPLICA LA LINGUA ITALIANA
            headerToolbar={{
              left: "prev,next today",
              center: "title",
              right: "dayGridMonth,timeGridWeek,listWeek",
            }}
            initialView="dayGridMonth"
            events={events}
            editable={true}
            selectable={true}
            selectMirror={true}
            dayMaxEvents={true}
            select={handleDateSelect}
            eventClick={handleEventClick}
            eventDrop={handleEventDrop}
            height="auto"
            buttonText={{
              // Assicura che i nomi siano corretti se la locale non basta
              today: "Oggi",
              month: "Mese",
              week: "Settimana",
              list: "Agenda",
            }}
          />
        </Box>
      </Paper>

      <EventEditDialog
        open={dialogOpen}
        onClose={handleDialogClose}
        onSave={handleDialogSave}
        onDelete={handleEventDelete}
        event={selectedEvent}
        dateInfo={selectedDateInfo}
      />
    </>
  );
}

export default AgendaPage;
</file>

<file path="src/pages/ArchivioPage.jsx">
// File: src/pages/ArchivioPage.jsx (Nuovo File)

import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where, doc, updateDoc } from "firebase/firestore"; 
import { db } from '../firebase.js';
import { useNotification } from '../context/NotificationContext.jsx';
import { Typography, Box, Paper, List, ListItem, ListItemText, Button, Divider, CircularProgress } from '@mui/material';

function ArchivioPage() {
  const [archiviati, setArchiviati] = useState([]);
  const [loading, setLoading] = useState(true);
  const { showNotification } = useNotification();

  const fetchArchiviati = async () => {
    setLoading(true);
    try {
      const q = query(collection(db, "iscritti"), where("stato", "==", "archiviato"));
      const querySnapshot = await getDocs(q);
      const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setArchiviati(list);
    } catch (error) {
      console.error("Errore caricamento archivio: ", error);
      showNotification("Errore nel caricamento dell'archivio", "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchArchiviati();
  }, []);

  const handleRipristina = async (id) => {
    if (!window.confirm("Sei sicuro di voler ripristinare questo iscritto?")) return;
    try {
      const iscrittoRef = doc(db, "iscritti", id);
      await updateDoc(iscrittoRef, { stato: "attivo" });
      showNotification("Iscritto ripristinato con successo!", "success");
      fetchArchiviati(); // Ricarica la lista degli archiviati per aggiornare la UI
    } catch (error) {
      console.error("Errore ripristino:", error);
      showNotification("Errore durante il ripristino.", "error");
    }
  };

  if (loading) {
    return <Box sx={{ display: 'flex', justifyContent: 'center', mt: 5 }}><CircularProgress /></Box>;
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold' }}>Archivio Iscritti</Typography>
      <Paper sx={{ p: 2, borderRadius: 4 }}>
        <List>
          {archiviati.length > 0 ? archiviati.map((iscritto, index) => (
            <React.Fragment key={iscritto.id}>
              <ListItem secondaryAction={
                <Button variant="outlined" size="small" onClick={() => handleRipristina(iscritto.id)}>Ripristina</Button>
              }>
                <ListItemText 
                  primary={`${iscritto.nome} ${iscritto.cognome}`}
                  secondary={`Sede: ${iscritto.sede || 'N/D'}`}
                />
              </ListItem>
              {index < archiviati.length - 1 && <Divider />}
            </React.Fragment>
          )) : (
            <Typography sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>L'archivio è vuoto.</Typography>
          )}
        </List>
      </Paper>
    </Box>
  );
}

export default ArchivioPage;
</file>

<file path="src/pages/CalendarioPage.jsx">
import React, { useState, useEffect, useMemo } from 'react';
import { collection, getDocs, query } from "firebase/firestore"; 
import { db } from '../firebase.js';
import FullCalendar from '@fullcalendar/react';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import { Box, Paper, useTheme } from '@mui/material';

function CalendarioPage() {
  const [gruppi, setGruppi] = useState([]);
  const theme = useTheme();

  useEffect(() => {
    const fetchGruppi = async () => {
      const q = query(collection(db, "gruppi"));
      const querySnapshot = await getDocs(q);
      setGruppi(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    };
    fetchGruppi();
  }, []);

  const events = useMemo(() => {
    return gruppi
      .filter(g => g.giornoSettimana != null && g.oraInizio && g.oraFine)
      .map(g => ({
        title: `${g.nome} (${g.staffNome})`,
        daysOfWeek: [g.giornoSettimana],
        startTime: g.oraInizio,
        endTime: g.oraFine,
        color: g.sede === 'Frascati' ? theme.palette.primary.main : theme.palette.info.main,
        extendedProps: { gruppoId: g.id, descrizione: g.descrizione }
      }));
  }, [gruppi, theme]);

  return (
    <Paper sx={{ p: {xs: 1, sm: 2, md: 3}, borderRadius: 4 }}>
      <Box sx={{ '.fc-header-toolbar': { flexDirection: { xs: 'column', md: 'row' } }, '.fc-event': { fontSize: '0.9rem' } }}>
        <FullCalendar
          plugins={[timeGridPlugin, interactionPlugin]}
          initialView="timeGridWeek"
          headerToolbar={{
            left: 'prev,next today',
            center: 'title',
            right: 'timeGridWeek,timeGridDay'
          }}
          events={events}
          locale='it'
          allDaySlot={false}
          slotMinTime="08:00:00"
          slotMaxTime="22:00:00"
          height="auto"
          weekends={true}
        />
      </Box>
    </Paper>
  );
}
export default CalendarioPage;
</file>

<file path="src/pages/LoginPage.jsx">
// File: src/pages/LoginPage.jsx
import React, { useState } from 'react';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';
import { Box, TextField, Button, Paper, Typography, Alert } from '@mui/material';
import { useNavigate } from 'react-router-dom';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const auth = getAuth();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    try {
      await signInWithEmailAndPassword(auth, email, password);
      navigate('/');
    } catch (err) {
      setError('Email o password non valide.');
    }
  };

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', alignItems: 'center', justifyContent: 'center', p: 2 }}>
      <Paper elevation={6} sx={{ p: 4, width: '100%', maxWidth: 400, borderRadius: 4 }}>
        <Typography variant="h4" component="h1" sx={{ fontWeight: 'bold', textAlign: 'center', mb: 1 }}>
          ASD GYM POINT
        </Typography>
        <Typography sx={{ textAlign: 'center', mb: 3, color: 'text.secondary' }}>
          Accesso Gestionale
        </Typography>
        <Box component="form" onSubmit={handleLogin}>
          <TextField fullWidth margin="normal" label="Email" variant="outlined" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
          <TextField fullWidth margin="normal" label="Password" variant="outlined" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
          {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
          <Button type="submit" fullWidth variant="contained" size="large" sx={{ mt: 3 }}>
            Accedi
          </Button>
        </Box>
      </Paper>
    </Box>
  );
}

export default LoginPage;
</file>

<file path="src/pages/TecniciPage.jsx">
// File: src/pages/TecniciPage.jsx

import React, { useState, useEffect } from "react";
import { Link as RouterLink } from "react-router-dom";
import { useNotification } from "../context/NotificationContext.jsx";
import {
  Typography,
  Box,
  Paper,
  Button,
  List,
  ListItemButton,
  ListItemText,
  Divider,
  CircularProgress,
} from "@mui/material";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import { fetchTecnici, addTecnico } from "../services/firebaseService.js";
import TecnicoEditDialog from "../components/TecnicoEditDialog.jsx";

function TecniciPage() {
  const [tecnici, setTecnici] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isDialogOpen, setDialogOpen] = useState(false);
  const { showNotification } = useNotification();

  const loadTecnici = async () => {
    setLoading(true);
    try {
      const data = await fetchTecnici();
      setTecnici(data);
    } catch (error) {
      console.error("Errore caricamento tecnici:", error);
      showNotification("Errore nel caricamento dei tecnici.", "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadTecnici();
  }, []);

  const handleSaveTecnico = async (tecnicoData) => {
    try {
      if (!tecnicoData.nome || !tecnicoData.cognome) {
        showNotification("Nome e Cognome sono obbligatori.", "error");
        return;
      }
      await addTecnico(tecnicoData);
      showNotification("Nuovo tecnico aggiunto!", "success");
      setDialogOpen(false);
      loadTecnici();
    } catch (error) {
      showNotification("Errore durante il salvataggio.", "error");
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 5 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Paper elevation={0} sx={{ p: { xs: 2, md: 3 }, borderRadius: 4, mb: 3 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Typography variant="h4" component="h2" sx={{ fontWeight: "bold" }}>
            Gestione Tecnici
          </Typography>
          <Button
            variant="contained"
            startIcon={<AddCircleOutlineIcon />}
            onClick={() => setDialogOpen(true)}
          >
            Aggiungi Tecnico
          </Button>
        </Box>
      </Paper>

      <Paper sx={{ p: 2, borderRadius: 4 }}>
        <List>
          {tecnici.map((tecnico, index) => (
            <React.Fragment key={tecnico.id}>
              <ListItemButton
                component={RouterLink}
                to={`/tecnici/${tecnico.id}`}
              >
                <ListItemText
                  primary={`${tecnico.cognome || "(Cognome mancante)"} ${
                    tecnico.nome || "(Nome mancante)"
                  }`}
                  secondary={tecnico.ruolo || "N/D"}
                  primaryTypographyProps={{ fontWeight: "bold" }}
                />
              </ListItemButton>
              {index < tecnici.length - 1 && <Divider />}
            </React.Fragment>
          ))}
        </List>
      </Paper>

      <TecnicoEditDialog
        open={isDialogOpen}
        onClose={() => setDialogOpen(false)}
        onSave={handleSaveTecnico}
      />
    </Box>
  );
}

export default TecniciPage;
</file>

<file path="src/utils/timeSlots.js">
// File: src/utils/timeSlots.js (Nuovo File)

export const giorniSettimana = [
  { label: 'Lunedì', value: 1 }, { label: 'Martedì', value: 2 }, { label: 'Mercoledì', value: 3 },
  { label: 'Giovedì', value: 4 }, { label: 'Venerdì', value: 5 }, { label: 'Sabato', value: 6 }, { label: 'Domenica', value: 0 }
];

// Genera orari dalle 08:00 alle 21:30 con intervalli di 30 minuti
export const orari = Array.from({ length: (22 - 8) * 2 }, (_, i) => {
  const totalMinutes = 8 * 60 + i * 30;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
});
</file>

<file path="src/components/AggiungiPagamentoDialog.jsx">
// File: src/components/AggiungiPagamentoDialog.jsx

import React, { useState } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, MenuItem, FormControl, InputLabel, Select } from '@mui/material';

const annoSportivo = [
  { nome: 'Settembre', index: 8 }, { nome: 'Ottobre', index: 9 }, { nome: 'Novembre', index: 10 }, 
  { nome: 'Dicembre', index: 11 }, { nome: 'Gennaio', index: 0 }, { nome: 'Febbraio', index: 1 }, 
  { nome: 'Marzo', index: 2 }, { nome: 'Aprile', index: 3 }, { nome: 'Maggio', index: 4 }, 
  { nome: 'Giugno', index: 5 }
];

function AggiungiPagamentoDialog({ open, onClose, onSave, iscritto }) {
  const [cifra, setCifra] = useState('');
  const [tipoPagamento, setTipoPagamento] = useState('Quota Mensile');
  const [meseSelezionato, setMeseSelezionato] = useState(new Date().getMonth());
  const [metodoPagamento, setMetodoPagamento] = useState('Contanti'); // NUOVO STATO

  const handleSave = () => {
    if (!cifra || isNaN(cifra) || cifra <= 0) {
      alert("Per favore, inserisci una cifra valida.");
      return;
    }
    // Passiamo tutti i dati necessari alla funzione di salvataggio, inclusa la nuova selezione
    onSave({
      cifra: parseFloat(cifra),
      tipo: tipoPagamento,
      mese: tipoPagamento === 'Quota Mensile' ? meseSelezionato : null,
      metodoPagamento: metodoPagamento // NUOVO CAMPO
    });
    // Reset
    setCifra('');
    setTipoPagamento('Quota Mensile');
    setMeseSelezionato(new Date().getMonth());
    setMetodoPagamento('Contanti');
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>Nuovo Pagamento per {iscritto?.nome} {iscritto?.cognome}</DialogTitle>
      <DialogContent sx={{ pt: '20px !important' }}>
        
        {/* NUOVO SELETTORE METODO DI PAGAMENTO */}
        <FormControl fullWidth margin="dense">
          <InputLabel>Metodo di Pagamento</InputLabel>
          <Select
            label="Metodo di Pagamento"
            value={metodoPagamento}
            onChange={(e) => setMetodoPagamento(e.target.value)}
          >
            <MenuItem value="Contanti">Contanti</MenuItem>
            <MenuItem value="Bonifico">Bonifico</MenuItem>
          </Select>
        </FormControl>

        <FormControl fullWidth margin="dense">
          <InputLabel>Tipo di Pagamento</InputLabel>
          <Select
            label="Tipo di Pagamento"
            value={tipoPagamento}
            onChange={(e) => setTipoPagamento(e.target.value)}
          >
            <MenuItem value="Quota Mensile">Quota Mensile</MenuItem>
            <MenuItem value="Quota Iscrizione">Quota Iscrizione</MenuItem>
          </Select>
        </FormControl>

        {tipoPagamento === 'Quota Mensile' && (
          <FormControl fullWidth margin="dense">
            <InputLabel>Mese di Riferimento</InputLabel>
            <Select
              label="Mese di Riferimento"
              value={meseSelezionato}
              onChange={(e) => setMeseSelezionato(e.target.value)}
            >
              {annoSportivo.map(mese => (
                <MenuItem key={mese.index} value={mese.index}>{mese.nome}</MenuItem>
              ))}
            </Select>
          </FormControl>
        )}
        
        <TextField autoFocus margin="dense" name="cifra" label="Cifra Pagata (€)" type="number" fullWidth variant="outlined" value={cifra} onChange={(e) => setCifra(e.target.value)} />
      </DialogContent>
      <DialogActions sx={{ p: '16px 24px' }}>
        <Button onClick={onClose}>Annulla</Button>
        <Button onClick={handleSave} variant="contained">Salva Pagamento</Button>
      </DialogActions>
    </Dialog>
  );
}

export default AggiungiPagamentoDialog;
</file>

<file path="src/components/GestisciMembriDialog.jsx">
import React, { useState, useEffect } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, Grid, List, ListItem, ListItemText, Paper, Typography, Box } from '@mui/material';

function GestisciMembriDialog({ open, onClose, onSave, gruppo, iscritti = [] }) {
  const [membriNelGruppo, setMembriNelGruppo] = useState([]);
  const [membriFuoriDalGruppo, setMembriFuoriDalGruppo] = useState([]);

  useEffect(() => {
    if (gruppo) {
      const idsMembri = gruppo.membri || [];
      const iscrittiNelGruppo = iscritti.filter(i => idsMembri.includes(i.id)).sort((a,b) => a.cognome.localeCompare(b.cognome));
      const iscrittiFuori = iscritti.filter(i => !idsMembri.includes(i.id)).sort((a,b) => a.cognome.localeCompare(b.cognome));
      setMembriNelGruppo(iscrittiNelGruppo);
      setMembriFuoriDalGruppo(iscrittiFuori);
    }
  }, [gruppo, iscritti, open]);

  const spostaInGruppo = (iscritto) => {
    setMembriFuoriDalGruppo(membriFuoriDalGruppo.filter(i => i.id !== iscritto.id));
    setMembriNelGruppo([...membriNelGruppo, iscritto].sort((a,b) => a.cognome.localeCompare(b.cognome)));
  };

  const rimuoviDaGruppo = (iscritto) => {
    setMembriNelGruppo(membriNelGruppo.filter(i => i.id !== iscritto.id));
    setMembriFuoriDalGruppo([...membriFuoriDalGruppo, iscritto].sort((a,b) => a.cognome.localeCompare(b.cognome)));
  };

  const handleSave = () => {
    const idsMembriFinali = membriNelGruppo.map(i => i.id);
    onSave(gruppo.id, idsMembriFinali);
  };

  const renderList = (title, items, action) => (
    <Paper sx={{ p: 2, minHeight: 300, display: 'flex', flexDirection: 'column' }}>
      <Typography variant="h6" sx={{ mb: 1 }}>{title} ({items.length})</Typography>
      <Box sx={{ flexGrow: 1, overflow: 'auto' }}>
        <List dense>
          {items.map(iscritto => (
            <ListItem key={iscritto.id} button onClick={() => action(iscritto)}>
              <ListItemText primary={`${iscritto.cognome} ${iscritto.nome}`} />
            </ListItem>
          ))}
        </List>
      </Box>
    </Paper>
  );

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
      <DialogTitle>Gestisci Membri per: **{gruppo?.nome}**</DialogTitle>
      <DialogContent>
        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={6}>{renderList('Atleti nel Gruppo', membriNelGruppo, rimuoviDaGruppo)}</Grid>
          <Grid item xs={6}>{renderList('Atleti non nel Gruppo', membriFuoriDalGruppo, spostaInGruppo)}</Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: '16px 24px' }}>
        <Button onClick={onClose}>Annulla</Button>
        <Button onClick={handleSave} variant="contained">Salva</Button>
      </DialogActions>
    </Dialog>
  );
}

export default GestisciMembriDialog;
</file>

<file path="src/components/GruppoEditDialog.jsx">
import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";
import { giorniSettimana, orari } from "../utils/timeSlots.js";

function GruppoEditDialog({ open, onClose, onSave, gruppo, staff = [] }) {
  const [formData, setFormData] = useState(gruppo || {});

  useEffect(() => {
    if (gruppo) {
      setFormData(gruppo);
    }
  }, [gruppo, open]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSave = () => {
    onSave(formData);
  };

  if (!gruppo) return null;

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Modifica Gruppo: {gruppo.nome}</DialogTitle>
      <DialogContent>
        <Grid container spacing={2} sx={{ pt: 1 }}>
          <Grid item xs={12}>
            <TextField
              fullWidth
              margin="dense"
              name="nome"
              label="Nome Gruppo"
              value={formData.nome || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              margin="dense"
              name="descrizione"
              label="Descrizione"
              value={formData.descrizione || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControl fullWidth margin="dense">
              <InputLabel>Allenatore</InputLabel>
              <Select
                name="staffId"
                label="Allenatore"
                value={formData.staffId || ""}
                onChange={handleChange}
              >
                <MenuItem value="">
                  <em>Nessuno</em>
                </MenuItem>
                {staff.map((s) => (
                  <MenuItem key={s.id} value={s.id}>
                    {s.cognome} {s.nome}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={4}>
            <FormControl fullWidth margin="dense">
              <InputLabel>Giorno</InputLabel>
              <Select
                name="giornoSettimana"
                label="Giorno"
                value={formData.giornoSettimana ?? ""}
                onChange={handleChange}
              >
                {giorniSettimana.map((g) => (
                  <MenuItem key={g.value} value={g.value}>
                    {g.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={4}>
            <FormControl fullWidth margin="dense">
              <InputLabel>Ora Inizio</InputLabel>
              <Select
                name="oraInizio"
                label="Ora Inizio"
                value={formData.oraInizio || ""}
                onChange={handleChange}
              >
                {orari.map((o) => (
                  <MenuItem key={o} value={o}>
                    {o}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={4}>
            <FormControl fullWidth margin="dense">
              <InputLabel>Ora Fine</InputLabel>
              <Select
                name="oraFine"
                label="Ora Fine"
                value={formData.oraFine || ""}
                onChange={handleChange}
              >
                {orari.map((o) => (
                  <MenuItem key={o} value={o}>
                    {o}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: "16px 24px" }}>
        <Button onClick={onClose}>Annulla</Button>
        <Button onClick={handleSave} variant="contained">
          Salva Modifiche
        </Button>
      </DialogActions>
    </Dialog>
  );
}
export default GruppoEditDialog;
</file>

<file path="src/components/Notifier.jsx">
// File: src/components/Notifier.jsx

import React from 'react';
import { Snackbar, Alert } from '@mui/material';
import { useNotification } from '../context/NotificationContext.jsx';

function Notifier() {
  const { notification, handleClose } = useNotification();
  const { open, message, severity } = notification;

  return (
    <Snackbar
      open={open}
      autoHideDuration={4000} // La notifica scompare dopo 4 secondi
      onClose={handleClose}
      anchorOrigin={{ vertical: 'top', horizontal: 'center' }} // MODIFICA: Spostato in alto al centro
    >
      <Alert onClose={handleClose} severity={severity} sx={{ width: '100%', borderRadius: 2, fontWeight: 'bold' }}>
        {message}
      </Alert>
    </Snackbar>
  );
}

export default Notifier;
</file>

<file path="src/components/TecnicoEditDialog.jsx">
// File: src/components/TecnicoEditDialog.jsx (AGGIORNATO)

import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";

function TecnicoEditDialog({ open, onClose, onSave, tecnico }) {
  const [formData, setFormData] = useState({});

  useEffect(() => {
    if (tecnico) {
      // Se stiamo modificando, popola il form, assicurando pagaOraria
      setFormData({
        ...tecnico,
        pagaOraria: tecnico.pagaOraria ?? 0,
      });
    } else {
      // Se stiamo creando, imposta un default
      setFormData({ ruolo: "Allenatore", pagaOraria: 0 }); 
    }
  }, [tecnico, open]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ 
        ...prev, 
        // Conversione esplicita a float per pagaOraria
        [name]: (name === 'pagaOraria') ? parseFloat(value) || 0 : value 
    }));
  };

  const handleSave = () => {
    // La paga oraria viene passata come numero o 0
    onSave({
        ...formData,
        pagaOraria: parseFloat(formData.pagaOraria) || 0,
    });
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
      <DialogTitle>
        {tecnico ? `Modifica: ${tecnico.cognome}` : "Nuovo Tecnico"}
      </DialogTitle>
      <DialogContent dividers sx={{ pt: 2 }}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Nome"
              name="nome"
              value={formData.nome || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Cognome"
              name="cognome"
              value={formData.cognome || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Luogo di Nascita"
              name="luogoNascita"
              value={formData.luogoNascita || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Data di Nascita"
              name="dataNascita"
              type="date"
              value={formData.dataNascita || ""}
              onChange={handleChange}
              InputLabelProps={{ shrink: true }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Codice Fiscale"
              name="codiceFiscale"
              value={formData.codiceFiscale || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Ruolo</InputLabel>
              <Select
                label="Ruolo"
                name="ruolo"
                value={formData.ruolo || "Allenatore"}
                onChange={handleChange}
              >
                <MenuItem value="Allenatore">Allenatore</MenuItem>
                <MenuItem value="Segreteria">Segreteria</MenuItem>
                <MenuItem value="Dirigente">Dirigente</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={9}>
            <TextField
              fullWidth
              label="Via"
              name="via"
              value={formData.via || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              fullWidth
              label="CAP"
              name="cap"
              value={formData.cap || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={9}>
            <TextField
              fullWidth
              label="Città di Residenza"
              name="residenza"
              value={formData.residenza || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              fullWidth
              label="Provincia"
              name="provincia"
              value={formData.provincia || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Cellulare"
              name="cellulare"
              value={formData.cellulare || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Email"
              name="email"
              type="email"
              value={formData.email || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={4}>
            <TextField
              fullWidth
              label="Numero Tessera"
              name="numeroTessera"
              value={formData.numeroTessera || ""}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12} sm={4}>
            <TextField
              fullWidth
              label="Numero Documento"
              name="numeroDocumento"
              value={formData.numeroDocumento || ""}
              onChange={handleChange}
            />
          </Grid>
          {/* NUOVO CAMPO: Paga Oraria */}
          <Grid item xs={12} sm={4}>
            <TextField
              fullWidth
              label="Paga Oraria (€)"
              name="pagaOraria"
              type="number"
              value={formData.pagaOraria || 0}
              onChange={handleChange}
              InputProps={{ inputProps: { min: 0, step: 0.01 } }}
            />
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: "16px 24px" }}>
        <Button onClick={onClose}>Annulla</Button>
        <Button onClick={handleSave} variant="contained">
          Salva
        </Button>
      </DialogActions>
    </Dialog>
  );
}
export default TecnicoEditDialog;
</file>

<file path="src/components/TiltedCard.css">
/* File: src/components/TiltedCard.css */
.tilted-card-container {
  perspective: 1000px;
  transform-style: preserve-3d;
  will-change: transform;
  display: flex;
  width: 100%;
  height: 100%;
}
</file>

<file path="src/components/TiltedCard.jsx">
// File: src/components/TiltedCard.jsx
import { useRef } from 'react';
import { motion, useMotionValue, useSpring } from 'framer-motion';
import './TiltedCard.css';

const springValues = {
  damping: 35,
  stiffness: 150,
  mass: 1.5
};

export default function TiltedCard({
  children, // <-- MODIFICA CHIAVE: per accettare la tua card come contenuto
  rotateAmplitude = 8,
  scaleOnHover = 1.04,
}) {
  const ref = useRef(null);

  const rotateX = useSpring(useMotionValue(0), springValues);
  const rotateY = useSpring(useMotionValue(0), springValues);
  const scale = useSpring(1, springValues);

  function handleMouse(e) {
    if (!ref.current) return;

    const rect = ref.current.getBoundingClientRect();
    const offsetX = e.clientX - rect.left - rect.width / 2;
    const offsetY = e.clientY - rect.top - rect.height / 2;

    const rotationX = (offsetY / (rect.height / 2)) * -rotateAmplitude;
    const rotationY = (offsetX / (rect.width / 2)) * rotateAmplitude;

    rotateX.set(rotationX);
    rotateY.set(rotationY);
  }

  function handleMouseEnter() {
    scale.set(scaleOnHover);
  }

  function handleMouseLeave() {
    scale.set(1);
    rotateX.set(0);
    rotateY.set(0);
  }

  return (
    <motion.div
      ref={ref}
      className="tilted-card-container"
      onMouseMove={handleMouse}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      style={{
        scale,
        rotateX,
        rotateY,
      }}
    >
      {children}
    </motion.div>
  );
}
</file>

<file path="src/context/ThemeContext.jsx">
// src/context/ThemeContext.jsx

import React, { createContext, useState, useContext, useMemo } from 'react';
import { ThemeProvider } from '@mui/material/styles';
import { themes } from '../theme.js';

const ThemeContext = createContext();

export const ThemeProviderWrapper = ({ children }) => {
  // Il tema predefinito è impostato su 'default', che è presente nel tuo theme.js
  const [currentTheme, setCurrentTheme] = useState('smarthome'); 

  const toggleTheme = (themeName) => {
    setCurrentTheme(themeName);
  };

  // useMemo serve a ricalcolare il tema solo quando il nome cambia, ottimizzando le performance
  const theme = useMemo(() => {
    // Gestisce il caso in cui il tema non esista, per prevenire errori
    return themes[currentTheme] || themes['nordic'];
  }, [currentTheme]);

  return (
    <ThemeContext.Provider value={{ currentTheme, toggleTheme }}>
      <ThemeProvider theme={theme}>
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);
</file>

<file path="src/pages/RegistroTecniciPage.jsx">
// File: src/pages/RegistroTecniciPage.jsx (AGGIORNATO)

import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { 
  Box, Paper, useTheme, Typography, Table, TableBody, TableCell, 
  TableContainer, TableHead, TableRow, FormControl, Select, MenuItem,
  ToggleButton, ToggleButtonGroup, Stack // Importo Stack
} from "@mui/material";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import listPlugin from "@fullcalendar/list";
import interactionPlugin from "@fullcalendar/interaction";
import itLocale from "@fullcalendar/core/locales/it";
import { useNotification } from "../context/NotificationContext.jsx";
import { fetchTecnici, fetchPresenzeTecnici, addPresenzaTecnico, updatePresenzaTecnico, deletePresenzaTecnico } from "../services/firebaseService.js";
import RegistroTecnicoDialog from "../components/RegistroTecnicoDialog.jsx";
import moment from "moment";
import 'moment/locale/it';

moment.locale('it');

const generaAnni = (numAnni = 5) => {
  const annoCorrente = new Date().getFullYear();
  return Array.from({ length: numAnni }, (_, i) => annoCorrente - i);
};

const MESI = [
    { nome: 'Gennaio', valore: 0 }, { nome: 'Febbraio', valore: 1 }, { nome: 'Marzo', valore: 2 },
    { nome: 'Aprile', valore: 3 }, { nome: 'Maggio', valore: 4 }, { nome: 'Giugno', valore: 5 },
    { nome: 'Luglio', valore: 6 }, { nome: 'Agosto', valore: 7 }, { nome: 'Settembre', valore: 8 },
    { nome: 'Ottobre', valore: 9 }, { nome: 'Novembre', valore: 10 }, { nome: 'Dicembre', valore: 11 }
];

function RegistroTecniciPage() {
  const [rawEvents, setRawEvents] = useState([]);
  const [tecnici, setTecnici] = useState([]);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [selectedDateInfo, setSelectedDateInfo] = useState(null);
  const { showNotification } = useNotification();
  const theme = useTheme();
  const calendarRef = useRef(null);

  const anniDisponibili = useMemo(() => generaAnni(), []);
  const [reportMode, setReportMode] = useState('Annuale');
  const [annoReport, setAnnoReport] = useState(new Date().getFullYear());
  const [meseReport, setMeseReport] = useState(new Date().getMonth());

  const loadData = useCallback(async () => {
    try {
      const [fetchedEvents, fetchedTecnici] = await Promise.all([ fetchPresenzeTecnici(), fetchTecnici() ]);
      setRawEvents(fetchedEvents);
      setTecnici(fetchedTecnici);
    } catch (error) { showNotification("Errore nel caricamento dei dati.", "error"); }
  }, [showNotification]);

  useEffect(() => { loadData(); }, [loadData]);
  
  const calendarEvents = useMemo(() => {
    return rawEvents.map(event => {
        const tecnico = tecnici.find(t => t.id === event.tecnicoId);
        const title = `${tecnico ? tecnico.cognome : 'N/D'}: ${event.status === 'Presente' ? `${event.oreLavorate} ore` : 'Assente'}`;
        return {
            id: event.id, title, start: event.start, end: event.end, allDay: event.allDay,
            backgroundColor: event.status === 'Presente' ? theme.palette.success.main : theme.palette.error.main,
            borderColor: event.status === 'Presente' ? theme.palette.success.main : theme.palette.error.main,
            extendedProps: event,
        };
    });
  }, [rawEvents, tecnici, theme]);
  
  // LOGICA AGGIORNATA PER IL REPORT E CALCOLO DEL COSTO
  const reportData = useMemo(() => {
    const tecniciMap = tecnici.reduce((acc, tecnico) => {
        acc[tecnico.id] = {
            id: tecnico.id, 
            nome: `${tecnico.cognome} ${tecnico.nome}`,
            presenze: 0, 
            assenze: 0, 
            oreTotali: 0,
            pagaOraria: parseFloat(tecnico.pagaOraria) || 0, // Usa la paga oraria
        };
        return acc;
    }, {});

    rawEvents.forEach(event => {
      const eventDate = moment(event.start);
      const isCorrectYear = eventDate.year() === annoReport;
      const isCorrectMonth = eventDate.month() === meseReport;

      if (isCorrectYear && (reportMode === 'Annuale' || isCorrectMonth)) {
        const statTecnico = tecniciMap[event.tecnicoId];
        if (statTecnico) {
          if (event.status === 'Presente') {
            statTecnico.presenze += 1;
            statTecnico.oreTotali += parseFloat(event.oreLavorate) || 0;
          } else if (event.status === 'Assente') {
            statTecnico.assenze += 1;
          }
        }
      }
    });

    // Calcolo del costo totale
    return Object.values(tecniciMap).map(stat => ({
        ...stat,
        // CALCOLO DEL COSTO: Ore Totali * Paga Oraria
        costoTotale: stat.oreTotali * stat.pagaOraria,
    }));

  }, [rawEvents, tecnici, annoReport, meseReport, reportMode]);

  const handleDateClick = (arg) => {
    const calendarApi = calendarRef.current?.getApi();
    if (calendarApi && calendarApi.view.type === 'customYear') {
      // Cliccando su un giorno nella vista annuale, naviga al mese corrispondente
      calendarApi.changeView('dayGridMonth', arg.date);
    } else {
      setSelectedDateInfo(arg);
      setSelectedEvent(null);
      setDialogOpen(true);
    }
  };
  
  // LOGICA AGGIUNTA: Rendi il titolo del mese cliccabile nella vista annuale
  useEffect(() => {
    const calendarApi = calendarRef.current?.getApi();
    if (!calendarApi) return;

    const addClickListenerToMonthHeaders = () => {
        // FullCalendar wraps the month title in 'a.fc-daygrid-month-header' in multi-month/year view
        const monthHeaders = calendarApi.el.querySelectorAll('.fc-daygrid-month-header');
        
        // La logica viene eseguita solo se si è nella vista customYear
        if (calendarApi.view.type !== 'customYear' && monthHeaders.length === 0) return;
        
        monthHeaders.forEach(header => {
            // Impedisce di attaccare i listener più volte
            if (!header.dataset.hasMonthClickListener) {
                // Il testo del titolo è nel formato "Mese Anno"
                const titleText = header.textContent.trim();
                const monthDate = moment(titleText, 'MMMM YYYY', 'it');
                
                if (monthDate.isValid()) {
                    const handleClick = (e) => {
                        e.preventDefault(); 
                        calendarApi.changeView('dayGridMonth', monthDate.toDate());
                    };
                    
                    header.addEventListener('click', handleClick);
                    header.style.cursor = 'pointer';
                    header.dataset.hasMonthClickListener = 'true'; // Mark for cleanup
                }
            }
        });
    };

    // Callback per FullCalendar quando la vista è montata
    const viewMountHandler = ({ view }) => {
        if (view.type === 'customYear') {
            // Necessario un leggero ritardo per assicurare che gli elementi DOM di tutti i mesi siano disponibili
            setTimeout(addClickListenerToMonthHeaders, 0); 
        }
    };

    // Imposta l'opzione viewDidMount sul calendario
    calendarApi.setOption('viewDidMount', viewMountHandler);
    
    // Tentativo di attach iniziale in caso la vista sia già customYear al mount
    if (calendarApi.view.type === 'customYear') {
        setTimeout(addClickListenerToMonthHeaders, 0);
    }

  }, [calendarRef.current]);
  
  const handleEventClick = (clickInfo) => { setSelectedEvent(clickInfo.event.extendedProps); setSelectedDateInfo(null); setDialogOpen(true); };
  const handleDialogClose = () => { setDialogOpen(false); setSelectedEvent(null); setSelectedDateInfo(null); };

  const handleDayCellMount = (arg) => {
    const dateStr = moment(arg.date).format('YYYY-MM-DD');
    const eventsOnDay = rawEvents.some(event => moment(event.start).isSame(dateStr, 'day'));
    
    if (eventsOnDay) {
        const dayNumberEl = arg.el.querySelector('.fc-daygrid-day-number');
        if (dayNumberEl) {
            dayNumberEl.style.border = `2px solid ${theme.palette.primary.main}`;
            dayNumberEl.style.borderRadius = '50%';
            dayNumberEl.style.width = '24px';
            dayNumberEl.style.height = '24px';
            dayNumberEl.style.display = 'flex';
            dayNumberEl.style.alignItems = 'center';
            dayNumberEl.style.justifyContent = 'center';
            dayNumberEl.style.lineHeight = '1';
            dayNumberEl.style.padding = '0';
        }
    }
  };

  const handleDialogSave = async (eventData) => {
    try {
      if (eventData.id) {
        await updatePresenzaTecnico(eventData);
        showNotification("Presenza modificata con successo!", "success");
      } else {
        await addPresenzaTecnico(eventData);
        showNotification("Presenza registrata con successo!", "success");
      }
    } catch (error) { showNotification("Errore durante il salvataggio.", "error");
    } finally { handleDialogClose(); loadData(); }
  };

  const handleEventDelete = async (eventId) => {
    if (!window.confirm("Sei sicuro di voler eliminare questa registrazione?")) return;
    try {
      await deletePresenzaTecnico(eventId);
      showNotification("Registrazione eliminata.", "success");
    } catch (error) {
      showNotification("Errore durante l'eliminazione.", "error");
    } finally { handleDialogClose(); loadData(); }
  };

  return (
    <>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold' }}>Registro Presenze Tecnici</Typography>
      <Paper sx={{ p: { xs: 1, sm: 2, md: 3 }, borderRadius: 4, mb: 4 }}>
        <Box
          sx={{
            ".fc .fc-button-primary": { backgroundColor: theme.palette.primary.main, color: theme.palette.primary.contrastText, border: "none", borderRadius: theme.shape.borderRadius },
            ".fc .fc-button-primary:not(:disabled).fc-button-active": { backgroundColor: theme.palette.primary.dark },
            ".fc-toolbar-title": { color: theme.palette.text.primary, fontWeight: "bold" },
            
            // STILI PER OTTENERE LA VISTA ANNUALE COMPATTA E A MATRICE
            '.fc-customYear-view': {
              '.fc-scrollgrid, .fc-daygrid-month': { border: 'none', overflow: 'hidden' },
              
              // Griglia Responsiva (mattonelle 4x3)
              '.fc-daygrid-months': { 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
                gap: '1em', 
              },
              '.fc-daygrid-month': { 
                padding: '0.5em', 
                border: '1px solid', 
                borderColor: theme.palette.divider, 
                borderRadius: '8px', 
                marginBottom: '0 !important',
                // Compattezza del mese
                '& table': { height: '100%', width: '100%' },
              },
              // Header del mese (Mese Anno)
              '.fc-daygrid-month-header': { 
                  textAlign: 'center', 
                  padding: '5px 0', 
                  backgroundColor: theme.palette.action.hover + '40', // Sfondo leggero per il titolo
                  borderBottom: `1px solid ${theme.palette.divider}`,
                  '& h2': { 
                      fontSize: '1em', 
                      fontWeight: '700',
                      color: theme.palette.text.primary, 
                  } 
              },
              // Intestazioni giorni (L, M, M, G, V, S, D)
              '.fc-col-header-cell-cushion': { 
                  fontSize: '0.75em', 
                  textDecoration: 'none',
                  padding: '2px 0',
                  color: theme.palette.text.secondary 
              },
              // Numero giorno
              '.fc-daygrid-day-number': { 
                  fontSize: '0.75em', 
                  padding: '0.2em 0.3em',
                  color: theme.palette.text.primary
              },
              '.fc-day-other .fc-daygrid-day-number': { color: theme.palette.action.disabled },
              '.fc-daygrid-day-events': { display: 'none' }, // Nasconde gli eventi per mantenere pulito
              '.fc-day-today': { 
                  backgroundColor: 'transparent !important', 
                  '& .fc-daygrid-day-number': { 
                      color: theme.palette.primary.main, 
                      fontWeight: 'bold',
                      backgroundColor: theme.palette.primary.main + '20', 
                      borderRadius: '50%'
                  } 
              },
            }
          }}
        >
          <FullCalendar
            ref={calendarRef}
            plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}
            locale={itLocale}
            headerToolbar={{ left: "prev,next today", center: "title", right: "customYear,dayGridMonth,timeGridWeek" }}
            buttonText={{ today: "Oggi", month: "Mese", week: "Settimana", list: "Agenda", customYear: "Anno" }}
            initialView="dayGridMonth"
            events={calendarEvents}
            selectable={true}
            height="auto"
            dayHeaderFormat={{ weekday: 'narrow' }}
            fixedWeekCount={false}
            dateClick={handleDateClick}
            eventClick={handleEventClick}
            dayCellDidMount={handleDayCellMount}
            views={{
              customYear: {
                type: 'dayGrid',
                duration: { years: 1 },
                buttonText: 'Anno',
              }
            }}
          />
        </Box>
      </Paper>

      <Box>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2, flexWrap: 'wrap', gap: 2 }}>
            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>Riepilogo</Typography>
            {/* MODIFICHE UI: Stack per mantenere l'allineamento e usare Box per il layout fisso */}
            <Stack direction="row" spacing={2} alignItems="center">
                
                {/* 1. Toggle Button con color="primary" */}
                <ToggleButtonGroup 
                    value={reportMode} 
                    exclusive 
                    onChange={(e, newMode) => { if (newMode !== null) setReportMode(newMode); }} 
                    size="small"
                    color="primary" // FISSA IL COLORE
                >
                    <ToggleButton value="Mensile">Mensile</ToggleButton>
                    <ToggleButton value="Annuale">Annuale</ToggleButton>
                </ToggleButtonGroup>
                
                {/* 2. Box a larghezza fissa per il selettore del Mese */}
                <Box 
                    sx={{ 
                        minWidth: 120, 
                        // Fissa l'altezza per evitare che lo Stack collassi
                        height: 40, 
                        // Usa visibility: hidden per nascondere l'elemento 
                        // ma mantenerne lo spazio riservato.
                        visibility: reportMode === 'Mensile' ? 'visible' : 'hidden' 
                    }}
                >
                    {/* Renderizza il FormControl sempre, il Box lo nasconde se non serve */}
                    <FormControl fullWidth size="small">
                        <Select 
                            value={meseReport} 
                            onChange={(e) => setMeseReport(e.target.value)}
                        >
                            {MESI.map(mese => <MenuItem key={mese.valore} value={mese.valore}>{mese.nome}</MenuItem>)}
                        </Select>
                    </FormControl>
                </Box>
                
                {/* Selettore Anno */}
                <FormControl size="small" sx={{minWidth: 120}}>
                    <Select value={annoReport} onChange={(e) => setAnnoReport(e.target.value)}>
                        {anniDisponibili.map(anno => <MenuItem key={anno} value={anno}>{anno}</MenuItem>)}
                    </Select>
                </FormControl>
            </Stack>
            {/* FINE MODIFICHE UI */}
        </Box>
        <Paper sx={{ p: 2, borderRadius: 4 }}>
            <TableContainer>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell sx={{fontWeight: 'bold'}}>Tecnico</TableCell>
                            <TableCell align="center" sx={{fontWeight: 'bold'}}>Giorni di Presenza</TableCell>
                            <TableCell align="center" sx={{fontWeight: 'bold'}}>Giorni di Assenza</TableCell>
                            <TableCell align="right" sx={{fontWeight: 'bold'}}>
                                {reportMode === 'Annuale' ? 'Totale Ore Annuali' : 'Totale Ore Mensili'}
                            </TableCell>
                            <TableCell align="right" sx={{fontWeight: 'bold', color: theme.palette.error.main}}>
                                {reportMode === 'Annuale' ? 'Costo Annuale (€)' : 'Costo Mensile (€)'}
                            </TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {reportData.map((row) => (
                            <TableRow key={row.id} hover sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                                <TableCell component="th" scope="row">{row.nome}</TableCell>
                                <TableCell align="center">{row.presenze}</TableCell>
                                <TableCell align="center">{row.assenze}</TableCell>
                                <TableCell align="right" sx={{ fontWeight: 'bold', fontSize: '1.1em' }}>
                                    {row.oreTotali.toFixed(2)}
                                </TableCell>
                                <TableCell align="right" sx={{ fontWeight: 'bold', fontSize: '1.1em', color: theme.palette.error.main }}>
                                    {row.costoTotale.toFixed(2)}
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        </Paper>
      </Box>

      <RegistroTecnicoDialog open={dialogOpen} onClose={handleDialogClose} onSave={handleDialogSave} onDelete={handleEventDelete} event={selectedEvent} dateInfo={selectedDateInfo} tecnici={tecnici}/>
    </>
  );
}

export default RegistroTecniciPage;
</file>

<file path="src/utils/numberToWords.js">
// File: src/utils/numberToWords.js

const units = ['', 'uno', 'due', 'tre', 'quattro', 'cinque', 'sei', 'sette', 'otto', 'nove'];
const teens = ['dieci', 'undici', 'dodici', 'tredici', 'quattordici', 'quindici', 'sedici', 'diciassette', 'diciotto', 'diciannove'];
const tens = ['', '', 'venti', 'trenta', 'quaranta', 'cinquanta', 'sessanta', 'settanta', 'ottanta', 'novanta'];
const thousands = ['', 'mille', 'milioni', 'miliardi'];

function convertLessThanOneThousand(num) {
  if (num === 0) return '';
  if (num < 10) return units[num];
  if (num < 20) return teens[num - 10];
  if (num < 100) {
    const ten = Math.floor(num / 10);
    const unit = num % 10;
    let word = tens[ten];
    if (unit > 0) {
      if ((unit === 1 || unit === 8) && ten !== 1) {
        word = word.slice(0, -1);
      }
      word += units[unit];
    }
    return word;
  }
  const hundred = Math.floor(num / 100);
  const rest = num % 100;
  let word = (hundred === 1) ? 'cento' : units[hundred] + 'cento';
  if (rest > 0) {
    word += convertLessThanOneThousand(rest);
  }
  return word;
}

export function numberToWords(num) {
  if (num === 0) return 'zero';
  if (num < 0) return 'meno ' + numberToWords(-num);
  
  let word = '';
  let i = 0;
  
  do {
    const n = num % 1000;
    if (n !== 0) {
      const chunk = convertLessThanOneThousand(n);
      const thousandUnit = thousands[i];
      
      if (i === 1 && n === 1) {
        word = 'mille ' + word;
      } else if (i > 0) {
        word = chunk + thousandUnit + ' ' + word;
      } else {
        word = chunk + ' ' + word;
      }
    }
    i++;
    num = Math.floor(num / 1000);
  } while (num > 0);
  
  return word.trim();
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  base: '/gestionale/',   // <--- AGGIUNGI QUESTA RIGA
  plugins: [react()],
})
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.ico" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gestionale | ASD GYM POINT</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="README.md">
### README.md

# 🏋️ asdgympointOS

### Panoramica

**asdgympointOS** è una Single Page Application (SPA) per la gestione completa di un'Associazione Sportiva Dilettantistica (ASD). L'applicazione è progettata per semplificare e digitalizzare le operazioni di segreteria, dall'anagrafica soci alla gestione dei pagamenti e degli orari, fino alla reportistica finanziaria.

### 🎯 Obiettivi Principali

  - **Anagrafica Soci:** Gestione completa di iscritti e staff con dati anagrafici, stato di iscrizione, e documenti.
  - **Gestione Pagamenti:** Registrazione e monitoraggio dei pagamenti mensili e delle quote associative.
  - **Monitoraggio Scadenze:** Notifiche automatiche e filtri rapidi per certificati medici e abbonamenti in scadenza o scaduti.
  - **Dashboard Intuitiva:** Un'interfaccia utente chiara e moderna che fornisce una panoramica immediata delle metriche chiave e delle attività giornaliere.

-----

### 💻 Stack Tecnologico

  - **Frontend:**
      - **React:** La libreria UI principale.
      - **Vite:** Un build tool moderno e veloce.
      - **MUI (Material-UI):** Un sistema di componenti UI robusto e personalizzabile per una grafica coerente.
      - **React Router DOM:** Gestione del routing client-side.
      - **Moment.js:** Libreria per la gestione e la formattazione delle date.
      - **GitHub Actions:** Automazione dei flussi di lavoro (es. test, deploy).
  - **Backend:**
      - **Firebase:** Un'architettura serverless di Google.
      - **Firestore:** Database NoSQL per la memorizzazione dei dati.
      - **Firebase Authentication:** Gestione sicura dell'autenticazione degli utenti.
      - **Firebase Storage:** Archiviazione dei documenti e file caricati dai soci.

-----

### 🚀 Come Iniziare

Segui questi passaggi per avviare il progetto in locale.

**1. Clonare il repository**

```bash
git clone https://github.com/daniarca/gestionale-palestra.git
cd gestionale-palestra
```

**2. Installare le dipendenze**

```bash
npm install
# oppure
yarn install
```

**3. Configurare Firebase**

  - Crea un nuovo progetto su [Firebase Console](https://console.firebase.google.com/).
  - Abilita **Firestore**, **Authentication** e **Storage**.
  - Crea il file di configurazione `src/firebase.js` con le tue credenziali:

<!-- end list -->

```javascript
// src/firebase.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);
```

**4. Avviare l'applicazione**

```bash
npm run dev
# oppure
yarn dev
```

L'applicazione sarà disponibile su `http://localhost:5173`.

-----

### 🧩 Struttura del Progetto

Il progetto segue una struttura standard di React con una chiara separazione dei ruoli per i file e le cartelle:

  - `src/pages/`: Componenti che rappresentano intere pagine (es. `DashboardPage.jsx`).
  - `src/components/`: Componenti riutilizzabili e generici (es. `StatCard.jsx`).
  - `src/context/`: Contesti React per la gestione dello stato globale (`AuthContext.jsx`).
  - `src/services/`: Logica di business e interazione con Firebase (`firebaseService.js`).
  - `src/utils/`: Funzioni di utilità pure e helper (`numberToWords.js`).

-----

### 📝 Contribuire

Sentiti libero di aprire Issues o inviare Pull Request per migliorare il progetto. Ogni contributo è ben accetto\!

### Sviluppatore

**Daniele Arcangeli**
</file>

<file path="src/firebase.js">
// File: src/firebase.js

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { getStorage } from "firebase/storage";

// La configurazione con il nome del bucket corretto
const firebaseConfig = {
  apiKey: "AIzaSyD1HBvHLoEoR1_8ZNMT2ZnPUDIDrWBmQ3I",
  authDomain: "gestionale-palestra-aaa1c.firebaseapp.com",
  projectId: "gestionale-palestra-aaa1c",
  // --- CORREZIONE QUI ---
  // Questo è il nome corretto del bucket che Firebase ha creato
  storageBucket: "gestionale-palestra-aaa1c.firebasestorage.app",
  messagingSenderId: "1026742106024",
  appId: "1:1026742106024:web:83453ad3c675cd72facf9d",
};

// Inizializza Firebase
const app = initializeApp(firebaseConfig);

// Inizializza e esporta i singoli servizi
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);
</file>

<file path="src/pages/CreditsPage.jsx">
// File: src/pages/CreditsPage.jsx (AGGIORNATO)

import React from "react";
import {
  Box,
  Typography,
  Paper,
  Chip,
  List,
  ListItem,
  ListItemText,
  Divider,
  Avatar,
  IconButton, // Importa IconButton
} from "@mui/material";
import { motion } from "framer-motion";
import packageJson from "../../package.json";
import SplitText from "../components/SplitText.jsx";
import TiltedCard from "../components/TiltedCard.jsx";

// Icone per i log e link
import BugReportIcon from '@mui/icons-material/BugReport';
import AutorenewIcon from '@mui/icons-material/Autorenew';
import NewReleasesIcon from '@mui/icons-material/NewReleases';
import CodeIcon from '@mui/icons-material/Code';
import LanguageIcon from '@mui/icons-material/Language'; // Icona per il sito web

const updateLog = [
    {
    version: "0.9.19",
    date: "05/10/2025",
    changes: [
      { type: 'IMPROVEMENT', text: "Ridisegnata completamente la sezione 'Riepilogo Finanziario' della Dashboard per una maggiore chiarezza, separando nettamente i dati Annuali e Mensili in due riquadri distinti (prima riga)." },
      { type: 'IMPROVEMENT', text: "Riorganizzato il layout principale della Dashboard spostando 'Attività Giornaliere', 'Scadenze' e 'Ultimi Pagamenti' sulla stessa riga (3 colonne)." },
    ]
  },
    {
    version: "0.9.18",
    date: "05/10/2025",
    changes: [
      { type: 'NEW', text: "Aggiunta la Paga Oraria per i tecnici e calcolo automatico del costo mensile/annuale nel 'Registro Presenze Tecnici'." },
      { type: 'IMPROVEMENT', text: "Ridisegnata l'interfaccia del riepilogo del Registro Tecnici per garantire un layout stabile (anti-shift) e pulito." },
      { type: 'FIX', text: "Risolto il problema del fastidioso bordo di focus (outline) sui pulsanti e sui ToggleButton in tutta l'applicazione." },
    ]
  },
   {
    version: "0.9.17",
    date: "04/10/2025",
    changes: [
      { type: 'NEW', text: "Aggiunta la funzionalità 'Registro Presenze Tecnici' con un calendario dedicato per tracciare ore, presenze e assenze." },
      { type: 'IMPROVEMENT', text: "Rinnovata la pagina 'Crediti e Aggiornamenti' con un design a timeline, animazioni e una card sviluppatore interattiva." },
      { type: 'FIX', text: "Risolto un bug di routing che impediva l'accesso alla pagina 'Registro Tecnici'." },
    ]
  },
  {
    version: "0.9.16",
    date: "04/10/2025",
    changes: [
      { type: 'FIX', text: "Risolto un bug nella vista a lista della pagina 'Iscritti' dove il click sulla checkbox apriva i dettagli dell'atleta invece di selezionarlo." },
      { type: 'FIX', text: "Corretto un errore critico all'avvio dell'app che impediva il caricamento dei dati (`Cannot access 'allIscrittiSnap'`)." },
      { type: 'FIX', text: "La sezione 'Ultimi Pagamenti' nella Dashboard ora gestisce e filtra correttamente le transazioni con date future." },
      { type: 'IMPROVEMENT', text: "Migliorata l'interfaccia della barra superiore per un design più pulito." },
    ]
  },
  {
    version: "0.9.15",
    date: "03/10/2025",
    changes: [
      { type: "FIX", text: "Corretto un bug che impediva l'aggiornamento in tempo reale dei pagamenti nella Dashboard e nei Report." },
      { type: "FIX", text: "Risolto un problema di visualizzazione nello storico pagamenti che non sommava correttamente gli acconti della quota iscrizione." },
      { type: "IMPROVEMENT", text: "Migliorata la robustezza dei form per garantire che le quote vengano sempre salvate come valori numerici." },
      { type: "NEW", text: "Aggiunta la pagina 'Crediti e Aggiornamenti'." },
    ],
  },
  {
    version: "0.9.12",
    date: "Data Precedente",
    changes: [{ type: "NEW", text: "Versione iniziale del gestionale." }],
  },
];

const ChangeChip = ({ type }) => {
  const config = {
    NEW: { label: "Novità", color: "success", icon: <NewReleasesIcon sx={{ fontSize: '1rem', mr: 0.5 }} /> },
    IMPROVEMENT: { label: "Miglioramento", color: "info", icon: <AutorenewIcon sx={{ fontSize: '1rem', mr: 0.5 }} /> },
    FIX: { label: "Correzione", color: "error", icon: <BugReportIcon sx={{ fontSize: '1rem', mr: 0.5 }} /> },
  };
  const { label, color, icon } = config[type] || { label: type, color: "default", icon: null };
  return <Chip icon={icon} label={label} color={color} size="small" sx={{ mr: 2, fontWeight: "bold" }} />;
};

function CreditsPage() {
  return (
    <Box>
      <SplitText
        text="Crediti e Aggiornamenti"
        className="h4-split"
        delay={20}
        duration={0.5}
      />

      <style>{`.h4-split { font-family: "Poppins", sans-serif; font-size: 2.125rem; font-weight: bold; margin-bottom: 24px; }`}</style>
      
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <TiltedCard>
          <Paper sx={{ p: 3, borderRadius: 4, display: 'flex', alignItems: 'center', gap: 3 }}>
            <Avatar sx={{ width: 64, height: 64, bgcolor: 'primary.main' }}>
              <CodeIcon sx={{ fontSize: 40 }}/>
            </Avatar>
            <Box>
              <Typography variant="h5" gutterBottom sx={{ fontWeight: "bold" }}>Sviluppatore</Typography>
              <Typography variant="h6" color="primary">Daniele Arcangeli</Typography>
              <Typography color="text.secondary">Versione Attuale: {packageJson.version}</Typography>
            </Box>
            {/* --- INIZIO MODIFICA --- */}
            <IconButton href="https://www.arcangeli.one" target="_blank" sx={{ ml: 'auto' }} title="Visita il sito web">
              <LanguageIcon />
            </IconButton>
            {/* --- FINE MODIFICA --- */}
          </Paper>
        </TiltedCard>
      </motion.div>

      <Typography variant="h5" gutterBottom sx={{ fontWeight: "bold", mt: 6, mb: 3 }}>
        Log Aggiornamenti
      </Typography>

      <Box sx={{ position: 'relative' }}>
        <Box sx={{
          position: 'absolute',
          left: '19px',
          top: 0,
          bottom: 0,
          width: '2px',
          bgcolor: 'divider',
          zIndex: 0,
        }} />

        {updateLog.map((log, index) => (
          <motion.div
            key={log.version}
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: index * 0.1 }}
          >
            {/* --- INIZIO MODIFICA --- */}
            <TiltedCard>
            {/* --- FINE MODIFICA --- */}
              <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 3, position: 'relative' }}>
                <Box sx={{ 
                  width: '40px', 
                  height: '40px', 
                  display: 'flex', 
                  alignItems: 'center', 
                  justifyContent: 'center', 
                  flexShrink: 0 
                }}>
                  <Box sx={{
                    width: '12px',
                    height: '12px',
                    borderRadius: '50%',
                    bgcolor: 'primary.main',
                    border: '2px solid',
                    borderColor: 'background.paper',
                    zIndex: 1
                  }} />
                </Box>
                
                <Paper sx={{ p: { xs: 2, md: 3 }, borderRadius: 4, flexGrow: 1, ml: 1 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2, flexWrap: 'wrap', gap: 1 }}>
                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Versione {log.version}</Typography>
                    <Typography variant="body2" color="text.secondary">{log.date}</Typography>
                  </Box>
                  <Divider sx={{ mb: 2 }} />
                  <List dense sx={{ p: 0 }}>
                    {log.changes.map((change, idx) => (
                      <ListItem key={idx} disableGutters sx={{ alignItems: 'flex-start', mb: 1 }}>
                        <Box sx={{ mt: '4px' }}><ChangeChip type={change.type} /></Box>
                        <ListItemText primary={change.text} />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Box>
            {/* --- INIZIO MODIFICA --- */}
            </TiltedCard>
            {/* --- FINE MODIFICA --- */}
          </motion.div>
        ))}
      </Box>
    </Box>
  );
}

export default CreditsPage;
</file>

<file path="src/pages/GruppiPage.jsx">
import React, { useState, useEffect } from "react";
import {
  collection,
  addDoc,
  getDocs,
  query,
  orderBy,
  doc,
  deleteDoc,
  updateDoc,
} from "firebase/firestore";
import { db } from "../firebase.js";
import {
  Typography,
  Box,
  Paper,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Divider,
  Grid,
  Collapse,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import CloseIcon from "@mui/icons-material/Close";
import GestisciMembriDialog from "../components/GestisciMembriDialog.jsx";
import GruppoEditDialog from "../components/GruppoEditDialog.jsx";
import { giorniSettimana, orari } from "../utils/timeSlots.js";

function GruppiPage({ iscrittiList }) {
  const [gruppi, setGruppi] = useState([]);
  const [staff, setStaff] = useState([]);
  const [formOpen, setFormOpen] = useState(false);

  const [nomeGruppo, setNomeGruppo] = useState("");
  const [descrizioneGruppo, setDescrizioneGruppo] = useState("");
  const [staffSelezionato, setStaffSelezionato] = useState("");
  const [giornoSettimana, setGiornoSettimana] = useState("");
  const [oraInizio, setOraInizio] = useState("");
  const [oraFine, setOraFine] = useState("");

  const [membriDialogOpen, setMembriDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [gruppoSelezionato, setGruppoSelezionato] = useState(null);

  const fetchData = async () => {
    try {
      const gruppiQuery = query(collection(db, "gruppi"), orderBy("nome"));
      const staffQuery = query(collection(db, "staff"), orderBy("cognome"));
      const [gruppiSnapshot, staffSnapshot] = await Promise.all([
        getDocs(gruppiQuery),
        getDocs(staffQuery),
      ]);
      setGruppi(
        gruppiSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
      );
      setStaff(
        staffSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
      );
    } catch (error) {
      console.error("Errore caricamento dati: ", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleCreaGruppo = async (e) => {
    e.preventDefault();
    if (!nomeGruppo) return;
    const allenatore = staff.find((s) => s.id === staffSelezionato);
    try {
      await addDoc(collection(db, "gruppi"), {
        nome: nomeGruppo,
        descrizione: descrizioneGruppo,
        membri: [],
        staffId: allenatore?.id || null,
        staffNome: allenatore
          ? `${allenatore.cognome} ${allenatore.nome}`
          : "Nessuno",
        giornoSettimana,
        oraInizio,
        oraFine,
        sede: allenatore?.sede || "N/D",
      });
      setNomeGruppo("");
      setDescrizioneGruppo("");
      setStaffSelezionato("");
      setGiornoSettimana("");
      setOraInizio("");
      setOraFine("");
      setFormOpen(false);
      fetchData();
    } catch (error) {
      console.error("Errore:", error);
    }
  };

  const handleUpdateGruppo = async (updatedGruppo) => {
    const allenatore = staff.find((s) => s.id === updatedGruppo.staffId);
    const datiDaSalvare = {
      ...updatedGruppo,
      staffNome: allenatore
        ? `${allenatore.cognome} ${allenatore.nome}`
        : "Nessuno",
    };
    try {
      const gruppoRef = doc(db, "gruppi", updatedGruppo.id);
      await updateDoc(gruppoRef, datiDaSalvare);
      setEditDialogOpen(false);
      fetchData();
    } catch (error) {
      console.error("Errore:", error);
    }
  };

  const handleEliminaGruppo = async (id) => {
    if (!window.confirm("Sei sicuro?")) return;
    try {
      await deleteDoc(doc(db, "gruppi", id));
      fetchData();
    } catch (error) {
      console.error("Errore:", error);
    }
  };
  const handleOpenMembriDialog = (gruppo) => {
    setGruppoSelezionato(gruppo);
    setMembriDialogOpen(true);
  };
  const handleOpenEditDialog = (gruppo) => {
    setGruppoSelezionato(gruppo);
    setEditDialogOpen(true);
  };
  const handleSalvaMembri = async (gruppoId, nuoviMembriIds) => {
    try {
      const gruppoRef = doc(db, "gruppi", gruppoId);
      await updateDoc(gruppoRef, { membri: nuoviMembriIds });
      setMembriDialogOpen(false);
      fetchData();
    } catch (error) {
      console.error("Errore:", error);
    }
  };

  return (
    <Box>
      <Paper
        elevation={0}
        sx={{
          p: { xs: 2, md: 3 },
          backgroundColor: "background.paper",
          borderRadius: 4,
          mb: 3,
        }}
      >
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Typography variant="h4" sx={{ fontWeight: "bold" }}>
            Gestione Gruppi
          </Typography>
          <Button
            variant="contained"
            startIcon={formOpen ? <CloseIcon /> : <AddCircleOutlineIcon />}
            onClick={() => setFormOpen(!formOpen)}
            sx={{ height: "40px" }}
          >
            {formOpen ? "Chiudi Form" : "Crea Gruppo"}
          </Button>
        </Box>
        <Collapse in={formOpen}>
          <Box component="form" onSubmit={handleCreaGruppo} sx={{ mt: 3 }}>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  size="small"
                  fullWidth
                  variant="outlined"
                  label="Nome Gruppo"
                  value={nomeGruppo}
                  onChange={(e) => setNomeGruppo(e.target.value)}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth size="small" variant="outlined">
                  <InputLabel shrink={true}>Allenatore</InputLabel>
                  <Select
                    label="Allenatore"
                    value={staffSelezionato}
                    onChange={(e) => setStaffSelezionato(e.target.value)}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Seleziona Allenatore
                    </MenuItem>
                    {staff.map((s) => (
                      <MenuItem key={s.id} value={s.id}>
                        {s.cognome} {s.nome}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={4}>
                <FormControl fullWidth size="small" variant="outlined">
                  <InputLabel shrink={true}>Giorno</InputLabel>
                  <Select
                    label="Giorno"
                    value={giornoSettimana}
                    onChange={(e) => setGiornoSettimana(e.target.value)}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Seleziona Giorno
                    </MenuItem>
                    {giorniSettimana.map((g) => (
                      <MenuItem key={g.value} value={g.value}>
                        {g.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={3}>
                <FormControl fullWidth size="small" variant="outlined">
                  <InputLabel shrink={true}>Inizio</InputLabel>
                  <Select
                    label="Inizio"
                    value={oraInizio}
                    onChange={(e) => setOraInizio(e.target.value)}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Orario Inizio
                    </MenuItem>
                    {orari.map((o) => (
                      <MenuItem key={o} value={o}>
                        {o}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={3}>
                <FormControl fullWidth size="small" variant="outlined">
                  <InputLabel shrink={true}>Fine</InputLabel>
                  <Select
                    label="Fine"
                    value={oraFine}
                    onChange={(e) => setOraFine(e.target.value)}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Orario Fine
                    </MenuItem>
                    {orari.map((o) => (
                      <MenuItem key={o} value={o}>
                        {o}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid
                item
                xs={12}
                sm={2}
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "flex-end",
                }}
              >
                <Button type="submit" variant="contained">
                  Salva
                </Button>
              </Grid>
            </Grid>
          </Box>
        </Collapse>
      </Paper>
      <Paper sx={{ p: 2, borderRadius: 4 }}>
        <Typography variant="h6" gutterBottom>
          Elenco Gruppi ({gruppi.length})
        </Typography>
        <List>
          {gruppi.map((gruppo, index) => (
            <React.Fragment key={gruppo.id}>
              <ListItem
                secondaryAction={
                  <>
                    <IconButton onClick={() => handleOpenEditDialog(gruppo)}>
                      <EditIcon fontSize="small" />
                    </IconButton>
                    <Button
                      size="small"
                      onClick={() => handleOpenMembriDialog(gruppo)}
                    >
                      Membri
                    </Button>
                    <IconButton onClick={() => handleEliminaGruppo(gruppo.id)}>
                      <DeleteIcon color="error" />
                    </IconButton>
                  </>
                }
              >
                <ListItemText
                  primary={gruppo.nome}
                  secondary={`Allenatore: ${gruppo.staffNome} | Orario: ${
                    giorniSettimana.find(
                      (g) => g.value === gruppo.giornoSettimana
                    )?.label || ""
                  } ${gruppo.oraInizio || ""}-${gruppo.oraFine || ""} | ${
                    gruppo.membri?.length || 0
                  } membri`}
                />
              </ListItem>
              {index < gruppi.length - 1 && <Divider />}
            </React.Fragment>
          ))}
        </List>
      </Paper>
      <GestisciMembriDialog
        open={membriDialogOpen}
        onClose={() => setMembriDialogOpen(false)}
        onSave={handleSalvaMembri}
        gruppo={gruppoSelezionato}
        iscritti={iscrittiList}
      />
      <GruppoEditDialog
        open={editDialogOpen}
        onClose={() => setEditDialogOpen(false)}
        onSave={handleUpdateGruppo}
        gruppo={gruppoSelezionato}
        staff={staff}
      />
    </Box>
  );
}
export default GruppiPage;
</file>

<file path="src/utils/exportToExcel.js">
// File: src/utils/exportToExcel.js

import * as XLSX from 'xlsx';

/**
 * Esporta un array di oggetti in un file Excel (.xlsx).
 * @param {Array<Object>} data L'array di oggetti da esportare.
 * @param {string} fileName Il nome del file di output.
 * @param {boolean} [skipFormatting=false] Se true, salta la formattazione standard per la lista atleti. 
 * Usare true per report personalizzati (come la matrice bonifico).
 */
export const exportToExcel = (data, fileName, skipFormatting = false) => {
  if (!data || data.length === 0) {
    console.warn("Nessun dato da esportare.");
    // Non eseguiamo l'esportazione se i dati sono vuoti
    return;
  }
    
  let formattedData = data;
  
  if (!skipFormatting) {
      // 1. Logica di formattazione per la lista standard (es. Export Lista Gara)
      formattedData = data.map(iscritto => ({
          'NOME': iscritto.nome || '',
          'COGNOME': iscritto.cognome || '',
          'CODICE FISCALE': iscritto.codiceFiscale || '',
          'DATA DI NASCITA': iscritto.dataNascita || '',
          'LIVELLO': iscritto.livello || 'N/D', 
          'CATEGORIA': iscritto.categoria || 'N/D', 
      }));
  }

  // 2. Creiamo il foglio di lavoro
  const worksheet = XLSX.utils.json_to_sheet(formattedData);
  
  // Impostiamo l'auto-larghezza per le colonne in base alle chiavi
  const keys = formattedData.length > 0 ? Object.keys(formattedData[0]) : [];
  const wscols = keys.map(key => ({
      // Larghezza minima 15 o la lunghezza dell'intestazione, massimo 30
      wch: Math.min(30, Math.max(15, key.length + 2)) 
  }));
  worksheet['!cols'] = wscols;

  // 3. Creiamo il libro e aggiungiamo il foglio
  const workbook = XLSX.utils.book_new();
  const sheetName = fileName.startsWith('Report') ? 'Report' : 'Lista Atleti'; 
  XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);

  // 4. Forziamo il download
  XLSX.writeFile(workbook, `${fileName}.xlsx`);
};
</file>

<file path="src/utils/generateReceipt.js">
import { numberToWords } from './numberToWords.js';

function formatDate(dateString) {
  if (!dateString) return 'N/D';
  return new Date(dateString).toLocaleDateString('it-IT');
}

export function generateReceipt(iscritto, pagamenti, logoImage, firmaImage) {
  if (!iscritto) {
    console.error("Dati dell'iscritto non disponibili per la stampa.");
    return;
  }

  const oggi = new Date();
  const annoCorrente = oggi.getFullYear();
  const meseCorrente = oggi.getMonth();
  const annoInizioCorrente = meseCorrente < 8 ? annoCorrente - 1 : annoCorrente;
  
  const inizioAnnoSportivo = new Date(annoInizioCorrente, 8, 1);
  const fineAnnoSportivo = new Date(annoInizioCorrente + 1, 5, 30);

  const pagamentiAnno = pagamenti.filter(p => {
    const dataPagamento = new Date(p.dataPagamento);
    return dataPagamento >= inizioAnnoSportivo && dataPagamento <= fineAnnoSportivo;
  });

  const totalePagato = pagamentiAnno.reduce((sum, p) => sum + p.cifra, 0);

  const [integerPart, decimalPart] = totalePagato.toFixed(2).split('.');
  const importoInLettere = `${numberToWords(parseInt(integerPart, 10))}/${decimalPart}`;

  const isMinorenne = iscritto.nomeGenitore && iscritto.nomeGenitore.trim() !== '';
  const nomeVersante = isMinorenne ? iscritto.nomeGenitore : `${iscritto.nome} ${iscritto.cognome}`;
  const cfVersante = isMinorenne ? iscritto.cfGenitore : iscritto.codiceFiscale;
  
  const beneficiarioText = isMinorenne 
    ? `<div>Per conto del/della socio/a:</div>` 
    : '';

  const printContent = `
    <html>
      <head>
        <title>Certificazione ${iscritto.cognome}</title>
        <style>
          body { font-family: 'Times New Roman', serif; margin: 30px 50px; font-size: 12pt; }
          .header { text-align: center; margin-bottom: 20px; }
          .header h3, .header p { margin: 0; }
          .header img.logo { max-width: 150px; height: auto; margin-bottom: 10px; }
          .receipt-title { font-size: 14pt; font-weight: bold; margin: 20px 0; border-bottom: 2px solid #000; padding-bottom: 5px; }
          .info-block { margin-top: 20px; }
          .info-block div { margin-bottom: 10px; line-height: 1.5; }
          .line { display: inline-block; border-bottom: 1px dashed #000; padding: 0 5px; font-weight: bold; }
          .signature-area { margin-top: 50px; text-align: center; }
          .signature-area img { max-width: 200px; height: auto; display: block; margin: 10px auto; }
          .center-text { text-align: center; }
          .footer { margin-top: 50px; text-align: right; }
        </style>
      </head>
      <body>
        <div class="header">
          <img src="${logoImage}" alt="A.S.D. GYM POINT Logo" class="logo" />
          <h3>A.S.D. GYM POINT</h3>
          <p>VIA DEL CAMPO SPORTIVO ROCCA PRIORA 00079 (RM)</p>
          <p>VIA MASSIMO D'AZEGLIO n.12 FRASCATI (RM)</p>
          <p>C.F. 92022510587</p>
        </div>
        <div class="center-text receipt-title">RICEVUTA DI PAGAMENTO SOCIO (anno) ${annoCorrente}</div>
        <div class="info-block">
          <div>Si certifica che Il/la Signor/a: <span class="line">${nomeVersante}</span></div>
          <div>Codice Fiscale: <span class="line">${cfVersante}</span></div>
        </div>
        <div class="center-text receipt-title">HA VERSATO</div>
        <div class="info-block">
          <div>La quota associativa di: €${totalePagato.toFixed(2)} (<span class="line">${importoInLettere}</span>)</div>
          <div>Per l'anno/stagione <span class="line">${annoInizioCorrente}/${annoInizioCorrente + 1}</span></div>
          <div>A titolo di ISCRIZIONE AD ATTIVITÀ SPORTIVA DILETTANTISTICA per la partecipazione al corso di Ginnastica Artistica.</div>
        </div>
        
        <div class="info-block">
          ${beneficiarioText}
          <div>Dati del socio iscritto: <span class="line">${iscritto.nome} ${iscritto.cognome}</span></div>
          <div>nato/a a <span class="line">${iscritto.luogoNascita || 'N/D'}</span> il <span class="line">${formatDate(iscritto.dataNascita)}</span></div>
          <div>residente a <span class="line">${iscritto.residenza || 'N/D'}</span>, in <span class="line">${iscritto.via || 'N/D'}</span> N°. <span class="line">${iscritto.numeroCivico || 'N/D'}</span></div>
        </div>
        <div class="footer">
          <p>${iscritto.sede || 'N/D'}, lì ${oggi.toLocaleDateString('it-IT')}</p>
        </div>
        <div class="signature-area">
          <img src="${firmaImage}" alt="Firma" />
        </div>
      </body>
    </html>
  `;

  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert("Impossibile aprire la finestra di stampa. Controlla le impostazioni del tuo browser per i pop-up.");
    return;
  }

  printWindow.document.write(printContent);
  printWindow.document.close();
  printWindow.focus();
  setTimeout(() => {
    printWindow.print();
    printWindow.onafterprint = () => printWindow.close();
  }, 500);
}
</file>

<file path="src/App.css">
/* File: src/App.css */

body {
  /* Rimosso background-color e color hardcoded, ora gestiti da MUI CssBaseline */
  font-family: sans-serif;
}

.App {
  text-align: center;
  padding: 2rem;
}

h1 {
  font-size: 2.5rem;
  margin-bottom: 2rem;
}

.iscritto-form {
  /* Rimosso background-color: #3c424f; */
  padding: 2rem;
  border-radius: 8px;
  max-width: 600px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 1.5rem; /* Spazio tra le righe */
}

.iscritto-form h2 {
  margin-top: 0;
}

.form-row {
  display: flex;
  gap: 1rem; /* Spazio tra gli input sulla stessa riga */
}

.form-row > input[type="text"] {
  width: 100%;
}

input[type="text"], input[type="date"] {
  /* Rimosso background-color: #282c34; e color: white; */
  padding: 0.8rem;
  border-radius: 4px;
  border: 1px solid #555;
  font-size: 1rem;
}

.checkbox-row label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.form-row label {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    gap: 0.5rem;
}


/* RIMOSSA STILIZZAZIONE HARDCODED DI button[type="submit"] per usare MUI */
/* RIMOSSA STILIZZAZIONE HARDCODED DI button[type="submit"]:hover */
</file>

<file path="src/components/StoricoPagamenti.jsx">
// File: src/components/StoricoPagamenti.jsx

import React, { useState, useMemo } from "react";
import {
  Typography,
  Grid,
  Box,
  Tooltip,
  FormControl,
  Select,
  MenuItem,
} from "@mui/material";

const annoSportivoMesi = [
  { nome: "Set", index: 8 },
  { nome: "Ott", index: 9 },
  { nome: "Nov", index: 10 },
  { nome: "Dic", index: 11 },
  { nome: "Gen", index: 0 },
  { nome: "Feb", index: 1 },
  { nome: "Mar", index: 2 },
  { nome: "Apr", index: 3 },
  { nome: "Mag", index: 4 },
  { nome: "Giu", index: 5 },
];

const generaAnniSportivi = () => {
  const annoCorrente = new Date().getFullYear();
  const meseCorrente = new Date().getMonth();
  const annoInizioCorrente = meseCorrente < 8 ? annoCorrente - 1 : annoCorrente;

  return [
    `${annoInizioCorrente - 1}/${annoInizioCorrente}`,
    `${annoInizioCorrente}/${annoInizioCorrente + 1}`,
    `${annoInizioCorrente + 1}/${annoInizioCorrente + 2}`,
  ];
};

function StoricoPagamenti({
  pagamenti = [],
  quotaMensile = 60,
  quotaIscrizione = 0,
}) {
  const anniDisponibili = generaAnniSportivi();
  const [annoSelezionato, setAnnoSelezionato] = useState(anniDisponibili[1]);

  const datiAnnoSelezionato = useMemo(() => {
    const [startYear] = annoSelezionato.split("/");
    const inizioAnnoSportivo = new Date(parseInt(startYear), 8, 1);
    const fineAnnoSportivo = new Date(parseInt(startYear) + 1, 6, 0);

    const pagamentiFiltrati = pagamenti.filter((p) => {
      if (!p.dataPagamento) return false;
      const dataPagamento = new Date(p.dataPagamento);
      return (
        dataPagamento >= inizioAnnoSportivo && dataPagamento <= fineAnnoSportivo
      );
    });

    const pagamentiPerMese = {};
    pagamentiFiltrati.forEach((p) => {
      if (
        typeof p.tipo === "string" &&
        p.tipo.toLowerCase().includes("mensile")
      ) {
        const mese = p.meseRiferimento;
        if (mese != null) {
          pagamentiPerMese[mese] = (pagamentiPerMese[mese] || 0) + p.cifra;
        }
      }
    });

    return { pagamentiPerMese };
  }, [pagamenti, annoSelezionato]);

  const getMeseStatus = (meseIndex) => {
    const totalePagato = datiAnnoSelezionato.pagamentiPerMese[meseIndex] || 0;
    const qm = Number(quotaMensile) || 60;
    if (qm > 0 && totalePagato >= qm)
      return {
        color: "success.main",
        label: `Pagato: ${totalePagato.toFixed(2)}€`,
      };
    if (totalePagato > 0)
      return {
        color: "warning.main",
        label: `Acconto: ${totalePagato.toFixed(2)}€`,
      };
    return { color: "rgba(255, 255, 255, 0.05)", label: "Non pagato" };
  };

  const totalSubscriptionPaid = Number(quotaIscrizione) || 0;

  return (
    <Box sx={{ mt: 2 }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <Typography variant="h6" gutterBottom>
          Stato Pagamenti
        </Typography>
        <FormControl size="small">
          <Select
            value={annoSelezionato}
            onChange={(e) => setAnnoSelezionato(e.target.value)}
          >
            {anniDisponibili.map((anno) => (
              <MenuItem key={anno} value={anno}>
                {anno}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Box>
      <Grid container spacing={1} sx={{ mt: 1 }}>
        <Grid item xs={2.4}>
          <Tooltip
            title={
              totalSubscriptionPaid > 0
                ? `Totale Iscrizione Pagata: ${totalSubscriptionPaid.toFixed(
                    2
                  )}€`
                : "Iscrizione non pagata"
            }
          >
            <Box
              sx={{
                p: 1.5,
                textAlign: "center",
                borderRadius: 2,
                backgroundColor:
                  totalSubscriptionPaid > 0
                    ? "info.main"
                    : "rgba(255, 255, 255, 0.05)",
                border: "1px solid",
                borderColor: "divider",
              }}
            >
              <Typography
                variant="body2"
                sx={{
                  fontWeight: "bold",
                  color: totalSubscriptionPaid > 0 ? "#1E1E2E" : "text.primary",
                }}
              >
                ISC
              </Typography>
            </Box>
          </Tooltip>
        </Grid>
        {annoSportivoMesi.map((mese) => {
          const status = getMeseStatus(mese.index);
          return (
            <Grid item xs={2.4} key={mese.nome}>
              <Tooltip title={status.label} placement="top">
                <Box
                  sx={{
                    p: 1.5,
                    textAlign: "center",
                    borderRadius: 2,
                    backgroundColor: status.color,
                    border: "1px solid",
                    borderColor: "divider",
                  }}
                >
                  <Typography
                    variant="body2"
                    sx={{
                      fontWeight: "bold",
                      color:
                        status.color === "success.main" ||
                        status.color === "warning.main"
                          ? "#1E1E2E"
                          : "text.primary",
                    }}
                  >
                    {mese.nome}
                  </Typography>
                </Box>
              </Tooltip>
            </Grid>
          );
        })}
      </Grid>
    </Box>
  );
}

export default StoricoPagamenti;
</file>

<file path="src/pages/DocumentazionePage.jsx">
// File: src/pages/DocumentazionePage.jsx (Aggiornato)

import React from "react";
import {
  Box,
  Typography,
  Paper,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const guide = [
  {
    title: "Come aggiungere un nuovo socio?",
    content:
      "Dalla barra laterale, vai alla pagina 'Iscritti'. Clicca sul pulsante 'Aggiungi Socio' in alto a destra per aprire il modulo di iscrizione. Compila i campi richiesti, inclusi i nuovi dati come i 'Codici Tesseramento', e clicca su 'Salva Iscrizione'. Il nuovo socio apparirà immediatamente nella lista.",
  },
  {
    title: "Come gestire i pagamenti di un socio?",
    content:
      "Dalla pagina 'Iscritti', clicca sulla scheda del socio desiderato per accedere alla sua pagina di dettaglio. Seleziona il tab 'Pagamenti' e clicca su 'Aggiungi Pagamento'. Nel pop-up, potrai specificare l'importo, il tipo di pagamento (Quota Mensile o Quota Iscrizione) e il metodo (Contanti o Bonifico). Il sistema calcolerà automaticamente la nuova scadenza dell'abbonamento o sommerà l'importo alla quota di iscrizione totale.",
  },
  {
    title: "Come funzionano le notifiche e i filtri rapidi?",
    content:
      "L'icona a forma di campanella in alto a destra mostra il numero totale di scadenze critiche. Cliccandola, vedrai un elenco di avvisi (es. 'Abbonamenti Scaduti', 'Certificati in Scadenza'). Selezionando un avviso, verrai reindirizzato alla pagina 'Iscritti' con la lista già filtrata per mostrarti solo i soci pertinenti a quella notifica.",
  },
  {
    title: "Come si gestiscono i Tecnici?",
    content:
      "Vai alla sezione 'Tecnici' dal menu. Qui puoi aggiungere un nuovo tecnico con tutti i suoi dati anagrafici e di contatto. Cliccando su un tecnico esistente, puoi accedere alla sua scheda personale per modificare i dati o caricare documenti specifici (es. contratto, certificazioni).",
  },
  {
    title: "Come funzionano i Gruppi e l'Orario?",
    content:
      "Nella pagina 'Gruppi' puoi creare un nuovo corso, assegnando un nome, un allenatore e un orario settimanale. Una volta creato, clicca su 'Membri' per aggiungere gli atleti al gruppo. L'orario creato sarà visibile automaticamente nella pagina 'Orario', che offre una visione d'insieme di tutte le lezioni della settimana.",
  },
  {
    title: "Come si utilizza il Report Finanziario?",
    content:
      "La pagina 'Report Finanziario' offre una panoramica completa degli incassi. Puoi filtrare i dati per anno sportivo. La sezione 'Panoramica' mostra grafici sugli incassi mensili e sulla divisione per tipo di pagamento. La sezione 'Elenco Transazioni' ti permette di vedere, cercare ed esportare in Excel tutte le transazioni di un anno. Il pulsante 'Export Bonifico (Matrice)' genera un file Excel specifico che riporta solo i pagamenti effettuati tramite bonifico, utile per la contabilità.",
  },
  {
    title: "Come si archiviano e si eliminano i soci?",
    content:
      "Per rimuovere un socio dalla lista attiva senza eliminarlo, apri la sua scheda e clicca su 'Archivia'. L'iscritto verrà spostato nella sezione 'Archivio', da cui potrà essere ripristinato in qualsiasi momento. Il pulsante 'Elimina', invece, rimuove permanentemente e in modo irreversibile tutti i dati del socio dal database.",
  },
];

function DocumentazionePage() {
  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: "bold" }}>
        Guida all'Uso del Gestionale
      </Typography>
      <Paper sx={{ p: 2, borderRadius: 4 }}>
        {guide.map((item, index) => (
          <Accordion key={index} defaultExpanded={index === 0}>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography variant="h6">{item.title}</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography color="text.secondary">{item.content}</Typography>
            </AccordionDetails>
          </Accordion>
        ))}
      </Paper>
    </Box>
  );
}

export default DocumentazionePage;
</file>

<file path="src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  /* RIGA RIMOSSA: background-color: #242424; */

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: inherit;
  text-decoration: inherit;
}
a:hover {
  color: inherit;
}

body {
  margin: 0;
  /* Rimosso qualsiasi background-color residuo nel body */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #ffffff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #ffffff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/pages/SchedaTecnicoPage.jsx">
// File: src/pages/SchedaTecnicoPage.jsx (AGGIORNATO)

import React, { useState, useEffect } from "react";
import { useParams, Link as RouterLink, useNavigate } from "react-router-dom";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../firebase.js";
import { useNotification } from "../context/NotificationContext.jsx";
import {
  Box,
  Typography,
  Paper,
  CircularProgress,
  Button,
  Grid,
  Divider,
  Stack,
  Tabs,
  Tab,
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import EditIcon from "@mui/icons-material/Edit";
import DeleteForeverIcon from "@mui/icons-material/DeleteForever";
import TecnicoEditDialog from "../components/TecnicoEditDialog.jsx";
import FileUpload from "../components/FileUpload.jsx";
import DocumentList from "../components/DocumentList.jsx";
import {
  updateTecnico,
  deleteTecnico,
  uploadTecnicoFile,
  fetchTecnicoDocuments,
  deleteTecnicoFile,
} from "../services/firebaseService.js";
import moment from "moment";
import "moment/locale/it";

moment.locale("it");

function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div role="tabpanel" hidden={value !== index} {...other}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function SchedaTecnicoPage() {
  const { tecnicoId } = useParams();
  const navigate = useNavigate();
  const { showNotification } = useNotification();

  const [tecnico, setTecnico] = useState(null);
  const [documenti, setDocumenti] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [isEditDialogOpen, setEditDialogOpen] = useState(false);
  const [tabValue, setTabValue] = useState(0);

  // FUNZIONE DI FETCH CORRETTA PER IL TECNICO
  const fetchTecnico = async () => {
    setLoading(true);
    try {
      const docRef = doc(db, "staff", tecnicoId);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        setTecnico({ id: docSnap.id, ...docSnap.data() });

        // Qui carichiamo SOLO i documenti del tecnico
        const docs = await fetchTecnicoDocuments(tecnicoId);
        setDocumenti(docs);
      } else {
        showNotification("Tecnico non trovato.", "error");
        navigate("/tecnici");
      }
    } catch (error) {
      console.error(
        "Errore dettagliato nel caricamento dati del tecnico:",
        error
      );
      // Mostra un messaggio più generico se fallisce l'intera fetch
      showNotification("Errore nel caricamento dei dati.", "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (tecnicoId) {
      fetchTecnico();
    }
  }, [tecnicoId]);

  const handleUpdateTecnico = async (data) => {
    try {
      await updateTecnico(data);
      showNotification("Dati aggiornati.", "success");
      setEditDialogOpen(false);
      fetchTecnico();
    } catch {
      showNotification("Errore durante l'aggiornamento.", "error");
    }
  };

  const handleDeleteTecnico = async () => {
    if (!window.confirm("ATTENZIONE: L'azione è irreversibile. Continuare?"))
      return;
    try {
      await deleteTecnico(tecnicoId);
      showNotification("Tecnico eliminato.", "warning");
      navigate("/tecnici");
    } catch {
      showNotification("Errore durante l'eliminazione.", "error");
    }
  };

  const handleFileUpload = async (file) => {
    setUploading(true);
    try {
      await uploadTecnicoFile(file, tecnicoId);
      showNotification("File caricato!", "success");
      fetchTecnico();
    } catch {
      showNotification("Errore durante il caricamento.", "error");
    } finally {
      setUploading(false);
    }
  };

  const handleFileDelete = async (docId, filePath) => {
    if (!window.confirm("Eliminare questo documento?")) return;
    try {
      await deleteTecnicoFile(docId, filePath);
      showNotification("Documento eliminato.", "success");
      fetchTecnico();
    } catch {
      showNotification("Errore durante l'eliminazione.", "error");
    }
  };

  if (loading)
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 5 }}>
        <CircularProgress />
      </Box>
    );
  // Se la fetch fallisce ma non è in loading, mostriamo il messaggio di fallback
  if (!tecnico)
    return <Typography>Dettagli tecnico non disponibili.</Typography>;

  return (
    <>
      <Button
        component={RouterLink}
        to="/tecnici"
        startIcon={<ArrowBackIcon />}
        sx={{ mb: 2 }}
      >
        Torna alla Lista Tecnici
      </Button>
      <Paper sx={{ p: { xs: 2, md: 4 }, borderRadius: 4 }}>
        <Box
          sx={{
            mb: 2,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "flex-start",
            flexWrap: "wrap",
            gap: 2,
          }}
        >
          <Box>
            <Typography variant="h4" sx={{ fontWeight: "bold" }}>
              {tecnico.nome || "Nome Mancante"}{" "}
              {tecnico.cognome || "Cognome Mancante"}
            </Typography>
            <Typography color="text.secondary" variant="h6">
              {tecnico.ruolo || "Ruolo N/D"}
            </Typography>
          </Box>
          <Stack direction="row" spacing={1}>
            <Button
              variant="contained"
              startIcon={<EditIcon />}
              onClick={() => setEditDialogOpen(true)}
            >
              Modifica
            </Button>
            <Button
              variant="outlined"
              color="error"
              startIcon={<DeleteForeverIcon />}
              onClick={handleDeleteTecnico}
            >
              Elimina
            </Button>
          </Stack>
        </Box>

        <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
          <Tabs
            value={tabValue}
            onChange={(e, newValue) => setTabValue(newValue)}
          >
            <Tab label="Anagrafica" />
            <Tab label="Contatti" />
            <Tab label="Documenti" />
          </Tabs>
        </Box>

        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Nato/a il:</strong>{" "}
                {tecnico.dataNascita
                  ? moment(tecnico.dataNascita).format("DD/MM/YYYY")
                  : "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>A:</strong> {tecnico.luogoNascita || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Codice Fiscale:</strong>{" "}
                {tecnico.codiceFiscale || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Numero Tessera:</strong>{" "}
                {tecnico.numeroTessera || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Documento d'Identità:</strong>{" "}
                {tecnico.numeroDocumento || "N/D"}
              </Typography>
            </Grid>
            {/* NUOVO CAMPO: Paga Oraria */}
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Paga Oraria:</strong>{" "}
                {tecnico.pagaOraria !== undefined
                  ? `${parseFloat(tecnico.pagaOraria).toFixed(2)}€`
                  : "N/D"}
              </Typography>
            </Grid>
          </Grid>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Cellulare:</strong> {tecnico.cellulare || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography>
                <strong>Email:</strong> {tecnico.email || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12}>
              <Typography>
                <strong>Residenza:</strong>{" "}
                {/* Residenza e indirizzo più robusti */}
                {`${tecnico.via || "N/D"}${
                  tecnico.via && tecnico.numeroCivico
                    ? `, ${tecnico.numeroCivico}`
                    : ""
                }, ${tecnico.cap || "N/D"} ${tecnico.residenza || "N/D"} (${
                  tecnico.provincia || "N/D"
                })`}
              </Typography>
            </Grid>
          </Grid>
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          <FileUpload onUpload={handleFileUpload} isLoading={uploading} />
          <Divider sx={{ my: 3 }} />
          <Typography variant="h6" gutterBottom>
            Documenti Caricati
          </Typography>
          <DocumentList documents={documenti} onDelete={handleFileDelete} />
        </TabPanel>
      </Paper>

      {isEditDialogOpen && (
        <TecnicoEditDialog
          open={isEditDialogOpen}
          onClose={() => setEditDialogOpen(false)}
          onSave={handleUpdateTecnico}
          tecnico={tecnico}
        />
      )}
    </>
  );
}

export default SchedaTecnicoPage;
</file>

<file path="src/pages/OrarioPage.jsx">
// File: src/pages/OrarioPage.jsx

import React, { useState, useEffect, useMemo } from "react";
import { collection, getDocs, query } from "firebase/firestore";
import { db } from "../firebase.js";
import { Link as RouterLink } from "react-router-dom";
import { Typography, Box, Paper, useTheme } from "@mui/material";

const giorniSettimana = [
  { label: "Lunedì", value: 1 },
  { label: "Martedì", value: 2 },
  { label: "Mercoledì", value: 3 },
  { label: "Giovedì", value: 4 },
  { label: "Venerdì", value: 5 },
  { label: "Sabato", value: 6 },
];

function OrarioPage() {
  const [gruppi, setGruppi] = useState([]);
  const theme = useTheme();

  const colorPalette = useMemo(
    () => ({
      frascati: theme.palette.primary.main,
      roccaPriora: theme.palette.secondary.main,
    }),
    [theme]
  );

  useEffect(() => {
    const fetchGruppi = async () => {
      const q = query(collection(db, "gruppi"));
      const querySnapshot = await getDocs(q);
      setGruppi(
        querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
      );
    };
    fetchGruppi();
  }, []);

  const eventiPerGiorno = useMemo(() => {
    const eventi = {};
    giorniSettimana.forEach((g) => (eventi[g.value] = []));
    gruppi.forEach((g) => {
      if (
        g.giornoSettimana != null &&
        g.oraInizio &&
        eventi[g.giornoSettimana]
      ) {
        eventi[g.giornoSettimana].push(g);
      }
    });
    for (const giorno in eventi) {
      eventi[giorno].sort((a, b) => (a.oraInizio > b.oraInizio ? 1 : -1));
    }
    return eventi;
  }, [gruppi]);

  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: "bold" }}>
        Orario Settimanale
      </Typography>

      {/* Container principale che usa CSS Grid per un layout flessibile e responsivo */}
      <Box
        sx={{
          display: "grid",
          // Questa riga è la chiave:
          // 'auto-fit' cerca di inserire più colonne possibili.
          // 'minmax(250px, 1fr)' dice a ogni colonna:
          // - Sii larga ALMENO 250px.
          // - Se c'è più spazio, espanditi per riempirlo (1fr).
          gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
          gap: 2, // Spazio tra le colonne
        }}
      >
        {giorniSettimana.map((giorno) => (
          <Paper
            key={giorno.value}
            sx={{
              p: 2,
              borderRadius: 4,
              backgroundColor: "background.default",
              display: "flex",
              flexDirection: "column",
            }}
          >
            <Typography
              variant="h6"
              align="center"
              sx={{ mb: 2, fontWeight: "bold" }}
            >
              {giorno.label}
            </Typography>

            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                gap: theme.spacing(1.5),
              }}
            >
              {eventiPerGiorno[giorno.value].map((gruppo) => {
                const sedeKey =
                  gruppo.sede === "Frascati" ? "frascati" : "roccaPriora";
                const backgroundColor =
                  colorPalette[sedeKey] || theme.palette.primary.main;

                return (
                  <Paper
                    key={gruppo.id}
                    component={RouterLink}
                    to={`/iscritti?gruppoId=${gruppo.id}`}
                    elevation={3}
                    sx={{
                      p: 2,
                      borderRadius: 2,
                      backgroundColor: backgroundColor,
                      color: theme.palette.getContrastText(backgroundColor),
                      textDecoration: "none",
                      transition: "transform 0.2s, box-shadow 0.2s",
                      "&:hover": {
                        transform: "translateY(-3px)",
                        boxShadow: theme.shadows[6],
                        cursor: "pointer",
                      },
                    }}
                  >
                    <Typography
                      sx={{ fontWeight: "bold", overflowWrap: "break-word" }}
                    >
                      {gruppo.nome}
                    </Typography>
                    <Typography variant="body2">
                      {gruppo.oraInizio} - {gruppo.oraFine}
                    </Typography>
                    <Typography variant="caption">
                      {gruppo.staffNome}
                    </Typography>
                  </Paper>
                );
              })}
              {eventiPerGiorno[giorno.value].length === 0 && (
                <Typography
                  variant="body2"
                  color="text.secondary"
                  align="center"
                  sx={{ pt: 2 }}
                >
                  Nessun corso
                </Typography>
              )}
            </Box>
          </Paper>
        ))}
      </Box>
    </Box>
  );
}

export default OrarioPage;
</file>

<file path="src/pages/ReportPage.jsx">
// File: src/pages/ReportPage.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { collection, getDocs, query, orderBy } from "firebase/firestore";
import { db } from '../firebase.js';
import {
    Typography, Grid, Box, CircularProgress, Paper, Table, TableBody, TableCell,
    TableContainer, TableHead, TableRow, useTheme, FormControl, Select, MenuItem,
    InputLabel, TextField, InputAdornment, Tabs, Tab, Button, TablePagination
} from '@mui/material';
import SearchIcon from "@mui/icons-material/Search";
import DownloadIcon from '@mui/icons-material/Download';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import StatCard from '../components/StatCard.jsx';
import PaidIcon from '@mui/icons-material/Paid';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import ReceiptIcon from '@mui/icons-material/Receipt';
import moment from 'moment';
import { exportToExcel } from '../utils/exportToExcel.js';
import { useNotification } from '../context/NotificationContext.jsx'; // Importa useNotification

// Mesi in Italiano abbreviati per le colonne del report
const MESI = ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"];
// Colori per il Pie Chart (rilevanti dal tema)
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];


const generaAnniSportivi = (numAnni = 3) => {
    const annoCorrente = new Date().getFullYear();
    const meseCorrente = new Date().getMonth();
    const annoInizioCorrente = meseCorrente < 8 ? annoCorrente - 1 : annoCorrente;
    
    const anni = [];
    for (let i = 0; i < numAnni; i++) {
        const annoInizio = annoInizioCorrente - i;
        anni.push(`${annoInizio}/${annoInizio + 1}`);
    }
    return anni.reverse(); // Returns sorted from old to new
};

function TabPanel(props) {
    const { children, value, index, ...other } = props;
    return (
        <div role="tabpanel" hidden={value !== index} id={`report-tabpanel-${index}`} aria-labelledby={`report-tab-${index}`} {...other}>
            {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}
        </div>
    );
}

// AGGIUNGI iscrittiList TRA I PROPS
function ReportPage({ pagamentiList, iscrittiList = [] }) {
  const [pagamenti, setPagamenti] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const theme = useTheme();
  const { showNotification } = useNotification(); // Usa useNotification
  const [tabValue, setTabValue] = useState(0);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const anniDisponibili = useMemo(() => generaAnniSportivi(5), []); // Genera più anni per una migliore selezione
  // FIX: Imposta l'anno corrente (l'ultimo dell'array) come default
  const [annoSelezionato, setAnnoSelezionato] = useState(anniDisponibili[anniDisponibili.length - 1]); 

  // Usa i dati passati come prop per evitare fetch non necessarie e gestire il loading
  useEffect(() => {
    setPagamenti(pagamentiList);
    setLoading(false);
  }, [pagamentiList]);

  const stats = useMemo(() => {
    if (!pagamenti.length) return {
        totaleIncassato: 0, 
        incassoBonifico: 0, 
        incassoContanti: 0,
        incassoPerMese: [],
        incassoPerTipo: [],
        transazioniFiltrateUtente: [],
    };
    
    const [startYearStr, endYearStr] = annoSelezionato.split('/');
    const startYear = parseInt(startYearStr);
    
    // Anno sportivo va da Settembre (mese 8) dell'anno di inizio a Giugno (mese 5) dell'anno di fine
    const inizioAnnoSportivo = moment().year(startYear).month(8).date(1).startOf('day'); 
    const fineAnnoSportivo = moment().year(parseInt(endYearStr)).month(5).date(30).endOf('day'); 

    const pagamentiAnnoSportivo = pagamenti.filter(p => {
        if (!p.dataPagamento) return false;
        const dataPagamento = moment(p.dataPagamento);
        // La transazione deve ricadere nel periodo finanziario Set-Giu per il report annuale
        return dataPagamento.isBetween(inizioAnnoSportivo, fineAnnoSportivo, 'day', '[]');
    });

    // Aggregazione
    let incassoTotale = 0;
    let incassoBonifico = 0;
    let incassoContanti = 0;
    const incassoPerMeseMap = Array(12).fill(0); // 0-11 per Gen-Dic
    const incassoPerTipoMap = {};

    pagamentiAnnoSportivo.forEach(p => {
        const cifra = Number(p.cifra) || 0; // FIX: Conversione esplicita a Number
        incassoTotale += cifra;

        // Aggregazione per metodo di pagamento
        if (p.metodoPagamento === 'Bonifico') {
            incassoBonifico += cifra;
        } else {
            incassoContanti += cifra; // Contanti o N/D
        }
        
        if (p.dataPagamento) {
            const mese = moment(p.dataPagamento).month();
            incassoPerMeseMap[mese] += cifra;
        }
        
        const tipo = p.tipo || 'Altro';
        incassoPerTipoMap[tipo] = (incassoPerTipoMap[tipo] || 0) + cifra;
    });

    const incassoAnnoSelezionato = incassoTotale;
    const numTransazioniAnno = pagamentiAnnoSportivo.length;
    
    // Dati Grafico Barre (Ordiniamo Set-Giu)
    const mesiAnnoSportivo = [8, 9, 10, 11, 0, 1, 2, 3, 4, 5];
    const datiGraficoBarre = mesiAnnoSportivo.map(monthIndex => ({
        name: MESI[monthIndex],
        Incasso: incassoPerMeseMap[monthIndex]
    }));

    const datiGraficoTorta = Object.keys(incassoPerTipoMap).map(key => ({ 
        name: key, 
        value: incassoPerTipoMap[key] 
    }));

    const lowerSearchTerm = searchTerm.toLowerCase();
    const transazioniFiltrateUtente = pagamentiAnnoSportivo
        .filter(p => p.iscrittoNome.toLowerCase().includes(lowerSearchTerm) || (p.metodoPagamento || '').toLowerCase().includes(lowerSearchTerm))
        .sort((a, b) => moment(b.dataPagamento).valueOf() - moment(a.dataPagamento).valueOf());

    return { 
        incassoTotaleStorico: pagamenti.reduce((sum, p) => sum + (Number(p.cifra) || 0), 0),
        incassoAnnoSelezionato, 
        numTransazioniAnno,
        incassoBonifico,
        incassoContanti,
        datiGraficoBarre, 
        datiGraficoTorta,
        transazioniFiltrateUtente,
    };
  }, [pagamenti, annoSelezionato, searchTerm]);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleExportTransactions = () => {
    if (stats.transazioniFiltrateUtente.length > 0) {
        const dataToExport = stats.transazioniFiltrateUtente.map(p => ({
            'Data': moment(p.dataPagamento).format('DD/MM/YYYY'),
            'Atleta': p.iscrittoNome,
            'Tipo': p.tipo,
            'Metodo': p.metodoPagamento || 'N/D',
            'Sede': p.sede,
            'Importo': p.cifra,
        }));
        exportToExcel(dataToExport, `Report_Transazioni_${annoSelezionato.replace('/', '-')}`, true);
        showNotification("Report Transazioni esportato in Excel!", "success");
    } else {
         showNotification("Nessuna transazione da esportare.", "warning");
    }
  };

  // NUOVA FUNZIONE PER L'EXPORT BONIFICO (MATRICE)
  const handleExportBonifico = () => {
    if (iscrittiList.length === 0 || pagamenti.length === 0) {
        showNotification("Dati insufficienti per il report bonifici.", "warning");
        return;
    }

    const [startYearStr, endYearStr] = annoSelezionato.split('/');
    const startYear = parseInt(startYearStr);
    
    // Colonne del report a matrice (Iscrizione + Mesi dell'anno sportivo)
    const colonneMesi = ["Iscrizione", ...MESI.slice(8), ...MESI.slice(0, 6)]; // Iscrizione, Set, Ott, ..., Giu

    // 1. Filtra solo i pagamenti dell'anno sportivo selezionato E con metodo Bonifico
    const pagamentiBonifico = pagamenti.filter(p => {
        if (p.metodoPagamento !== 'Bonifico') return false; 
        if (!p.dataPagamento) return false;
        
        const dataPagamento = moment(p.dataPagamento);
        const annoPagamento = dataPagamento.year();
        const mesePagamento = dataPagamento.month();

        // Controllo l'anno sportivo (dal mese 8 dell'anno di inizio al mese 5 dell'anno di fine)
        const isSettembreDicembre = mesePagamento >= 8 && mesePagamento <= 11 && annoPagamento === startYear;
        const isGennaioGiugno = mesePagamento >= 0 && mesePagamento <= 5 && annoPagamento === parseInt(endYearStr);

        // La logica si basa sul mese di riferimento (meseRiferimento) PER CAPIRE A QUALE ANNO SPETTA
        // Ma, come scoperto, il filtro deve usare la data di pagamento (dataPagamento).
        // Se il filtro per data di pagamento (isBetween inizio e fine anno sportivo) è soddisfatto,
        // E il metodo è Bonifico, allora il pagamento è da includere.

        // Per il report a matrice, la logica deve includere i pagamenti la cui data di pagamento ricade
        // nell'anno sportivo corretto *oppure* sono pagamenti anticipati per mesi dell'anno sportivo.
        // Manteniamo la logica semplice: l'aggregazione per colonna (Dic) risolve il problema.
        
        // Usiamo la stessa logica di data per la coerenza del report: solo pagamenti la cui data ricade nell'anno sportivo.
        const inizioAnnoSportivo = moment().year(startYear).month(8).date(1).startOf('day'); 
        const fineAnnoSportivo = moment().year(parseInt(endYearStr)).month(5).date(30).endOf('day'); 
        
        return dataPagamento.isBetween(inizioAnnoSportivo, fineAnnoSportivo, 'day', '[]');
    });

    // 2. Aggrega i pagamenti per iscritto e per colonna (Mese/Iscrizione)
    const datiAggregati = {};
    pagamentiBonifico.forEach(p => {
        const iscrittoId = p.iscrittoId;
        const tipoPagamento = p.tipo || ''; 
        let colonna = '';
        const cifra = Number(p.cifra) || 0; // FIX: Conversione esplicita a Number

        if (tipoPagamento.toLowerCase().includes('iscrizione')) {
            colonna = 'Iscrizione';
        } else if (tipoPagamento.toLowerCase().includes('mensile') && p.meseRiferimento != null) {
            colonna = MESI[p.meseRiferimento];
        } else {
             return; 
        }

        if (!datiAggregati[iscrittoId]) {
            datiAggregati[iscrittoId] = {
                iscrittoNome: p.iscrittoNome,
                ...colonneMesi.reduce((acc, mese) => ({...acc, [mese]: 0}), {})
            };
        }
        
        // Somma le cifre per la colonna
        datiAggregati[iscrittoId][colonna] += cifra;
    });

    // 3. Crea il Report Finale con tutti gli iscritti (attivi + archiviati)
    const reportFinale = iscrittiList
        .sort((a, b) => a.cognome.localeCompare(b.cognome))
        .map(iscritto => {
            const rowData = datiAggregati[iscritto.id] || {};
            
            // Calcola il totale bonifico per l'anno sportivo
            const totaleBonifico = colonneMesi.reduce((sum, col) => sum + (rowData[col] || 0), 0);
            
            // Crea la riga del report formattata per l'export
            const formattedRow = {
                'COGNOME': iscritto.cognome,
                'NOME': iscritto.nome,
                // Aggiunge le colonne Iscrizione e Mesi con i totali
                ...colonneMesi.reduce((acc, mese) => ({
                    ...acc,
                    [mese]: rowData[mese] ? rowData[mese].toFixed(2) : 0, 
                }), {}),
                'TOTALE BONIFICO': totaleBonifico.toFixed(2)
            };
            
            return formattedRow;
        });


    if (reportFinale.length === 0) {
        showNotification("Nessun iscritto trovato per la lista.", "warning");
        return;
    }
    
    exportToExcel(reportFinale, `Report_Bonifici_Matrix_${annoSelezionato.replace('/', '-')}`, true);
    showNotification("Report Bonifici esportato in Excel!", "success");
  };

  if (loading) {
    return <Box sx={{ display: 'flex', justifyContent: 'center', mt: 5 }}><CircularProgress /></Box>;
  }
  
  const paginatedTransactions = stats.transazioniFiltrateUtente.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold' }}>Report Finanziario</Typography>
      
      <Paper elevation={0} sx={{ p: 2, mb: 3, borderRadius: 2, border: `1px solid ${theme.palette.divider}` }}>
        <Grid container alignItems="center" justifyContent="space-between">
            <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Analisi Anno Sportivo:</Typography>
            <FormControl sx={{ minWidth: 150 }} size="small">
                <InputLabel>Anno</InputLabel>
                <Select value={annoSelezionato} label="Anno" onChange={(e) => setAnnoSelezionato(e.target.value)}>
                    {anniDisponibili.map(anno => (
                        <MenuItem key={anno} value={anno}>{anno}</MenuItem>
                    ))}
                </Select>
            </FormControl>
        </Grid>
      </Paper>

      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="report tabs">
              <Tab label="Panoramica" id="report-tab-0" />
              <Tab label="Elenco Transazioni" id="report-tab-1" />
          </Tabs>
      </Box>

      <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3} sx={{ mb: 3 }}>
            <Grid item xs={12} sm={4}>
              <StatCard 
                title="Incasso Totale Storico" 
                value={`${stats.incassoTotaleStorico.toFixed(2)}€`} 
                icon={<PaidIcon />} 
                color={theme.palette.secondary.main} 
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <StatCard 
                title={`Incasso Bonifico ${annoSelezionato}`} 
                value={`${stats.incassoBonifico.toFixed(2)}€`} 
                icon={<AttachMoneyIcon />} 
                color={theme.palette.primary.main} 
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <StatCard 
                title={`Incasso Contanti ${annoSelezionato}`} 
                value={`${stats.incassoContanti.toFixed(2)}€`} 
                icon={<ReceiptIcon />} 
                color={theme.palette.warning.main} 
              />
            </Grid>
          </Grid>

          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <Paper sx={{ p: 3, borderRadius: 4, height: 400 }}> 
                <Typography variant="h6">Incassi Mensili (Anno Sportivo)</Typography>
                <ResponsiveContainer width="100%" height="90%">
                  <BarChart data={stats.datiGraficoBarre} margin={{ top: 20, right: 20, bottom: 20, left: -10 }}>
                    <XAxis dataKey="name" stroke={theme.palette.text.secondary} />
                    <YAxis stroke={theme.palette.text.secondary} />
                    <Tooltip contentStyle={{ backgroundColor: theme.palette.background.paper, border: '1px solid ' + theme.palette.divider }}/>
                    <Legend />
                    <Bar dataKey="Incasso" fill={theme.palette.primary.main} />
                  </BarChart>
                </ResponsiveContainer>
              </Paper>
            </Grid>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 3, borderRadius: 4, height: 400 }}>
                <Typography variant="h6">Divisione per Tipo di Pagamento</Typography>
                <ResponsiveContainer width="100%" height="90%">
                  <PieChart>
                    <Pie data={stats.datiGraficoTorta} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} label>
                      {stats.datiGraficoTorta.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => [`${value.toFixed(2)}€`, 'Importo']}/>
                    <Legend layout="vertical" align="right" verticalAlign="middle" />
                  </PieChart>
                </ResponsiveContainer>
              </Paper>
            </Grid>
          </Grid>
      </TabPanel>

      <TabPanel value={tabValue} index={1}>
          <Paper sx={{ p: 3, borderRadius: 4 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2, flexWrap: 'wrap', gap: 2 }}>
                  <TextField
                      sx={{ flexGrow: 1, minWidth: '250px' }}
                      placeholder="Cerca per nome, tipo o metodo di pagamento..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      InputProps={{
                          startAdornment: (
                              <InputAdornment position="start">
                                  <SearchIcon />
                              </InputAdornment>
                          ),
                      }}
                  />
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Button
                        variant="contained"
                        startIcon={<DownloadIcon />}
                        onClick={handleExportTransactions}
                        disabled={stats.transazioniFiltrateUtente.length === 0}
                    >
                        Esporta Transazioni (Lista)
                    </Button>
                    <Button
                        variant="outlined"
                        color="primary"
                        startIcon={<DownloadIcon />}
                        onClick={handleExportBonifico}
                        disabled={iscrittiList.length === 0}
                    >
                        Export Bonifico (Matrice)
                    </Button>
                  </Box>
              </Box>

              <TableContainer>
                  <Table>
                      <TableHead>
                          <TableRow>
                              <TableCell>Data</TableCell>
                              <TableCell>Atleta</TableCell>
                              <TableCell>Tipo</TableCell>
                              <TableCell>Sede</TableCell>
                              <TableCell>Metodo</TableCell> {/* NUOVA COLONNA */}
                              <TableCell align="right">Importo</TableCell>
                          </TableRow>
                      </TableHead>
                      <TableBody>
                          {paginatedTransactions.length > 0 ? (
                              paginatedTransactions.map((p, index) => (
                                  <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                                      <TableCell>{moment(p.dataPagamento).format('DD/MM/YYYY')}</TableCell>
                                      <TableCell>{p.iscrittoNome}</TableCell>
                                      <TableCell>{p.tipo}</TableCell>
                                      <TableCell>{p.sede}</TableCell>
                                      <TableCell>{p.metodoPagamento || 'N/D'}</TableCell> {/* NUOVA CELLA */}
                                      <TableCell align="right">{Number(p.cifra).toFixed(2)}€</TableCell>
                                  </TableRow>
                              ))
                          ) : (
                              <TableRow>
                                  <TableCell colSpan={6} align="center" sx={{ py: 5 }}>
                                      <Typography color="text.secondary">
                                          Nessuna transazione trovata per i criteri selezionati.
                                      </Typography>
                                  </TableCell>
                              </TableRow>
                          )}
                      </TableBody>
                  </Table>
              </TableContainer>
              <TablePagination
                  rowsPerPageOptions={[10, 25, 50]}
                  component="div"
                  count={stats.transazioniFiltrateUtente.length}
                  rowsPerPage={rowsPerPage}
                  page={page}
                  onPageChange={handleChangePage}
                  onRowsPerPageChange={handleChangeRowsPerPage}
                  labelRowsPerPage="Righe per pagina:"
              />
          </Paper>
      </TabPanel>
    </Box>
  );
}

export default ReportPage;
</file>

<file path="src/components/IscrittiLista.jsx">
// File: src/components/IscrittiLista.jsx

import React from "react";
import { Link as RouterLink } from "react-router-dom";
import {
  Card,
  CardActionArea,
  Typography,
  Grid,
  Box,
  Checkbox,
  Chip,
  Stack,
  useTheme,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
} from "@mui/material";
import moment from "moment";

// Funzioni di utility (le stesse di prima)
const getCertificatoStatus = (certificato) => {
  if (!certificato?.presente)
    return { label: "Certificato Mancante", color: "error" };
  if (!certificato.scadenza)
    return { label: "Scadenza Non Imp.", color: "error" };
  const oggi = moment();
  const scadenza = moment(certificato.scadenza);
  if (scadenza.isBefore(oggi, "day"))
    return { label: "Certificato Scaduto", color: "error" };
  if (scadenza.isSameOrAfter(oggi, "day") && scadenza.diff(oggi, "days") <= 30)
    return { label: "Certificato in Scadenza", color: "warning" };
  return { label: "Certificato OK", color: "success" };
};

const getAbbonamentoStatus = (abbonamento) => {
  if (!abbonamento?.scadenza) return { label: "Non Attivo", color: "default" };
  const oggi = moment();
  const scadenza = moment(abbonamento.scadenza);
  if (scadenza.isBefore(oggi, "day"))
    return { label: "Scaduto", color: "error" };
  if (scadenza.isSameOrAfter(oggi, "day") && scadenza.diff(oggi, "days") <= 7)
    return { label: "In scadenza", color: "warning" };
  return { label: "Attivo", color: "success" };
};

const getScadenzaText = (iscritto, filter) => {
  let scadenzaDate = null;
  let scadenzaType = "";
  if (filter.includes("abbonamenti") && iscritto.abbonamento?.scadenza) {
    scadenzaDate = moment(iscritto.abbonamento.scadenza);
    scadenzaType = "Abbonamento";
  } else if (
    filter.includes("certificati") &&
    iscritto.certificatoMedico?.scadenza
  ) {
    scadenzaDate = moment(iscritto.certificatoMedico.scadenza);
    scadenzaType = "Certificato";
  } else {
    return `Sede: ${iscritto.sede || "N/D"}`;
  }
  if (scadenzaDate)
    return `Scadenza ${scadenzaType}: ${scadenzaDate.format("DD/MM/YYYY")}`;
  return `Sede: ${iscritto.sede || "N/D"}`;
};

// Componente per la singola CARD
function CardItem({ iscritto, isSelected, onSelect, activeFilter }) {
  const theme = useTheme();
  const certificatoStatus = getCertificatoStatus(iscritto.certificatoMedico);
  const abbonamentoStatus = getAbbonamentoStatus(iscritto.abbonamento);

  const handleCheckboxClick = (e) => {
    e.stopPropagation();
    onSelect(iscritto.id);
  };

  const selectedStyle = isSelected
    ? {
        backgroundColor: theme.palette.primary.main + "20",
        border: `1px solid ${theme.palette.primary.main}`,
        borderRadius: 4,
        minHeight: 140,
      }
    : {
        backgroundColor: theme.palette.background.paper,
        border: `1px solid ${theme.palette.divider}`,
        borderRadius: 4,
        minHeight: 140,
      };

  return (
    <Grid item xs={12} sm={6} md={4}>
      <Card
        elevation={0}
        sx={{
          height: "100%",
          display: "flex",
          flexDirection: "column",
          transition: "all 0.2s",
          ...selectedStyle,
        }}
      >
        <CardActionArea
          component={RouterLink}
          to={`/iscritti/${iscritto.id}`}
          sx={{ flexGrow: 1, p: 2 }}
        >
          <Checkbox
            checked={isSelected}
            onClick={handleCheckboxClick}
            sx={{
              position: "absolute",
              top: 4,
              right: 4,
              zIndex: 2,
              color: isSelected
                ? theme.palette.primary.main
                : theme.palette.text.secondary,
            }}
          />
          <Box>
            <Typography
              variant="h6"
              component="p"
              sx={{
                fontWeight: "bold",
                mb: 0.5,
                pr: "30px",
                color: theme.palette.primary.main,
              }}
            >
              {iscritto.cognome} {iscritto.nome}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {getScadenzaText(iscritto, activeFilter)}
            </Typography>
            {(iscritto.livello || iscritto.categoria) && (
              <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                {iscritto.livello && (
                  <Chip
                    label={`Livello: ${iscritto.livello}`}
                    size="small"
                    variant="outlined"
                    sx={{
                      color: theme.palette.text.primary,
                      borderColor: theme.palette.primary.main,
                    }}
                  />
                )}
                {iscritto.categoria && (
                  <Chip
                    label={`Cat.: ${iscritto.categoria}`}
                    size="small"
                    variant="outlined"
                    sx={{
                      color: theme.palette.text.primary,
                      borderColor: theme.palette.secondary.main,
                    }}
                  />
                )}
              </Stack>
            )}
          </Box>
        </CardActionArea>
        <Stack direction="row" spacing={1} sx={{ p: 2, pt: 0, mt: "auto" }}>
          <Chip
            label={abbonamentoStatus.label}
            color={abbonamentoStatus.color}
            size="small"
            sx={{ flex: 1, fontWeight: "bold" }}
          />
          <Chip
            label={certificatoStatus.label}
            color={certificatoStatus.color}
            size="small"
            sx={{ flex: 1, fontWeight: "bold" }}
          />
        </Stack>
      </Card>
    </Grid>
  );
}

// Componente per la singola RIGA della lista
function ListItemRow({ iscritto, isSelected, onSelect, activeFilter }) {
  const theme = useTheme();
  const certificatoStatus = getCertificatoStatus(iscritto.certificatoMedico);
  const abbonamentoStatus = getAbbonamentoStatus(iscritto.abbonamento);

  const handleCheckboxClick = (e) => {
    e.stopPropagation();
    onSelect(iscritto.id);
  };

  return (
    <ListItem
      secondaryAction={
        <Stack direction="row" spacing={1} alignItems="center">
          <Chip
            label={abbonamentoStatus.label}
            color={abbonamentoStatus.color}
            size="small"
            sx={{ width: 120, fontWeight: "bold" }}
          />
          <Chip
            label={certificatoStatus.label}
            color={certificatoStatus.color}
            size="small"
            sx={{ width: 180, fontWeight: "bold" }}
          />
          {/* --- INIZIO CORREZIONE --- */}
          <Checkbox
            edge="end"
            checked={isSelected}
            onClick={handleCheckboxClick} // Sostituito onChange con onClick per poter fermare la propagazione del click
          />
          {/* --- FINE CORREZIONE --- */}
        </Stack>
      }
      sx={{
        backgroundColor: isSelected
          ? theme.palette.primary.main + "20"
          : theme.palette.background.paper,
        borderRadius: 2,
        mb: 1,
        border: `1px solid ${
          isSelected ? theme.palette.primary.main : theme.palette.divider
        }`,
      }}
      button
      component={RouterLink}
      to={`/iscritti/${iscritto.id}`}
    >
      <ListItemText
        primary={`${iscritto.cognome} ${iscritto.nome}`}
        secondary={getScadenzaText(iscritto, activeFilter)}
        primaryTypographyProps={{ fontWeight: "bold" }}
      />
    </ListItem>
  );
}

function IscrittiLista({
  iscritti = [],
  onSelect,
  selection = [],
  activeFilter,
  viewMode, // Riceve la modalità di visualizzazione
}) {
  if (viewMode === "grid") {
    return (
      <Grid container spacing={3}>
        {iscritti.map((iscritto) => (
          <CardItem
            key={iscritto.id}
            iscritto={iscritto}
            isSelected={selection.includes(iscritto.id)}
            onSelect={onSelect}
            activeFilter={activeFilter}
          />
        ))}
      </Grid>
    );
  }

  return (
    <List>
      {iscritti.map((iscritto) => (
        <ListItemRow
          key={iscritto.id}
          iscritto={iscritto}
          isSelected={selection.includes(iscritto.id)}
          onSelect={onSelect}
          activeFilter={activeFilter}
        />
      ))}
    </List>
  );
}

export default IscrittiLista;
</file>

<file path="src/main.jsx">
// File: src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import CssBaseline from '@mui/material/CssBaseline';
import { AuthProvider } from './context/AuthContext.jsx';
import { NotificationProvider } from './context/NotificationContext.jsx';
import { BrowserRouter } from 'react-router-dom';
import { ThemeProviderWrapper } from './context/ThemeContext.jsx';


ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {/* --- INIZIO CORREZIONE --- */}
    {/* Aggiungiamo la prop 'basename' per specificare la sottocartella */}
    <BrowserRouter basename="/gestionale">
    {/* --- FINE CORREZIONE --- */}
      <AuthProvider>
        <NotificationProvider>
          <ThemeProviderWrapper>
            <CssBaseline />
            <App />
          </ThemeProviderWrapper>
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
</file>

<file path="src/services/firebaseService.js">
// File: src/services/firebaseService.js (AGGIORNATO)

import {
  collection,
  getDocs,
  query,
  where,
  doc,
  updateDoc,
  addDoc,
  deleteDoc,
  orderBy,
  Timestamp, // Assicurati che Timestamp sia importato
} from "firebase/firestore";
import {
  ref,
  uploadBytes,
  getDownloadURL,
  deleteObject,
} from "firebase/storage";
import { db, storage } from "../firebase.js";

// --- SERVIZI PER ISCRITTI ---
export const fetchIscrittiAttivi = async () => {
  const q = query(collection(db, "iscritti"), where("stato", "==", "attivo"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};
export const fetchIscrittiArchiviati = async () => {
  const q = query(
    collection(db, "iscritti"),
    where("stato", "==", "archiviato")
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};
export const addIscritto = async (nuovoIscritto) => {
  const docRef = await addDoc(collection(db, "iscritti"), nuovoIscritto);
  return { id: docRef.id, ...nuovoIscritto };
};
export const updateIscritto = async (updatedData) => {
  const iscrittoRef = doc(db, "iscritti", updatedData.id);
  await updateDoc(iscrittoRef, updatedData);
};
export const archiviaIscritto = async (id) => {
  const iscrittoRef = doc(db, "iscritti", id);
  await updateDoc(iscrittoRef, { stato: "archiviato" });
};
export const ripristinaIscritto = async (id) => {
  const iscrittoRef = doc(db, "iscritti", id);
  await updateDoc(iscrittoRef, { stato: "attivo" });
};
export const deleteIscritto = async (id) => {
  await deleteDoc(doc(db, "iscritti", id));
};

// --- SERVIZI PER PAGAMENTI ---
export const fetchPagamentiByIscrittoId = async (iscrittoId) => {
  const q = query(
    collection(db, "pagamenti"),
    where("iscrittoId", "==", iscrittoId)
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => doc.data());
};
export const fetchAllPagamenti = async () => {
  const q = query(
    collection(db, "pagamenti"),
    orderBy("dataPagamento", "desc")
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => doc.data());
};
export const addPagamento = async (nuovoPagamento) => {
  await addDoc(collection(db, "pagamenti"), nuovoPagamento);
};

// --- SERVIZI PER GRUPPI ---
export const fetchGruppi = async () => {
  const q = query(collection(db, "gruppi"), orderBy("nome"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};
export const addGruppo = async (nuovoGruppo) => {
  await addDoc(collection(db, "gruppi"), nuovoGruppo);
};
export const updateGruppo = async (updatedGruppo) => {
  const gruppoRef = doc(db, "gruppi", updatedGruppo.id);
  await updateDoc(gruppoRef, updatedGruppo);
};
export const updateGruppoMembri = async (gruppoId, nuoviMembriIds) => {
  const gruppoRef = doc(db, "gruppi", gruppoId);
  await updateDoc(gruppoRef, { membri: nuoviMembriIds });
};
export const deleteGruppo = async (id) => {
  await deleteDoc(doc(db, "gruppi", id));
};

// --- SERVIZI PER TECNICI (EX STAFF) ---
const TECNICI_COLLECTION = "staff";

export const fetchTecnici = async () => {
  const q = query(collection(db, TECNICI_COLLECTION));
  const querySnapshot = await getDocs(q);
  const tecniciList = querySnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
    // AGGIUNTA: Recupera pagaOraria e assicura che sia un numero
    pagaOraria: parseFloat(doc.data().pagaOraria) || 0,
  }));
  return tecniciList.sort((a, b) => {
    const cognomeA = a.cognome || "";
    const cognomeB = b.cognome || "";
    return cognomeA.localeCompare(cognomeB);
  });
};
export const addTecnico = async (data) => {
  // AGGIUNTA: Converte pagaOraria in float prima di salvare
  const dataToSave = {
    ...data,
    pagaOraria: parseFloat(data.pagaOraria) || 0,
  };
  await addDoc(collection(db, TECNICI_COLLECTION), dataToSave);
};
export const updateTecnico = async (data) => {
  const { id, ...rest } = data;
  // AGGIUNTA: Converte pagaOraria in float prima di salvare
  const dataToUpdate = {
    ...rest,
    pagaOraria: parseFloat(rest.pagaOraria) || 0,
  };
  const docRef = doc(db, TECNICI_COLLECTION, id);
  await updateDoc(docRef, dataToUpdate);
};
export const deleteTecnico = async (id) => {
  await deleteDoc(doc(db, TECNICI_COLLECTION, id));
};

// --- SERVIZI PER DOCUMENTI ISCRITTI ---
export const uploadFile = async (file, iscrittoId) => {
  const filePath = `documenti_iscritti/${iscrittoId}/${Date.now()}_${
    file.name
  }`;
  const fileRef = ref(storage, filePath);
  await uploadBytes(fileRef, file);
  const url = await getDownloadURL(fileRef);
  const docData = {
    iscrittoId,
    name: file.name,
    url,
    filePath,
    createdAt: Timestamp.now(),
  };
  const docRef = await addDoc(collection(db, "documenti_iscritti"), docData);
  return { id: docRef.id, ...docData };
};
export const fetchDocumentsByIscrittoId = async (iscrittoId) => {
  const q = query(
    collection(db, "documenti_iscritti"),
    where("iscrittoId", "==", iscrittoId),
    orderBy("createdAt", "desc")
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};
export const deleteFile = async (docId, filePath) => {
  const fileRef = ref(storage, filePath);
  await deleteObject(fileRef);
  await deleteDoc(doc(db, "documenti_iscritti", docId));
};

// --- NUOVI SERVIZI PER DOCUMENTI TECNICI ---
const TECNICI_DOCS_COLLECTION = "documenti_tecnici";
export const uploadTecnicoFile = async (file, tecnicoId) => {
  const filePath = `documenti_tecnici/${tecnicoId}/${Date.now()}_${file.name}`;
  const fileRef = ref(storage, filePath);
  await uploadBytes(fileRef, file);
  const url = await getDownloadURL(fileRef);
  const docData = {
    tecnicoId,
    name: file.name,
    url,
    filePath,
    createdAt: Timestamp.now(),
  };
  const docRef = await addDoc(collection(db, TECNICI_DOCS_COLLECTION), docData);
  return { id: docRef.id, ...docData };
};
export const fetchTecnicoDocuments = async (tecnicoId) => {
  const q = query(
    collection(db, TECNICI_DOCS_COLLECTION),
    where("tecnicoId", "==", tecnicoId),
    orderBy("createdAt", "desc")
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};
export const deleteTecnicoFile = async (docId, filePath) => {
  const fileRef = ref(storage, filePath);
  await deleteObject(fileRef);
  await deleteDoc(doc(db, "documenti_tecnici", docId));
};

// --- SERVIZI PER AGENDA ---
const formatEventFromFirestore = (doc) => {
  const data = doc.data();
  return {
    id: doc.id,
    ...data,
    start: data.start.toDate().toISOString(),
    end: data.end ? data.end.toDate().toISOString() : null,
    description: data.description || "",
  };
};
const formatEventForFirestore = (eventData) => {
  const { id, ...data } = eventData;
  return {
    ...data,
    start: Timestamp.fromDate(new Date(data.start)),
    end: data.end ? Timestamp.fromDate(new Date(data.end)) : null,
  };
};
export const fetchAgendaEvents = async () => {
  const q = query(collection(db, "agendaEvents"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(formatEventFromFirestore);
};
export const addAgendaEvent = async (newEvent) => {
  const dataToSave = formatEventForFirestore(newEvent);
  await addDoc(collection(db, "agendaEvents"), dataToSave);
};
export const updateAgendaEvent = async (updatedEvent) => {
  const { id, ...data } = updatedEvent;
  const dataToSave = formatEventForFirestore(data);
  const eventRef = doc(db, "agendaEvents", id);
  await updateDoc(eventRef, dataToSave);
};
export const deleteAgendaEvent = async (eventId) => {
  await deleteDoc(doc(db, "agendaEvents", eventId));
};

// --- SERVIZI PER REGISTRO PRESENZE TECNICI ---
const PRESENZE_COLLECTION = "presenzeTecnici";

const formatPresenzaFromFirestore = (doc) => {
  const data = doc.data();
  return {
    id: doc.id,
    ...data,
    start: data.start.toDate().toISOString(),
    end: data.end ? data.end.toDate().toISOString() : null,
  };
};

const formatPresenzaForFirestore = (eventData) => {
  const { id, ...data } = eventData;
  return {
    ...data,
    start: Timestamp.fromDate(new Date(data.start)),
    end: data.end ? Timestamp.fromDate(new Date(data.end)) : Timestamp.fromDate(new Date(data.start)), // Assicura che end esista
  };
};

export const fetchPresenzeTecnici = async () => {
  const q = query(collection(db, PRESENZE_COLLECTION));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(formatPresenzaFromFirestore);
};

export const addPresenzaTecnico = async (newEvent) => {
  const dataToSave = formatPresenzaForFirestore(newEvent);
  await addDoc(collection(db, PRESENZE_COLLECTION), dataToSave);
};

export const updatePresenzaTecnico = async (updatedEvent) => {
  const { id, ...data } = updatedEvent;
  const dataToSave = formatPresenzaForFirestore(data);
  const eventRef = doc(db, PRESENZE_COLLECTION, id);
  await updateDoc(eventRef, dataToSave);
};

export const deletePresenzaTecnico = async (eventId) => {
  await deleteDoc(doc(db, PRESENZE_COLLECTION, eventId));
};
</file>

<file path="src/components/IscrittoEditDialog.jsx">
// File: src/components/IscrittoEditDialog.jsx

import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Grid,
  Checkbox,
  FormControlLabel,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  Divider,
  Typography,
} from "@mui/material";

// Nuove costanti per Livelli e Categorie
const LIVELLI = ["Base", "Intermedio", "Avanzato", "Agonismo"];
const CATEGORIE = ["Baby", "Allieva", "Junior", "Senior"];
const TIPI_CELLULARE = ["Personale", "Mamma", "Papà", "Altro"];

function IscrittoEditDialog({ iscritto, open, onClose, onSave }) {
  const [formData, setFormData] = useState({});

  useEffect(() => {
    if (iscritto) {
      setFormData({
        ...iscritto,
        haCertificato: iscritto.certificatoMedico?.presente || false,
        scadenzaCertificato: iscritto.certificatoMedico?.scadenza || "",
        scadenzaAbbonamento: iscritto.abbonamento?.scadenza || "",
        livello: iscritto.livello || "",
        categoria: iscritto.categoria || "",
        codiceTesseramento1:
          iscritto.codiceTesseramento1 || iscritto.codiceAssicurazione || "",
        codiceTesseramento2: iscritto.codiceTesseramento2 || "",
        codiceTesseramento3: iscritto.codiceTesseramento3 || "",
        cellulare1: iscritto.cellulare1 || iscritto.cellulare || "",
        cellulare1Tipo: iscritto.cellulare1Tipo || "Mamma",
        cellulare2: iscritto.cellulare2 || "",
        cellulare2Tipo: iscritto.cellulare2Tipo || "",
      });
    }
  }, [iscritto, open]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSave = () => {
    const {
      haCertificato,
      scadenzaCertificato,
      scadenzaAbbonamento,
      livello,
      categoria,
      quotaIscrizione,
      quotaMensile,
      codiceAssicurazione,
      codiceTesseramento1,
      codiceTesseramento2,
      codiceTesseramento3,
      cellulare,
      cellulare1,
      cellulare1Tipo,
      cellulare2,
      cellulare2Tipo,
      ...rest
    } = formData;

    const finalCellulare2 = cellulare2 || null;
    const finalCellulare2Tipo = finalCellulare2
      ? cellulare2Tipo || "Altro"
      : null;

    const dataToSave = {
      ...rest,
      certificatoMedico: {
        presente: haCertificato,
        scadenza: scadenzaCertificato,
      },
      abbonamento: { scadenza: scadenzaAbbonamento },
      livello,
      categoria,
      quotaIscrizione: parseFloat(quotaIscrizione) || 0,
      quotaMensile: parseFloat(quotaMensile) || 0,
      codiceTesseramento1,
      codiceTesseramento2,
      codiceTesseramento3,
      cellulare1,
      cellulare1Tipo,
      cellulare2: finalCellulare2,
      cellulare2Tipo: finalCellulare2Tipo,
    };
    onSave(dataToSave);
  };

  if (!iscritto) return null;

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
      <DialogTitle>
        Modifica Dati: {iscritto.nome} {iscritto.cognome}
      </DialogTitle>
      <DialogContent>
        <Grid container spacing={3} sx={{ pt: 1 }}>
          {/* ... il resto del JSX rimane invariato ... */}
          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
              Dati Anagrafici Base
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="nome"
                  label="Nome"
                  value={formData.nome || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="cognome"
                  label="Cognome"
                  value={formData.cognome || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={8}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="luogoNascita"
                  label="Luogo di Nascita"
                  value={formData.luogoNascita || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="dataNascita"
                  label="Data di Nascita"
                  type="date"
                  value={formData.dataNascita || ""}
                  onChange={handleChange}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12} sm={12}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="codiceFiscale"
                  label="Codice Fiscale Atleta"
                  value={formData.codiceFiscale || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="codiceTesseramento1"
                  label="Codice Tesseramento 1"
                  value={formData.codiceTesseramento1 || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="codiceTesseramento2"
                  label="Codice Tesseramento 2"
                  value={formData.codiceTesseramento2 || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="codiceTesseramento3"
                  label="Codice Tesseramento 3"
                  value={formData.codiceTesseramento3 || ""}
                  onChange={handleChange}
                />
              </Grid>
            </Grid>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
              Indirizzo e Contatti
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={2}>
              <Grid item xs={12} sm={9}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="via"
                  label="Indirizzo (Via / Piazza)"
                  value={formData.via || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="numeroCivico"
                  label="N. Civico"
                  value={formData.numeroCivico || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={9}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="residenza"
                  label="Città di Residenza"
                  value={formData.residenza || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="cap"
                  label="CAP"
                  value={formData.cap || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="email"
                  label="Email"
                  value={formData.email || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="cellulare1"
                  label="Cellulare 1"
                  value={formData.cellulare1 || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={2}>
                <FormControl fullWidth margin="dense">
                  <InputLabel shrink={true}>Tipo 1</InputLabel>
                  <Select
                    name="cellulare1Tipo"
                    label="Tipo 1"
                    value={formData.cellulare1Tipo || "Mamma"}
                    onChange={handleChange}
                  >
                    {TIPI_CELLULARE.map((tipo) => (
                      <MenuItem key={tipo} value={tipo}>
                        {tipo}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="cellulare2"
                  label="Cellulare 2 (Opzionale)"
                  value={formData.cellulare2 || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={2}>
                <FormControl fullWidth margin="dense">
                  <InputLabel shrink={true}>Tipo 2</InputLabel>
                  <Select
                    name="cellulare2Tipo"
                    label="Tipo 2"
                    value={formData.cellulare2Tipo || ""}
                    onChange={handleChange}
                    displayEmpty
                  >
                    <MenuItem value="">
                      <em>N/D</em>
                    </MenuItem>
                    {TIPI_CELLULARE.map((tipo) => (
                      <MenuItem key={tipo} value={tipo}>
                        {tipo}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
              Dati Tecnici e Quote
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth margin="dense">
                  <InputLabel shrink={true}>Livello</InputLabel>
                  <Select
                    name="livello"
                    label="Livello"
                    value={formData.livello || ""}
                    onChange={handleChange}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Seleziona Livello
                    </MenuItem>
                    {LIVELLI.map((lvl) => (
                      <MenuItem key={lvl} value={lvl}>
                        {lvl}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth margin="dense">
                  <InputLabel shrink={true}>Categoria</InputLabel>
                  <Select
                    name="categoria"
                    label="Categoria"
                    value={formData.categoria || ""}
                    onChange={handleChange}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>
                      Seleziona Categoria
                    </MenuItem>
                    {CATEGORIE.map((cat) => (
                      <MenuItem key={cat} value={cat}>
                        {cat}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="quotaIscrizione"
                  label="Quota Iscrizione (€)"
                  type="number"
                  value={formData.quotaIscrizione || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="quotaMensile"
                  label="Quota Mensile Prevista (€)"
                  type="number"
                  value={formData.quotaMensile || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth margin="dense">
                  <InputLabel shrink={true}>Sede</InputLabel>
                  <Select
                    name="sede"
                    label="Sede"
                    value={formData.sede || "Frascati"}
                    onChange={handleChange}
                  >
                    <MenuItem value="Frascati">Frascati</MenuItem>
                    <MenuItem value="Rocca Priora">Rocca Priora</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="scadenzaAbbonamento"
                  label="Scadenza Abbonamento"
                  type="date"
                  value={formData.scadenzaAbbonamento || ""}
                  onChange={handleChange}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
            </Grid>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
              Certificato e Annotazioni
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      name="haCertificato"
                      checked={formData.haCertificato || false}
                      onChange={handleChange}
                    />
                  }
                  label="Certificato Medico Presente"
                />
              </Grid>
              {formData.haCertificato && (
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    margin="dense"
                    name="scadenzaCertificato"
                    label="Scadenza Certificato"
                    type="date"
                    value={formData.scadenzaCertificato || ""}
                    onChange={handleChange}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              )}
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="annotazioni"
                  label="Annotazioni Segreteria"
                  multiline
                  rows={3}
                  value={formData.annotazioni || ""}
                  onChange={handleChange}
                />
              </Grid>
            </Grid>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
              Dati Genitore/Responsabile
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="nomeGenitore"
                  label="Cognome e Nome Genitore"
                  value={formData.nomeGenitore || ""}
                  onChange={handleChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  margin="dense"
                  name="cfGenitore"
                  label="Codice Fiscale Genitore"
                  value={formData.cfGenitore || ""}
                  onChange={handleChange}
                />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: "16px 24px" }}>
        <Button onClick={onClose}>Annulla</Button>
        <Button onClick={handleSave} variant="contained" color="primary">
          Salva Modifiche
        </Button>
      </DialogActions>
    </Dialog>
  );
}

export default IscrittoEditDialog;
</file>

<file path="src/pages/SchedaSocioPage.jsx">
// File: src/pages/SchedaSocioPage.jsx

import React, { useState, useEffect } from "react";
import { useParams, Link as RouterLink, useNavigate } from "react-router-dom";
import {
  doc,
  getDoc,
  updateDoc,
  collection,
  query,
  where,
  getDocs,
  addDoc,
  deleteDoc,
} from "firebase/firestore";
import { db } from "../firebase.js";
import { useNotification } from "../context/NotificationContext.jsx";
import {
  Box,
  Typography,
  Paper,
  Tabs,
  Tab,
  CircularProgress,
  Button,
  Grid,
  Chip,
  Divider,
  Stack,
  useTheme,
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import EditIcon from "@mui/icons-material/Edit";
import ArchiveIcon from "@mui/icons-material/Archive";
import IscrittoEditDialog from "../components/IscrittoEditDialog.jsx";
import AggiungiPagamentoDialog from "../components/AggiungiPagamentoDialog.jsx";
import StoricoPagamenti from "../components/StoricoPagamenti.jsx";
import PrintIcon from "@mui/icons-material/Print";
import DeleteForeverIcon from "@mui/icons-material/DeleteForever";
import logoImage from "../assets/logo.png";
import firmaImage from "../assets/firma.png";
import { generateReceipt } from "../utils/generateReceipt.js";
import {
  uploadFile,
  fetchDocumentsByIscrittoId,
  deleteFile,
} from "../services/firebaseService.js";
import FileUpload from "../components/FileUpload.jsx";
import DocumentList from "../components/DocumentList.jsx";
import moment from "moment";
import "moment/locale/it";

moment.locale("it");

function TabPanel(props) {
  const { children, value, index } = props;
  return (
    <div role="tabpanel" hidden={value !== index}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function SchedaSocioPage({ onDataUpdate }) {
  const { iscrittoId } = useParams();
  const navigate = useNavigate();
  const { showNotification } = useNotification();
  const theme = useTheme();

  const [iscritto, setIscritto] = useState(null);
  const [pagamenti, setPagamenti] = useState([]);
  const [documenti, setDocumenti] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [tabValue, setTabValue] = useState(0);

  const [isEditDialogOpen, setEditDialogOpen] = useState(false);
  const [isPagamentoDialogOpen, setPagamentoDialogOpen] = useState(false);

  const fetchIscritto = async () => {
    setLoading(true);
    try {
      const docRef = doc(db, "iscritti", iscrittoId);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const iscrittoData = { id: docSnap.id, ...docSnap.data() };
        setIscritto(iscrittoData);

        const [pagamentiList, documentiList] = await Promise.all([
          getDocs(
            query(
              collection(db, "pagamenti"),
              where("iscrittoId", "==", iscrittoId)
            )
          ).then((snap) => snap.docs.map((d) => d.data())),
          fetchDocumentsByIscrittoId(iscrittoId),
        ]);
        setPagamenti(pagamentiList);
        setDocumenti(documentiList);
      } else {
        showNotification("Iscritto non trovato.", "error");
        navigate("/iscritti");
      }
    } catch (error) {
      console.error("Errore fetch: ", error);
      showNotification("Errore nel caricamento dei dati.", "error");
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchIscritto();
  }, [iscrittoId]);

  const handleFileUpload = async (file) => {
    setUploading(true);
    try {
      await uploadFile(file, iscrittoId);
      showNotification("File caricato con successo!", "success");
      fetchIscritto();
    } catch (error) {
      showNotification("Errore durante il caricamento.", "error");
    } finally {
      setUploading(false);
    }
  };

  const handleFileDelete = async (docId, filePath) => {
    if (
      !window.confirm(
        "Sei sicuro di voler eliminare questo documento? L'azione è irreversibile."
      )
    )
      return;
    try {
      await deleteFile(docId, filePath);
      showNotification("Documento eliminato.", "success");
      fetchIscritto();
    } catch (error) {
      showNotification("Errore durante l'eliminazione.", "error");
    }
  };

  const handleUpdateIscritto = async (updatedData) => {
    try {
      const iscrittoRef = doc(db, "iscritti", updatedData.id);
      await updateDoc(iscrittoRef, updatedData);
      showNotification("Dati aggiornati con successo.", "success");
      setEditDialogOpen(false);
      fetchIscritto();
      if (onDataUpdate) onDataUpdate();
    } catch (e) {
      showNotification("Errore durante l'aggiornamento.", "error");
    }
  };

  const handleArchiviaIscritto = async () => {
    if (
      !window.confirm(
        "Sei sicuro di voler archiviare questo iscritto? Potrà essere ripristino in seguito."
      )
    )
      return;
    try {
      const iscrittoRef = doc(db, "iscritti", iscrittoId);
      await updateDoc(iscrittoRef, { stato: "archiviato" });
      showNotification("Iscritto archiviato con successo.", "success");
      if (onDataUpdate) onDataUpdate();
      navigate("/iscritti");
    } catch (e) {
      showNotification("Errore durante l'archiviazione.", "error");
    }
  };

  const handleAggiungiPagamento = async (paymentData) => {
    if (!iscritto) return;
    const { cifra, tipo, mese, metodoPagamento } = paymentData;

    const nuovoPagamento = {
      iscrittoId: iscritto.id,
      iscrittoNome: `${iscritto.nome} ${iscritto.cognome}`,
      cifra: cifra,
      tipo: tipo,
      sede: iscritto.sede || "N/D",
      dataPagamento: moment().format("YYYY-MM-DD"),
      metodoPagamento: metodoPagamento,
    };

    if (tipo === "Quota Mensile") {
      nuovoPagamento.meseRiferimento = mese;
    }

    const iscrittoRef = doc(db, "iscritti", iscritto.id);
    let datiDaAggiornare = {};
    let alertMessage = `Pagamento di tipo "${tipo}" per ${cifra}€ registrato. Metodo: ${metodoPagamento}.`;

    if (tipo === "Quota Mensile") {
      const quotaMensileStandard = iscritto.quotaMensile || 60;
      const mesiPagati = Math.floor(cifra / quotaMensileStandard);

      if (mesiPagati > 0) {
        const oggi = moment();
        const scadenzaAttuale = iscritto.abbonamento?.scadenza
          ? moment(iscritto.abbonamento.scadenza)
          : null;

        const estensioneDa =
          scadenzaAttuale && scadenzaAttuale.isAfter(oggi)
            ? scadenzaAttuale.clone()
            : oggi.clone();

        const nuovaScadenzaDate = estensioneDa
          .clone()
          .add(mesiPagati, "months");
        const nuovaScadenzaString = nuovaScadenzaDate.format("YYYY-MM-DD");

        datiDaAggiornare.abbonamento = {
          scadenza: nuovaScadenzaString,
          mesePagato: nuovaScadenzaDate.month(),
        };

        alertMessage = `Pagamento di ${mesiPagati} mese/i registrato. Nuova scadenza: ${nuovaScadenzaDate.format(
          "DD/MM/YYYY"
        )}. Metodo: ${metodoPagamento}.`;
      } else {
        alertMessage = `Pagamento di acconto registrato per ${cifra}€. Nessuna modifica alla scadenza. Metodo: ${metodoPagamento}.`;
      }
    } else if (tipo === "Iscrizione" || tipo === "Quota Iscrizione") {
      const quotaIscrizionePrecedente =
        parseFloat(iscritto.quotaIscrizione) || 0;
      const importoPagato = parseFloat(cifra) || 0;
      datiDaAggiornare.quotaIscrizione =
        quotaIscrizionePrecedente + importoPagato;
      alertMessage = `Pagamento di Iscrizione/Annuale registrato per ${importoPagato.toFixed(
        2
      )}€. Totale versato: ${datiDaAggiornare.quotaIscrizione.toFixed(
        2
      )}€. Metodo: ${metodoPagamento}.`;
    }

    try {
      await addDoc(collection(db, "pagamenti"), nuovoPagamento);
      if (Object.keys(datiDaAggiornare).length > 0) {
        await updateDoc(iscrittoRef, datiDaAggiornare);
      }
      showNotification(alertMessage, "success");
      setPagamentoDialogOpen(false);
      fetchIscritto();
      if (onDataUpdate) onDataUpdate();
    } catch (e) {
      console.error("Errore durante la registrazione del pagamento: ", e);
      showNotification(
        "Errore durante la registrazione del pagamento.",
        "error"
      );
    }
  };

  const handleEliminaIscritto = async () => {
    if (
      !window.confirm(
        "ATTENZIONE: Stai per eliminare definitivamente questo iscritto e tutti i suoi dati. L'azione è irreversibile. Continuare?"
      )
    )
      return;
    try {
      await deleteDoc(doc(db, "iscritti", iscrittoId));
      showNotification("Iscritto eliminato definitivamente.", "warning");
      if (onDataUpdate) onDataUpdate();
      navigate("/iscritti");
    } catch (e) {
      showNotification("Errore durante l'eliminazione.", "error");
    }
  };

  const handleStampaRicevuta = () => {
    generateReceipt(iscritto, pagamenti, logoImage, firmaImage);
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const formatDate = (dateString) => {
    if (!dateString) return "N/D";
    return moment(dateString).format("DD/MM/YYYY");
  };

  const getMonthName = (monthIndex) => {
    if (monthIndex == null || monthIndex === "") return "N/D";
    return (
      moment().month(monthIndex).format("MMMM").charAt(0).toUpperCase() +
      moment().month(monthIndex).format("MMMM").slice(1)
    );
  };

  // Funzione helper per renderizzare i cellulari
  const renderCellulare = (numero, tipo) => {
    if (!numero) return null;
    return (
      <Box sx={{ display: "flex", alignItems: "center", mb: 1, gap: 1 }}>
        <Typography>
          <strong>{tipo || "Contatto"}:</strong>
        </Typography>
        <Chip label={numero} size="small" color="primary" variant="outlined" />
      </Box>
    );
  };

  if (loading)
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 5 }}>
        <CircularProgress />
      </Box>
    );
  if (!iscritto) return <Typography>Iscritto non trovato.</Typography>;

  const backButtonColor =
    theme.palette.mode === "light"
      ? theme.palette.text.primary
      : theme.palette.text.secondary;

  return (
    <>
      <Button
        component={RouterLink}
        to="/iscritti"
        startIcon={<ArrowBackIcon />}
        sx={{ mb: 2, color: backButtonColor }}
      >
        Torna alla Lista Iscritti
      </Button>
      <Paper sx={{ p: { xs: 2, md: 4 }, borderRadius: 4 }}>
        <Box
          sx={{
            mb: 2,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "flex-start",
            flexWrap: "wrap",
            gap: 2,
          }}
        >
          <Box>
            <Typography
              variant="h3"
              sx={{ fontWeight: "bold", color: theme.palette.primary.main }}
            >
              {iscritto.nome} {iscritto.cognome}
            </Typography>
            <Typography color="text.secondary">
              {iscritto.codiceFiscale}
            </Typography>
          </Box>
          <Stack direction="row" spacing={1}>
            <Button
              variant="contained"
              color="info"
              startIcon={<PrintIcon />}
              onClick={handleStampaRicevuta}
            >
              Stampa Ricevuta
            </Button>
            <Button
              variant="contained"
              color="primary"
              startIcon={<EditIcon />}
              onClick={() => setEditDialogOpen(true)}
              sx={{ color: "white" }}
            >
              Modifica Dati
            </Button>
            <Button
              variant="contained"
              color="warning"
              startIcon={<ArchiveIcon />}
              onClick={handleArchiviaIscritto}
            >
              Archivia
            </Button>
            <Button
              variant="contained"
              color="error"
              startIcon={<DeleteForeverIcon />}
              onClick={handleEliminaIscritto}
            >
              Elimina
            </Button>
          </Stack>
        </Box>
        <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
          <Tabs
            value={tabValue}
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Generale" sx={{ fontWeight: "bold" }} />
            <Tab label="Contatti" sx={{ fontWeight: "bold" }} />
            <Tab
              label="Dati Sanitari e Tesseramento"
              sx={{ fontWeight: "bold" }}
            />
            <Tab label="Pagamenti" sx={{ fontWeight: "bold" }} />
            <Tab label="Documenti" sx={{ fontWeight: "bold" }} />
          </Tabs>
        </Box>

        {/* TabPanel 0: Generale */}
        <TabPanel value={tabValue} index={0}>
          <Typography variant="h6" gutterBottom>
            Dati Anagrafici
          </Typography>
          <Grid container spacing={1}>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Nato/a il:</strong> {formatDate(iscritto.dataNascita)} a{" "}
                {iscritto.luogoNascita || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Sede:</strong> {iscritto.sede || "N/D"}
              </Typography>
            </Grid>
          </Grid>
          <Divider sx={{ my: 2 }} />

          <Typography variant="h6" gutterBottom>
            Stato Abbonamento
          </Typography>
          <Grid container spacing={1} sx={{ mb: 2 }}>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Scadenza Abbonamento:</strong>{" "}
                {formatDate(iscritto.abbonamento?.scadenza)}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Ultimo Mese Pagato:</strong>{" "}
                {getMonthName(iscritto.abbonamento?.mesePagato)}
              </Typography>
            </Grid>
          </Grid>
          <Divider sx={{ my: 2 }} />

          <Typography variant="h6" gutterBottom>
            Dati Familiari
          </Typography>
          <Grid container spacing={1}>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Genitore:</strong> {iscritto.nomeGenitore || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>CF Genitore:</strong> {iscritto.cfGenitore || "N/D"}
              </Typography>
            </Grid>
          </Grid>

          <Divider sx={{ my: 2 }} />
          <Typography variant="h6" gutterBottom>
            Note Segreteria
          </Typography>
          <Paper
            variant="outlined"
            sx={{
              p: 2,
              backgroundColor:
                theme.palette.mode === "light"
                  ? theme.palette.grey[50]
                  : theme.palette.background.default,
            }}
          >
            <Typography sx={{ whiteSpace: "pre-wrap" }}>
              {iscritto.annotazioni || "Nessuna nota."}
            </Typography>
          </Paper>
        </TabPanel>

        {/* TabPanel 1: Contatti */}
        <TabPanel value={tabValue} index={1}>
          <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
            Indirizzo e Contatti
          </Typography>
          <Divider sx={{ mb: 2 }} />
          <Grid container spacing={1}>
            <Grid item xs={12}>
              <Typography>
                <strong>Residenza:</strong>{" "}
                {`${iscritto.via || ""} ${iscritto.numeroCivico || ""}, ${
                  iscritto.cap || ""
                } ${iscritto.residenza || ""}`}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Email:</strong> {iscritto.email || "N/D"}
              </Typography>
            </Grid>
          </Grid>

          <Typography
            variant="subtitle1"
            sx={{ fontWeight: "bold", mb: 1, mt: 3 }}
          >
            Contatti Telefonici
          </Typography>
          <Divider sx={{ mb: 2 }} />
          {renderCellulare(iscritto.cellulare1, iscritto.cellulare1Tipo)}
          {renderCellulare(iscritto.cellulare2, iscritto.cellulare2Tipo)}
          {!iscritto.cellulare1 && !iscritto.cellulare2 && (
            <Typography color="text.secondary">
              Nessun numero di cellulare registrato.
            </Typography>
          )}
        </TabPanel>

        {/* TabPanel 2: Dati Sanitari e Tesseramento */}
        <TabPanel value={tabValue} index={2}>
          <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
            Dati Sanitari
          </Typography>
          <Divider sx={{ mb: 2 }} />
          <Grid container spacing={1}>
            <Grid item xs={12} sm={6}>
              <Chip
                color={
                  iscritto.certificatoMedico?.presente ? "success" : "error"
                }
                label={
                  iscritto.certificatoMedico?.presente
                    ? "Certificato Presente"
                    : "Certificato Mancante"
                }
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography>
                <strong>Scadenza Certificato:</strong>{" "}
                {formatDate(iscritto.certificatoMedico?.scadenza)}
              </Typography>
            </Grid>
          </Grid>

          <Typography
            variant="subtitle1"
            sx={{ fontWeight: "bold", mb: 1, mt: 3 }}
          >
            Tesseramento
          </Typography>
          <Divider sx={{ mb: 2 }} />
          <Grid container spacing={1}>
            <Grid item xs={12} sm={4}>
              <Typography>
                <strong>Codice Tesseramento 1:</strong>{" "}
                {iscritto.codiceTesseramento1 || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Typography>
                <strong>Codice Tesseramento 2:</strong>{" "}
                {iscritto.codiceTesseramento2 || "N/D"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Typography>
                <strong>Codice Tesseramento 3:</strong>{" "}
                {iscritto.codiceTesseramento3 || "N/D"}
              </Typography>
            </Grid>
          </Grid>
        </TabPanel>

        {/* TabPanel 3: Pagamenti */}
        <TabPanel value={tabValue} index={3}>
          <Button
            onClick={() => setPagamentoDialogOpen(true)}
            variant="contained"
            color="success"
            sx={{ mb: 2 }}
          >
            Aggiungi Pagamento
          </Button>
          <StoricoPagamenti
            pagamenti={pagamenti}
            quotaMensile={iscritto.quotaMensile}
            quotaIscrizione={iscritto.quotaIscrizione}
          />
        </TabPanel>

        {/* TabPanel 4: Documenti */}
        <TabPanel value={tabValue} index={4}>
          <Typography variant="h6" gutterBottom>
            Gestione Documentale
          </Typography>
          <FileUpload onUpload={handleFileUpload} isLoading={uploading} />
          <Divider sx={{ my: 3 }} />
          <Typography variant="h6" gutterBottom>
            Documenti Caricati
          </Typography>
          <DocumentList documents={documenti} onDelete={handleFileDelete} />
        </TabPanel>
      </Paper>

      <IscrittoEditDialog
        iscritto={iscritto}
        open={isEditDialogOpen}
        onClose={() => setEditDialogOpen(false)}
        onSave={handleUpdateIscritto}
      />
      <AggiungiPagamentoDialog
        open={isPagamentoDialogOpen}
        onClose={() => setPagamentoDialogOpen(false)}
        onSave={handleAggiungiPagamento}
        iscritto={iscritto}
      />
    </>
  );
}

export default SchedaSocioPage;
</file>

<file path="src/components/IscrittoForm.jsx">
// File: src/components/IscrittoForm.jsx

import { useState } from "react";
import {
  Box,
  TextField,
  Button,
  Checkbox,
  FormControlLabel,
  Grid,
  Typography,
  Divider,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import SaveIcon from "@mui/icons-material/Save";

// Nuove costanti per Livelli e Categorie (per ginnastica artistica)
const LIVELLI = ["Base", "Intermedio", "Avanzato", "Agonismo"];
const CATEGORIE = ["Baby", "Allieva", "Junior", "Senior"];
const TIPI_CELLULARE = ["Personale", "Mamma", "Papà", "Altro"];

function IscrittoForm({ open, onClose, onIscrittoAggiunto }) {
  // STATI DEL FORM
  const [nome, setNome] = useState("");
  const [cognome, setCognome] = useState("");
  const [dataNascita, setDataNascita] = useState("");
  const [luogoNascita, setLuogoNascita] = useState("");
  const [residenza, setResidenza] = useState("");
  const [cap, setCap] = useState("");
  const [via, setVia] = useState("");
  const [numeroCivico, setNumeroCivico] = useState("");
  const [cellulare1, setCellulare1] = useState("");
  const [cellulare1Tipo, setCellulare1Tipo] = useState("Mamma");
  const [cellulare2, setCellulare2] = useState("");
  const [cellulare2Tipo, setCellulare2Tipo] = useState("");
  const [email, setEmail] = useState("");
  const [codiceFiscale, setCodiceFiscale] = useState("");
  const [codiceTesseramento1, setCodiceTesseramento1] = useState("");
  const [codiceTesseramento2, setCodiceTesseramento2] = useState("");
  const [codiceTesseramento3, setCodiceTesseramento3] = useState("");
  const [nomeGenitore, setNomeGenitore] = useState("");
  const [cfGenitore, setCfGenitore] = useState("");
  const [annotazioni, setAnnotazioni] = useState("");
  const [haCertificato, setHaCertificato] = useState(false);
  const [scadenzaCertificato, setScadenzaCertificato] = useState("");
  const [scadenzaAbbonamento, setScadenzaAbbonamento] = useState("");
  const [sede, setSede] = useState("Frascati");
  const [quotaIscrizione, setQuotaIscrizione] = useState("");
  const [quotaMensile, setQuotaMensile] = useState("");
  const [livello, setLivello] = useState("");
  const [categoria, setCategoria] = useState("");

  const resetForm = () => {
    setNome("");
    setCognome("");
    setDataNascita("");
    setLuogoNascita("");
    setResidenza("");
    setCap("");
    setVia("");
    setNumeroCivico("");
    setCellulare1("");
    setCellulare1Tipo("Mamma");
    setCellulare2("");
    setCellulare2Tipo("");
    setEmail("");
    setCodiceFiscale("");
    setCodiceTesseramento1("");
    setCodiceTesseramento2("");
    setCodiceTesseramento3("");
    setNomeGenitore("");
    setCfGenitore("");
    setAnnotazioni("");
    setHaCertificato(false);
    setScadenzaCertificato("");
    setScadenzaAbbonamento("");
    setSede("Frascati");
    setQuotaIscrizione("");
    setQuotaMensile("");
    setLivello("");
    setCategoria("");
    onClose();
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!nome || !cognome) {
      alert("Inserisci almeno nome e cognome.");
      return;
    }
    const nuovoIscritto = {
      nome,
      cognome,
      dataNascita,
      luogoNascita,
      residenza,
      cap,
      via,
      numeroCivico,
      cellulare1,
      cellulare1Tipo,
      cellulare2: cellulare2 || null,
      cellulare2Tipo: cellulare2 ? cellulare2Tipo || "Altro" : null,
      email,
      codiceFiscale,
      codiceTesseramento1,
      codiceTesseramento2,
      codiceTesseramento3,
      nomeGenitore,
      cfGenitore,
      annotazioni,
      sede,
      quotaIscrizione: parseFloat(quotaIscrizione) || 0,
      quotaMensile: parseFloat(quotaMensile) || 0,
      livello,
      categoria,
      stato: "attivo",
      dataIscrizione: new Date().toISOString().split("T")[0],
      certificatoMedico: {
        presente: haCertificato,
        scadenza: haCertificato ? scadenzaCertificato : null,
      },
      abbonamento: { scadenza: scadenzaAbbonamento },
    };
    onIscrittoAggiunto(nuovoIscritto);
    resetForm();
  };

  const handleClose = () => {
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} fullWidth maxWidth="md">
      <DialogTitle>Nuova Iscrizione Socio</DialogTitle>
      <Box component="form" onSubmit={handleSubmit}>
        <DialogContent>
          <Grid container spacing={3} sx={{ pt: 1 }}>
            {/* ... il resto del JSX rimane invariato ... */}
            <Grid item xs={12}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Dati Anagrafici Base
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Nome *"
                    value={nome}
                    onChange={(e) => setNome(e.target.value)}
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Cognome *"
                    value={cognome}
                    onChange={(e) => setCognome(e.target.value)}
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={8}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Luogo di Nascita"
                    value={luogoNascita}
                    onChange={(e) => setLuogoNascita(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Data di Nascita"
                    type="date"
                    value={dataNascita}
                    onChange={(e) => setDataNascita(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={12}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Codice Fiscale Atleta"
                    value={codiceFiscale}
                    onChange={(e) => setCodiceFiscale(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Codice Tesseramento 1"
                    value={codiceTesseramento1}
                    onChange={(e) => setCodiceTesseramento1(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Codice Tesseramento 2"
                    value={codiceTesseramento2}
                    onChange={(e) => setCodiceTesseramento2(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Codice Tesseramento 3"
                    value={codiceTesseramento3}
                    onChange={(e) => setCodiceTesseramento3(e.target.value)}
                  />
                </Grid>
              </Grid>
            </Grid>
            <Grid item xs={12}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Indirizzo e Contatti
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2}>
                <Grid item xs={12} sm={9}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Indirizzo (Via / Piazza)"
                    value={via}
                    onChange={(e) => setVia(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="N. Civico"
                    value={numeroCivico}
                    onChange={(e) => setNumeroCivico(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={9}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Città di Residenza"
                    value={residenza}
                    onChange={(e) => setResidenza(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="CAP"
                    value={cap}
                    onChange={(e) => setCap(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Cellulare 1"
                    value={cellulare1}
                    onChange={(e) => setCellulare1(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  <FormControl fullWidth size="small" variant="outlined">
                    <InputLabel shrink={true}>Tipo 1</InputLabel>
                    <Select
                      name="cellulare1Tipo"
                      label="Tipo 1"
                      value={cellulare1Tipo}
                      onChange={(e) => setCellulare1Tipo(e.target.value)}
                      displayEmpty
                    >
                      {TIPI_CELLULARE.map((tipo) => (
                        <MenuItem key={tipo} value={tipo}>
                          {tipo}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Cellulare 2 (Opzionale)"
                    value={cellulare2}
                    onChange={(e) => setCellulare2(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  <FormControl fullWidth size="small" variant="outlined">
                    <InputLabel shrink={true}>Tipo 2</InputLabel>
                    <Select
                      name="cellulare2Tipo"
                      label="Tipo 2"
                      value={cellulare2Tipo}
                      onChange={(e) => setCellulare2Tipo(e.target.value)}
                      displayEmpty
                    >
                      <MenuItem value="" disabled>
                        N/D
                      </MenuItem>
                      {TIPI_CELLULARE.map((tipo) => (
                        <MenuItem key={tipo} value={tipo}>
                          {tipo}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Grid>
            <Grid item xs={12}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Dati Tecnici e Quote
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth size="small" variant="outlined">
                    <InputLabel shrink={true}>Livello</InputLabel>
                    <Select
                      name="livello"
                      label="Livello"
                      value={livello}
                      onChange={(e) => setLivello(e.target.value)}
                      displayEmpty
                    >
                      <MenuItem value="" disabled>
                        Seleziona Livello
                      </MenuItem>
                      {LIVELLI.map((lvl) => (
                        <MenuItem key={lvl} value={lvl}>
                          {lvl}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth size="small" variant="outlined">
                    <InputLabel shrink={true}>Categoria</InputLabel>
                    <Select
                      name="categoria"
                      label="Categoria"
                      value={categoria}
                      onChange={(e) => setCategoria(e.target.value)}
                      displayEmpty
                    >
                      <MenuItem value="" disabled>
                        Seleziona Categoria
                      </MenuItem>
                      {CATEGORIE.map((cat) => (
                        <MenuItem key={cat} value={cat}>
                          {cat}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    name="quotaIscrizione"
                    label="Quota Iscrizione (€)"
                    type="number"
                    value={quotaIscrizione}
                    onChange={(e) => setQuotaIscrizione(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    name="quotaMensile"
                    label="Quota Mensile Prevista (€)"
                    type="number"
                    value={quotaMensile}
                    onChange={(e) => setQuotaMensile(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth size="small" variant="outlined">
                    <InputLabel shrink={true}>Sede di Iscrizione</InputLabel>
                    <Select
                      name="sede"
                      label="Sede di Iscrizione"
                      value={sede}
                      onChange={(e) => setSede(e.target.value)}
                    >
                      <MenuItem value="Frascati">Frascati</MenuItem>
                      <MenuItem value="Rocca Priora">Rocca Priora</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Scadenza Primo Abbonamento"
                    type="date"
                    value={scadenzaAbbonamento}
                    onChange={(e) => setScadenzaAbbonamento(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              </Grid>
            </Grid>
            <Grid item xs={12}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Certificato e Annotazioni
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={6} sx={{ display: "flex" }}>
                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={haCertificato}
                        onChange={(e) => setHaCertificato(e.target.checked)}
                      />
                    }
                    label="Certificato Medico Presente"
                  />
                </Grid>
                {haCertificato && (
                  <Grid item xs={12} sm={6}>
                    <TextField
                      size="small"
                      fullWidth
                      variant="outlined"
                      label="Scadenza Certificato Medico"
                      type="date"
                      value={scadenzaCertificato}
                      onChange={(e) => setScadenzaCertificato(e.target.value)}
                      InputLabelProps={{ shrink: true }}
                    />
                  </Grid>
                )}
                <Grid item xs={12}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Annotazioni Segreteria"
                    multiline
                    rows={3}
                    value={annotazioni}
                    onChange={(e) => setAnnotazioni(e.target.value)}
                  />
                </Grid>
              </Grid>
            </Grid>
            <Grid item xs={12}>
              <Typography
                variant="subtitle1"
                sx={{ fontWeight: "bold", mb: 1 }}
              >
                Dati Genitore/Responsabile
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Cognome e Nome Genitore"
                    value={nomeGenitore}
                    onChange={(e) => setNomeGenitore(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    size="small"
                    fullWidth
                    variant="outlined"
                    label="Codice Fiscale Genitore"
                    value={cfGenitore}
                    onChange={(e) => setCfGenitore(e.target.value)}
                  />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ p: "16px 24px" }}>
          <Button onClick={onClose}>Annulla</Button>
          <Button
            type="submit"
            variant="contained"
            color="primary"
            startIcon={<SaveIcon />}
            sx={{ height: "40px", color: "white" }}
          >
            Salva Iscrizione
          </Button>
        </DialogActions>
      </Box>
    </Dialog>
  );
}
export default IscrittoForm;
</file>

<file path="src/pages/DashboardPage.jsx">
// File: src/pages/DashboardPage.jsx (AGGIORNATO)

import React, { useMemo } from "react";
import {
  Typography,
  Grid,
  Box,
  CircularProgress,
  Paper,
  List,
  ListItem,
  ListItemText,
  Divider,
  Button,
  Stack,
  Chip,
  useTheme,
} from "@mui/material";
import { Link as RouterLink } from "react-router-dom";
import PeopleIcon from "@mui/icons-material/People";
import GroupIcon from "@mui/icons-material/Groups";
import AttachMoneyIcon from "@mui/icons-material/AttachMoney";
import AddIcon from "@mui/icons-material/Add";
import WarningIcon from "@mui/icons-material/Warning";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import AssessmentIcon from "@mui/icons-material/Assessment";
// NUOVE ICONE
import ArchiveIcon from "@mui/icons-material/Archive"; 
import EventNoteIcon from "@mui/icons-material/EventNote"; 
import EuroIcon from "@mui/icons-material/Euro"; 
import moment from "moment";
import 'moment/locale/it'; // Impostazione del locale per moment

moment.locale('it'); // Impostazione del locale per moment

const giorni = [
  "Domenica",
  "Lunedì",
  "Martedì",
  "Mercoledì",
  "Giovedì",
  "Venerdì",
  "Sabato",
];

// Componente Card minimalista per Atleti/Gruppi (simile ai box del competitor)
function CountCard({ title, count, path, icon: IconComponent, color }) {
  return (
    <Paper
      elevation={0}
      sx={{
        p: 2,
        textAlign: "center",
        borderRadius: 2,
        border: `1px solid ${color}`,
        backgroundColor: "background.paper",
        height: "100%",
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-between",
        transition: "all 0.2s",
        "&:hover": {
          transform: "translateY(-2px)",
          boxShadow: `0 3px 6px rgba(0,0,0,0.1)`,
        },
      }}
    >
      <Box sx={{ color: color }}>
        {IconComponent && <IconComponent sx={{ fontSize: 40, mb: 1 }} />}
      </Box>
      <Typography
        variant="h3"
        sx={{ fontWeight: "bold", color: "text.primary" }}
      >
        {count}
      </Typography>
      <Typography
        variant="caption"
        color="text.secondary"
        sx={{ textTransform: "uppercase", mb: 1 }}
      >
        {title}
      </Typography>
      <Button component={RouterLink} to={path} size="small" variant="text">
        Gestisci
      </Button>
    </Paper>
  );
}

// AGGIUNTA NUOVI PROPS
function DashboardPage({ 
    iscritti, 
    loading, 
    gruppi, 
    pagamenti,
    iscrittiArchiviati = [], 
    staff = [], 
    agendaEvents = [], 
    presenzeTecnici = [] 
}) {
  const theme = useTheme(); 
  const oggi = moment();

  const stats = useMemo(() => {
    
    const giornoOggi = oggi.day();
    const primoGiornoMese = oggi.clone().startOf('month');
    const ultimoGiornoMese = oggi.clone().endOf('month');
    
    // ANNO SPORTIVO
    const annoCorrente = oggi.year();
    const meseCorrente = oggi.month();
    const annoInizioSportivo = meseCorrente < 8 ? annoCorrente - 1 : annoCorrente;
    // L'anno sportivo va da Settembre (mese 8) a Giugno (mese 5)
    const inizioAnnoSportivo = moment().year(annoInizioSportivo).month(8).date(1).startOf('day'); 
    const fineAnnoSportivo = moment().year(annoInizioSportivo + 1).month(5).date(30).endOf('day'); 


    // Filtri certificati (MANTENUTI)
    const certificatiInScadenza = iscritti.filter((iscritto) => {
      if (!iscritto.certificatoMedico?.scadenza) return false;
      const scadenza = moment(iscritto.certificatoMedico.scadenza);
      return (
        scadenza.isSameOrAfter(oggi, "day") && scadenza.diff(oggi, "days") <= 30
      );
    });

    const certificatiScaduti = iscritti.filter((iscritto) => {
      if (!iscritto.certificatoMedico?.scadenza) return false;
      const scadenza = moment(iscritto.certificatoMedico.scadenza);
      return scadenza.isBefore(oggi, "day");
    });

    const certificatiOK = iscritti.filter((iscritto) => {
      if (!iscritto.certificatoMedico?.scadenza) return false;
      const scadenza = moment(iscritto.certificatoMedico.scadenza);
      return scadenza.isAfter(oggi.clone().add(30, "days"), "day");
    });

    // Filtri abbonamenti scaduti (MANTENUTI)
    const abbonamentiScaduti = iscritti.filter((iscritto) => {
      if (!iscritto.abbonamento?.scadenza) return false;
      const scadenza = moment(iscritto.abbonamento.scadenza);
      return scadenza.isBefore(oggi, "day");
    });

    // 1. Dati finanziari (Incasso Totale Complessivo)
    const incassoTotale = pagamenti.reduce(
      (acc, p) => acc + (parseFloat(p.cifra) || 0),
      0
    );

    // 1b. Incasso Mese Corrente
    const incassoMeseCorrente = pagamenti
      .filter((p) => {
        if (!p.dataPagamento) return false;
        const dataPagamento = moment(p.dataPagamento);
        return dataPagamento.isBetween(primoGiornoMese, ultimoGiornoMese, 'day', '[]');
      })
      .reduce((acc, p) => acc + (parseFloat(p.cifra) || 0), 0);

    // 1c. Incasso Anno Sportivo
    const pagamentiAnnoSportivo = pagamenti
        .filter((p) => {
            if (!p.dataPagamento) return false;
            const dataPagamento = moment(p.dataPagamento);
            return dataPagamento.isBetween(inizioAnnoSportivo, fineAnnoSportivo, 'day', '[]');
        })
    const incassoAnnoSportivo = pagamentiAnnoSportivo.reduce((acc, p) => acc + (parseFloat(p.cifra) || 0), 0);


    // 2. Costo Personale
    let costoPersonaleMeseCorrente = 0;
    let costoPersonaleAnnoSportivo = 0; 
    
    const staffMap = staff.reduce((map, t) => {
        map[t.id] = parseFloat(t.pagaOraria) || 0;
        return map;
    }, {});

    // PresenzeTecnici is expected to be available via props
    presenzeTecnici.forEach(p => {
        if (p.status === 'Presente' && p.start) {
            const dataPresenza = moment(p.start);
            const pagaOraria = staffMap[p.tecnicoId] || 0;
            const oreLavorate = parseFloat(p.oreLavorate) || 0;

            if (dataPresenza.isBetween(primoGiornoMese, ultimoGiornoMese, 'day', '[]')) {
                costoPersonaleMeseCorrente += (pagaOraria * oreLavorate);
            }
            if (dataPresenza.isBetween(inizioAnnoSportivo, fineAnnoSportivo, 'day', '[]')) {
                costoPersonaleAnnoSportivo += (pagaOraria * oreLavorate);
            }
        }
    });


    // 3. Prossimo Evento Agenda
    const prossimoEvento = agendaEvents
        .map(e => ({
            ...e,
            startMoment: moment(e.start),
        }))
        .filter(e => e.startMoment.isSameOrAfter(oggi, 'day'))
        .sort((a, b) => a.startMoment.valueOf() - b.startMoment.valueOf())[0] || null;

    // Orari (MANTENUTI)
    const orariDiOggi = gruppi
      .filter((g) => g.giornoSettimana === giornoOggi)
      .sort((a, b) => a.oraInizio.localeCompare(b.oraInizio));

    // Scadenze per la lista dettagliata (MANTENUTI + ABBONAMENTI IN SCADENZA)
    const abbonamentiInScadenza = iscritti.filter((i) => {
        if (!i.abbonamento?.scadenza) return false;
        const scadenza = moment(i.abbonamento.scadenza);
        return (
          scadenza.isSameOrAfter(oggi, "day") && scadenza.diff(oggi, "days") <= 7 // 7 giorni per la lista
        );
      });

    const scadenzeDaVisualizzare = [
      ...certificatiScaduti.map((i) => ({
        ...i,
        tipoScadenza: "Certificato Medico",
        scadenzaData: moment(i.certificatoMedico.scadenza),
        isScaduto: true,
      })),
      ...certificatiInScadenza.map((i) => ({
        ...i,
        tipoScadenza: "Certificato Medico",
        scadenzaData: moment(i.certificatoMedico.scadenza),
        isScaduto: false,
      })),
      ...abbonamentiScaduti.map((i) => ({
        ...i,
        tipoScadenza: "Abbonamento",
        scadenzaData: moment(i.abbonamento.scadenza),
        isScaduto: true,
      })),
      ...abbonamentiInScadenza.map((i) => ({
        ...i,
        tipoScadenza: "Abbonamento",
        scadenzaData: moment(i.abbonamento.scadenza),
        isScaduto: false,
      })),
    ].sort((a, b) => a.scadenzaData.diff(b.scadenzaData));

    // Ultimi Pagamenti (MANTENUTI)
    const pagamentiRecenti = [...pagamenti]
      .filter(
        (p) =>
          p.dataPagamento && moment(p.dataPagamento).isSameOrBefore(oggi, "day")
      )
      .sort(
        (a, b) =>
          moment(b.dataPagamento).valueOf() - moment(a.dataPagamento).valueOf()
      )
      .slice(0, 5);
    

    return {
      totaleIscritti: iscritti.length,
      totaleArchiviati: iscrittiArchiviati.length, 
      totaleGruppi: gruppi.length,
      certificatiInScadenzaCount: certificatiInScadenza.length,
      certificatiScadutiCount: certificatiScaduti.length,
      certificatiOKCount: certificatiOK.length,
      abbonamentiScadutiCount: abbonamentiScaduti.length,
      totaleIncassato: incassoTotale, // Totale Complessivo Mantenuto
      incassoMeseCorrente: incassoMeseCorrente, 
      costoPersonaleMeseCorrente: costoPersonaleMeseCorrente, 
      incassoAnnoSportivo: incassoAnnoSportivo,
      costoPersonaleAnnoSportivo: costoPersonaleAnnoSportivo,
      prossimoEvento: prossimoEvento, 
      orariDiOggi,
      scadenzeDaVisualizzare,
      pagamentiRecenti,
    };
  }, [iscritti, gruppi, pagamenti, iscrittiArchiviati, staff, presenzeTecnici, agendaEvents, oggi]);

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 5 }}>
        <CircularProgress />
      </Box>
    );
  }

  // ALTEZZA FISSA PER ALLINEAMENTO PERFETTO
  const cardMinHeight = { xs: "auto", md: "300px" }; 
  const detailCardStyle = {
    p: 3,
    borderRadius: 4,
    elevation: 0,
    border: `1px solid ${theme.palette.divider}`,
    backgroundColor: "background.paper",
    minHeight: cardMinHeight, 
  };
  
  // Nome del mese corrente in italiano e Anno sportivo
  const nomeMeseCorrente = oggi.format('MMMM').charAt(0).toUpperCase() + oggi.format('MMMM').slice(1);
  const annoSportivoDisplay = `${oggi.month() < 8 ? oggi.year() - 1 : oggi.year()}/${oggi.month() < 8 ? oggi.year() : oggi.year() + 1}`;


  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: "bold" }}>
        Dashboard
      </Typography>

      <Paper
        elevation={0}
        sx={{
          p: 2,
          mb: 3,
          borderRadius: 2,
          border: `1px solid ${theme.palette.divider}`,
          backgroundColor: "background.paper",
        }}
      >
        <Typography
          variant="body1"
          sx={{
            fontWeight: "bold",
            mb: 1,
            color: theme.palette.text.secondary,
          }}
        >
          Notifiche e Azioni Rapide
        </Typography>
        <Stack direction="row" spacing={2} sx={{ flexWrap: "wrap", gap: 1 }}>
          {stats.abbonamentiScadutiCount > 0 && (
            <Chip
              label={`${stats.abbonamentiScadutiCount} Abbonamenti Scaduti`}
              color="error"
              component={RouterLink}
              to="/iscritti?filtro=abbonamenti_scaduti"
              clickable
            />
          )}
          {stats.certificatiScadutiCount > 0 && (
            <Chip
              label={`${stats.certificatiScadutiCount} Certificati Scaduti`}
              color="error"
              component={RouterLink}
              to="/iscritti?filtro=certificati_scaduti"
              clickable
            />
          )}
          {stats.certificatiInScadenzaCount > 0 && (
            <Chip
              label={`${stats.certificatiInScadenzaCount} Certificati in Scadenza`}
              color="warning"
              component={RouterLink}
              to="/iscritti?filtro=certificati_in_scadenza"
              clickable
            />
          )}
          <Button
            variant="contained"
            component={RouterLink}
            to="/iscritti/nuovo"
            startIcon={<AddIcon />}
          >
            Nuovo Socio
          </Button>
          <Button
            variant="outlined"
            component={RouterLink}
            to="/report"
            startIcon={<AssessmentIcon />}
          >
            Report Finanziario
          </Button>
        </Stack>
      </Paper>

      {/* RIGA 1: ANAGRAFICA & CASSA */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        
        {/* COLONNA 1: ANAGRAFICA & CORSI - md={6} */}
        <Grid item xs={12} md={6}>
          <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
            Anagrafica & Corsi
          </Typography>
          <Paper sx={detailCardStyle}>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <CountCard
                  title="Atleti Attivi"
                  count={stats.totaleIscritti}
                  path="/iscritti"
                  icon={PeopleIcon}
                  color={theme.palette.primary.main}
                />
              </Grid>
              <Grid item xs={6}>
                <CountCard
                  title="Gruppi Totali"
                  count={stats.totaleGruppi}
                  path="/gruppi"
                  icon={GroupIcon}
                  color={theme.palette.info.main}
                />
              </Grid>
              {/* NUOVO: Atleti Archiviati */}
              <Grid item xs={6}>
                <CountCard
                  title="Atleti Archiviati"
                  count={stats.totaleArchiviati}
                  path="/archivio"
                  icon={ArchiveIcon}
                  color={theme.palette.text.secondary}
                />
              </Grid>
              {/* Stato Certificati */}
              <Grid item xs={6}>
                <Paper
                  elevation={0}
                  sx={{
                    p: 2,
                    borderRadius: 2,
                    border: `1px solid ${theme.palette.divider}`,
                    backgroundColor: "background.default",
                    textAlign: "center",
                    mt: 1, 
                  }}
                >
                  <Typography
                    variant="h6"
                    gutterBottom
                    sx={{ fontWeight: "bold", fontSize: '1rem' }}
                  >
                    Stato Certificati
                  </Typography>
                  <Stack
                    direction="row"
                    spacing={1}
                    justifyContent="center"
                    flexWrap="wrap"
                  >
                    {/* CHIP AGGIUNTO: Certificati in Scadenza */}
                    <Chip
                      label={`In Scadenza: ${stats.certificatiInScadenzaCount}`}
                      icon={<WarningIcon />}
                      color="warning"
                      size="small"
                    />
                    <Chip
                      label={`OK: ${stats.certificatiOKCount}`}
                      icon={<CheckCircleIcon />}
                      color="success"
                      size="small"
                    />
                    <Chip
                      label={`Scaduti: ${stats.certificatiScadutiCount}`}
                      icon={<WarningIcon />}
                      color="error"
                      size="small"
                    />
                  </Stack>
                </Paper>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* COLONNA 2: RIEPILOGO CASSA & COSTI (METRICHE ANNUALI e MENSILI SEPARATE in blocchi) - md={6} */}
        <Grid item xs={12} md={6}>
          <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
            Riepilogo Finanziario
          </Typography>
          <Paper sx={detailCardStyle}>
            
            {/* --- BLOCCO 1: METRICHE ANNUALI (HIGHLIGHTED) --- */}
            <Paper 
              elevation={3} // Evidenziazione visiva
              sx={{ 
                p: 2, 
                mb: 3, 
                borderRadius: 2, 
                backgroundColor: theme.palette.primary.main + '10', // Sfondo leggero
                borderLeft: `5px solid ${theme.palette.primary.main}` // Bordo di rilievo
              }}
            >
              <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1, color: theme.palette.primary.main }}>
                  Anno Sportivo ({annoSportivoDisplay})
              </Typography>
              {/* GRID INTERNA per i dati */}
              <Grid container spacing={1}> 
                  <Grid item xs={6}>
                    <Typography variant="caption" color="text.secondary">Incasso Annuale</Typography>
                    <Typography variant="h4" sx={{ fontWeight: "bold", color: theme.palette.success.main }}>
                      €{stats.incassoAnnoSportivo.toFixed(2)}
                    </Typography>
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" color="text.secondary">Costo Personale</Typography>
                    <Typography variant="h4" sx={{ fontWeight: "bold", color: theme.palette.error.main }}>
                      €{stats.costoPersonaleAnnoSportivo.toFixed(2)}
                    </Typography>
                  </Grid>
              </Grid>
            </Paper>

            {/* --- BLOCCO 2: METRICHE MENSILI (STANDARD) --- */}
            <Paper 
              elevation={1} 
              sx={{ 
                p: 2, 
                mb: 3, 
                borderRadius: 2, 
                border: `1px solid ${theme.palette.divider}` 
              }}
            >
              <Typography variant="subtitle1" sx={{ fontWeight: "bold", mb: 1 }}>
                  Mese di {nomeMeseCorrente}
              </Typography>
              {/* GRID INTERNA per i dati */}
              <Grid container spacing={1}>
                  <Grid item xs={6}>
                    <Typography variant="caption" color="text.secondary">Incasso Mese</Typography>
                    <Typography variant="h5" sx={{ fontWeight: "bold", color: theme.palette.success.main }}>
                      €{stats.incassoMeseCorrente.toFixed(2)}
                    </Typography>
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" color="text.secondary">Costo Personale</Typography>
                    <Typography variant="h5" sx={{ fontWeight: "bold", color: theme.palette.error.main }}>
                      €{stats.costoPersonaleMeseCorrente.toFixed(2)}
                    </Typography>
                  </Grid>
              </Grid>
            </Paper>
            
            <Divider sx={{ my: 2 }} />

            {/* --- ABBONAMENTI SCADUTI E BOTTONE (MANTENUTI) --- */}
            <Grid container spacing={1}>
                <Grid item xs={12}>
                    <Box
                      sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
                    >
                      <Typography variant="body1">Abbonamenti Scaduti:</Typography>
                      <Typography
                        variant="body1"
                        sx={{ fontWeight: "bold", color: theme.palette.error.main }}
                      >
                        {stats.abbonamentiScadutiCount}
                      </Typography>
                    </Box>
                </Grid>
                <Grid item xs={12}>
                    <Button
                      component={RouterLink}
                      to="/iscritti?filtro=abbonamenti_scaduti"
                      fullWidth
                      variant="outlined"
                      startIcon={<AssessmentIcon />}
                    >
                      Visualizza Report Completo
                    </Button>
                </Grid>
            </Grid>
          </Paper>
        </Grid>
      </Grid>

      {/* RIGA 2: ATTIVITÀ GIORNALIERE, SCADENZE E PAGAMENTI - Tutto md={4} */}
      <Grid container spacing={3}>
        
        {/* NUOVA COLONNA 1: ATTIVITÀ GIORNALIERE (Spostata da sopra) - md={4} */}
        <Grid item xs={12} md={4}>
          <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
            Attività Giornaliere
          </Typography>
          <Paper sx={detailCardStyle}>
            {/* Prossimo Evento Agenda (NUOVO) */}
            <Box sx={{ mb: 2 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 1, color: theme.palette.primary.main }}>
                    <EventNoteIcon color="primary" />
                    <Typography variant="subtitle1" sx={{ ml: 1, fontWeight: "bold" }}>
                        Prossimo Evento
                    </Typography>
                </Box>
                {stats.prossimoEvento ? (
                    <Box sx={{ borderLeft: `3px solid ${theme.palette.primary.main}`, pl: 2 }}>
                        <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                            {stats.prossimoEvento.title}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                            {stats.prossimoEvento.startMoment.format('ddd DD/MM HH:mm')}
                        </Typography>
                    </Box>
                ) : (
                    <Typography variant="body2" color="text.secondary" sx={{ pl: 2 }}>
                        Nessun evento in agenda.
                    </Typography>
                )}
            </Box>
            
            <Divider sx={{ my: 2 }} />

            {/* Orari di Oggi (MANTENUTO) */}
            <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
              <CalendarTodayIcon color="secondary" />
              <Typography variant="h6" sx={{ ml: 1, fontWeight: "bold" }}>
                Orari di {giorni[new Date().getDay()]}
              </Typography>
            </Box>
            <Box sx={{ maxHeight: 150, overflow: "auto" }}> {/* Altezza ridotta per allineamento */}
              {stats.orariDiOggi.length > 0 ? (
                <List dense disablePadding>
                  {stats.orariDiOggi.map((gruppo) => (
                    <ListItem key={gruppo.id} disableGutters>
                      <ListItemText
                        primary={`${gruppo.oraInizio} - ${gruppo.oraFine}: ${gruppo.nome}`}
                        secondary={`Allenatore: ${
                          gruppo.staffNome || "N/D"
                        } | Sede: ${gruppo.sede || "N/D"}`}
                        primaryTypographyProps={{ fontWeight: "bold" }}
                        secondaryTypographyProps={{ variant: "caption" }}
                      />
                    </ListItem>
                  ))}
                </List>
              ) : (
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ p: 1, textAlign: "center" }}
                >
                  Nessun gruppo in programma per oggi.
                </Typography>
              )}
            </Box>
          </Paper>
        </Grid>
        
        {/* COLONNA 2: SCADENZE DA CONTROLLARE - md={4} */}
        <Grid item xs={12} md={4}>
          <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
            Scadenze da Controllare
          </Typography>
          <Paper
            sx={{ ...detailCardStyle, minHeight: { xs: "auto", md: "450px" } }}
          >
            <Box sx={{ maxHeight: 400, overflow: "auto" }}>
              {stats.scadenzeDaVisualizzare.length > 0 ? (
                <List dense disablePadding>
                  {stats.scadenzeDaVisualizzare.map((item, index) => (
                    <React.Fragment key={item.id + item.tipoScadenza}>
                      <ListItem
                        component={RouterLink}
                        to={`/iscritti/${item.id}`}
                        sx={{
                          alignItems: "center",
                          justifyContent: "space-between",
                          // NEW: Evidenziazione riga basata su SCADUTO/IN SCADENZA
                          backgroundColor: item.isScaduto 
                                            ? theme.palette.error.main + '10' 
                                            : theme.palette.warning.main + '10', // Usa sempre warning light per non scaduto
                          borderRadius: 1,
                          mb: 0.5,
                          p: 1.5,
                          transition: 'background-color 0.2s',
                          '&:hover': {
                            backgroundColor: item.isScaduto 
                                            ? theme.palette.error.main + '20' 
                                            : theme.palette.action.hover,
                          }
                        }}
                      >
                        <ListItemText
                          primary={`${item.nome} ${item.cognome}`}
                          secondary={`Scadenza ${
                            item.tipoScadenza
                          }: ${item.scadenzaData.format("DD/MM/YYYY")}`}
                          primaryTypographyProps={{ fontWeight: "bold" }}
                          sx={{ flex: "1 1 auto", pr: 2 }}
                        />
                        <Chip
                          label={item.isScaduto ? "SCADUTO" : "IN SCADENZA"}
                          color={item.isScaduto ? "error" : "warning"}
                          size="small"
                          sx={{ whiteSpace: "nowrap", fontWeight: "bold" }}
                        />
                      </ListItem>
                    </React.Fragment>
                  ))}
                </List>
              ) : (
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ p: 2, textAlign: "center" }}
                >
                  Nessuna scadenza critica imminente.
                </Typography>
              )}
            </Box>
          </Paper>
        </Grid>

        {/* COLONNA 3: ULTIMI PAGAMENTI REGISTRATI - md={4} */}
        <Grid item xs={12} md={4}>
          <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
            Ultimi Pagamenti Registrati
          </Typography>
          <Paper
            sx={{ ...detailCardStyle, minHeight: { xs: "auto", md: "450px" } }}
          >
            <Box sx={{ maxHeight: 400, overflow: "auto" }}>
              {stats.pagamentiRecenti.length > 0 ? (
                <List dense disablePadding>
                  {stats.pagamentiRecenti.map((p, index) => (
                    <React.Fragment key={p.id || index}>
                      <ListItem disableGutters>
                        <ListItemText
                          primary={
                            <Typography
                              component="span"
                              sx={{ fontWeight: "bold" }}
                            >
                              {p.iscrittoNome}
                            </Typography>
                          }
                          secondary={moment(p.dataPagamento).format(
                            "DD/MM/YYYY"
                          )}
                        />
                        <Box sx={{ textAlign: "right" }}>
                          <Chip
                            label={`€${(p.cifra || 0).toFixed(2)}`}
                            size="small"
                            color="success"
                            sx={{ mr: 1, fontWeight: "bold" }}
                          />
                          <Chip
                            label={p.tipo || "N/D"}
                            size="small"
                            variant="outlined"
                          />
                        </Box>
                      </ListItem>
                      {index < stats.pagamentiRecenti.length - 1 && <Divider />}
                    </React.Fragment>
                  ))}
                </List>
              ) : (
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ p: 2, textAlign: "center" }}
                >
                  Nessun pagamento recente registrato.
                </Typography>
              )}
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
}

export default DashboardPage;
</file>

<file path="src/theme.js">
// File: src/theme.js

import { createTheme } from "@mui/material/styles";

// --- Funzione per Applicare Regole di Contrasto Comuni (RIUTILIZZATE) ---
const getBaseComponents = (mode, theme) => ({
  // Passiamo il tema per accedere ai colori di sfondo
  MuiButton: {
    styleOverrides: {
      root: {
        textTransform: "none",
        fontWeight: "bold",
        "& a": { color: "inherit" },
        "& a:hover": { color: "inherit" },
      },
      containedPrimary: { color: "#ECEFF4" },
      containedError: { color: mode === "light" ? "#FFFFFF" : "#ECEFF4" },
      containedWarning: { color: mode === "light" ? "#1E1E2E" : "#ECEFF4" },
      containedSuccess: { color: mode === "light" ? "#1E1E2E" : "#ECEFF4" },
      text: {
        color: mode === "light" ? "#6A5ACD" : "#ECEFF4",
        "&:hover, &:focus, &.Mui-focusVisible": {
          color: mode === "light" ? "#6A5ACD" : "#ECEFF4",
          backgroundColor: "transparent",
        },
      },
      outlined: {
        color: mode === "light" ? "#6A5ACD" : "#ECEFF4",
        "&:hover, &:focus, &.Mui-focusVisible": {
          color: mode === "light" ? "#6A5ACD" : "#ECEFF4",
        },
      },
    },
    defaultProps: { disableElevation: true },
  },
  MuiPaper: { styleOverrides: { root: { backgroundImage: "none" } } },
  MuiMenuItem: {
    styleOverrides: {
      root: {
        "&:hover, &.Mui-focusVisible": {
          backgroundColor:
            mode === "light"
              ? "rgba(106, 90, 205, 0.05)"
              : "rgba(226, 189, 134, 0.1)",
          color: mode === "light" ? "#1E1E2E" : "#ECEFF4",
        },
      },
    },
  },
  MuiListItemButton: {
    styleOverrides: {
      root: {
        "&.Mui-selected": {
          backgroundColor:
            mode === "light"
              ? "rgba(106, 90, 205, 0.1)"
              : "rgba(74, 77, 122, 0.4)",
          color: mode === "light" ? "#1E1E2E" : "#ECEFF4",
        },
        "&:hover": {
          backgroundColor:
            mode === "light"
              ? "rgba(106, 90, 205, 0.05)"
              : "rgba(226, 189, 134, 0.1)",
          color: mode === "light" ? "#1E1E2E" : "#ECEFF4",
        },
      },
    },
  },
  MuiChip: {
    styleOverrides: {
      root: {
        fontWeight: "bold",
        "& a": { color: "inherit" },
        "& a:hover": { color: "inherit" },
      },
      filledError: { color: mode === "light" ? "#FFFFFF" : "#ECEFF4" },
      filledWarning: { color: mode === "light" ? "#1E1E2E" : "#ECEFF4" },
      filledSuccess: { color: mode === "light" ? "#1E1E2E" : "#ECEFF4" },
    },
  },
  MuiTab: {
    styleOverrides: {
      root: {
        textTransform: "none",
        fontWeight: "bold",
        "&.Mui-focusVisible": {
          outline: "none !important",
          boxShadow: "none !important",
          border: "none !important",
        },
        "&.Mui-selected": {
          backgroundColor: "transparent",
          color: mode === "light" ? "#6A5ACD" : "#E2BD86",
          border: "none !important",
          boxShadow: "none !important",
          outline: "none !important",
        },
        "&:hover": { backgroundColor: "rgba(106, 90, 205, 0.03)" },
      },
    },
  },
  // --- INIZIO MODIFICA AGGIUNTA ---
  MuiInputLabel: {
    styleOverrides: {
      root: {
        // Quando l'etichetta è rimpicciolita, le diamo uno sfondo e un po' di padding
        // per creare l'effetto "intagliato" nel bordo.
        "&.Mui-focused, &.MuiFormLabel-filled, &[data-shrink='true']": {
          backgroundColor: theme.palette.background.paper, // Usa il colore di sfondo della card/dialog
          paddingLeft: "4px",
          paddingRight: "4px",
        },
      },
    },
  },
  // --- FINE MODIFICA AGGIUNTA ---
  MuiOutlinedInput: {
    styleOverrides: {
      root: {
        borderRadius: 8,
        "& .MuiOutlinedInput-notchedOutline": {
          borderRadius: 8,
        },
      },
    },
  },
  MuiSvgIcon: {
    styleOverrides: {
      root: {
        "&.Mui-selected": {
          color: mode === "light" ? "#1E1E2E" : "#ECEFF4",
        },
      },
    },
  },
});

// Funzione helper per creare i temi in modo pulito e applicare le modifiche
const createAppTheme = (options) => {
  let theme = createTheme(options);
  // Applichiamo i componenti base DOPO, così possiamo passare `theme` per accedere ai suoi valori
  theme = createTheme(theme, {
    components: getBaseComponents(options.palette.mode, theme),
  });
  return theme;
};

// --- Theme Definitions ---

export const themes = {
  // Tema 1: default (Light - Standard)
  default: createAppTheme({
    palette: {
      mode: "light",
      primary: { main: "#F7567C" },
      secondary: { main: "#99E1D9" },
      background: { default: "#FCFCFC", paper: "#FFFAE3" },
      text: { primary: "#5D576B", secondary: "#99E1D9" },
      divider: "#5D576B",
      error: { main: "#F44336" },
      warning: { main: "#FF9800" },
    },
    typography: { fontFamily: "Poppins, sans-serif" },
    shape: { borderRadius: 12 },
  }),

  // Tema 2: asdgym (Dark - Revisionato per leggibilità)
  asdgym: createAppTheme({
    palette: {
      mode: "dark",
      primary: { main: "#E2BD86" },
      secondary: { main: "#4A4D7A" },
      success: { main: "#6AA84F" },
      warning: { main: "#F1C232" },
      error: { main: "#CC0000" },
      info: { main: "#4A86E8" },
      background: {
        default: "#1E1E2E",
        paper: "#282C34",
      },
      text: { primary: "#ECEFF4", secondary: "#8F8F8F" },
      divider: "#4A4D7A",
    },
    typography: {
      fontFamily: "Poppins, sans-serif",
      h4: { fontWeight: 700, fontSize: "2.125rem" },
      h5: { fontWeight: 600, fontSize: "1.5rem" },
      h6: { fontWeight: 600, fontSize: "1.25rem" },
    },
    shape: {
      borderRadius: 8,
    },
  }),

  // Tema 3: smarthome (Ispirato a Smart Home UI)
  smarthome: createAppTheme({
    palette: {
      mode: "light",
      primary: { main: "#6A5ACD" }, // Viola scuro
      secondary: { main: "#A07EDD" }, // Viola chiaro/Lavanda
      success: { main: "#7BD94F" },
      warning: { main: "#FFC84E" },
      error: { main: "#FF6B6B" },
      info: { main: "#7BD3EF" },
      background: {
        default: "#F7F8FC",
        paper: "#FFFFFF",
      },
      text: { primary: "#1E1E2E", secondary: "#7C7895" },
      divider: "rgba(122, 120, 149, 0.2)",
    },
    typography: {
      fontFamily: "Poppins, sans-serif",
      h4: { fontWeight: 700, fontSize: "2.125rem" },
      h5: { fontWeight: 600, fontSize: "1.5rem" },
      h6: { fontWeight: 600, fontSize: "1.25rem" },
    },
    shape: {
      borderRadius: 8,
    },
  }),

  // Tema 4: pastel (Ispirato a Pastel Dreams)
  pastel: createAppTheme({
    palette: {
      mode: "light",
      primary: { main: "#FF99C8" },
      secondary: { main: "#A9DEF9" },
      success: { main: "#D0F4DE" },
      warning: { main: "#E4C1F9" },
      error: { main: "#EF5350" },
      info: { main: "#FCF6BD" },
      background: {
        default: "#FCF6BD",
        paper: "#FFFFFF",
      },
      text: { primary: "#1E1E2E", secondary: "#5D576B" },
      divider: "rgba(30, 30, 46, 0.1)",
    },
    typography: {
      fontFamily: "Poppins, sans-serif",
      h4: { fontWeight: 700, fontSize: "2.125rem" },
      h5: { fontWeight: 600, fontSize: "1.5rem" },
      h6: { fontWeight: 600, fontSize: "1.25rem" },
    },
    shape: {
      borderRadius: 8,
    },
  }),
};
</file>

<file path="package.json">
{
  "name": "gestionale-palestra",
  "private": true,
  "version": "0.9.19",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@fullcalendar/daygrid": "^6.1.15",
    "@fullcalendar/interaction": "^6.1.15",
    "@fullcalendar/list": "^6.1.15",
    "@fullcalendar/react": "^6.1.15",
    "@fullcalendar/timegrid": "^6.1.15",
    "@mui/icons-material": "^7.3.2",
    "@mui/material": "^7.3.2",
    "firebase": "^12.2.1",
    "framer-motion": "^12.23.22",
    "gsap": "^3.13.0",
    "moment": "^2.30.1",
    "motion": "^12.23.22",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.1",
    "recharts": "^3.2.1",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.1.2"
  }
}
</file>

<file path="src/pages/IscrittiPage.jsx">
// File: src/pages/IscrittiPage.jsx

import { useState, useMemo, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import {
  Box,
  Typography,
  Button,
  Paper,
  Chip,
  TextField,
  InputAdornment,
  useTheme,
  Stack,
  IconButton, // Aggiunto
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import SearchIcon from "@mui/icons-material/Search";
import ViewModuleIcon from "@mui/icons-material/ViewModule"; // Icona per la griglia
import ViewListIcon from "@mui/icons-material/ViewList"; // Icona per la lista
import IscrittoForm from "../components/IscrittoForm.jsx";
import IscrittiLista from "../components/IscrittiLista.jsx";
import { useNotification } from "../context/NotificationContext.jsx";
import { exportToExcel } from "../utils/exportToExcel.js";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import moment from "moment";
import { addIscritto } from "../services/firebaseService.js";

const DRAWER_WIDTH = 280;

function useQuery() {
  return new URLSearchParams(useLocation().search);
}

function IscrittiPage({
  iscrittiList,
  gruppiList,
  onDataUpdate,
  onIscrittoAdded,
}) {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [activeFilter, setActiveFilter] = useState("tutti");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedIds, setSelectedIds] = useState([]);
  // Stato per la visualizzazione, legge il valore salvato in localStorage o usa 'grid' di default
  const [viewMode, setViewMode] = useState(
    localStorage.getItem("viewMode") || "grid"
  );

  const { showNotification } = useNotification();
  const theme = useTheme();
  const query = useQuery();
  const navigate = useNavigate();

  const gruppoIdFromUrl = query.get("gruppoId");

  useEffect(() => {
    if (gruppoIdFromUrl) {
      setActiveFilter(`gruppo_${gruppoIdFromUrl}`);
    } else {
      if (activeFilter.startsWith("gruppo_")) {
        setActiveFilter("tutti");
      }
    }
  }, [gruppoIdFromUrl]);

  // Salva la preferenza di visualizzazione nel localStorage ogni volta che cambia
  useEffect(() => {
    localStorage.setItem("viewMode", viewMode);
  }, [viewMode]);

  const activeGruppoFilter = useMemo(() => {
    if (!activeFilter.startsWith("gruppo_")) return null;
    const gruppoId = activeFilter.split("_")[1];
    return gruppiList.find((g) => g.id === gruppoId);
  }, [activeFilter, gruppiList]);

  const handleToggleForm = () => setIsFormOpen(!isFormOpen);
  const handleCloseForm = () => setIsFormOpen(false);

  const handleSaveIscritto = async (nuovoIscritto) => {
    try {
      const nuovoIscrittoConId = await addIscritto(nuovoIscritto);
      onIscrittoAdded(nuovoIscrittoConId);
      showNotification("Socio aggiunto con successo!", "success");
      handleCloseForm();
    } catch (error) {
      console.error("Errore durante l'aggiunta del socio:", error);
      showNotification("Errore durante il salvataggio del socio.", "error");
    }
  };

  const handleSelectIscritto = (id) => {
    setSelectedIds((prevSelected) =>
      prevSelected.includes(id)
        ? prevSelected.filter((i) => i !== id)
        : [...prevSelected, id]
    );
  };

  const handleExportSelected = () => {
    if (selectedIds.length === 0) {
      showNotification("Seleziona almeno un socio da esportare.", "warning");
      return;
    }
    const selectedIscritti = iscrittiList.filter((i) =>
      selectedIds.includes(i.id)
    );
    exportToExcel(selectedIscritti, "Lista_Atleti_Gara");
    showNotification(
      `Esportati ${selectedIds.length} soci in Lista_Atleti_Gara.xlsx`,
      "success"
    );
    setSelectedIds([]);
  };

  const today = moment();
  const filteredIscritti = useMemo(() => {
    let baseList = iscrittiList;

    if (activeFilter.startsWith("gruppo_")) {
      const gruppoId = activeFilter.split("_")[1];
      const gruppo = gruppiList.find((g) => g.id === gruppoId);
      if (gruppo && gruppo.membri) {
        const membriIds = new Set(gruppo.membri);
        baseList = baseList.filter((iscritto) => membriIds.has(iscritto.id));
      } else {
        return [];
      }
    } else {
      switch (activeFilter) {
        case "abbonamenti_scaduti":
          baseList = baseList.filter((i) => {
            if (!i.abbonamento?.scadenza) return false;
            return moment(i.abbonamento.scadenza).isBefore(today, "day");
          });
          break;
        case "abbonamenti_in_scadenza":
          baseList = baseList.filter((i) => {
            if (!i.abbonamento?.scadenza) return false;
            const scadenza = moment(i.abbonamento.scadenza);
            return (
              scadenza.isSameOrAfter(today, "day") &&
              scadenza.diff(today, "days") <= 30
            );
          });
          break;
        case "certificati_scaduti":
          baseList = baseList.filter((i) => {
            if (!i.certificatoMedico?.scadenza) return false;
            return moment(i.certificatoMedico.scadenza).isBefore(today, "day");
          });
          break;
        case "certificati_mancanti":
          baseList = baseList.filter(
            (i) => i.certificatoMedico?.presente === false
          );
          break;
        case "certificati_in_scadenza":
          baseList = baseList.filter((i) => {
            if (!i.certificatoMedico?.scadenza) return false;
            const scadenza = moment(i.certificatoMedico.scadenza);
            return (
              scadenza.isSameOrAfter(today, "day") &&
              scadenza.diff(today, "days") <= 30
            );
          });
          break;
        default:
          break;
      }
    }

    if (searchTerm) {
      const lowercasedSearchTerm = searchTerm.toLowerCase();
      baseList = baseList.filter(
        (i) =>
          i.nome.toLowerCase().includes(lowercasedSearchTerm) ||
          i.cognome.toLowerCase().includes(lowercasedSearchTerm)
      );
    }

    // Ordinamento per cognome
    return [...baseList].sort((a, b) => a.cognome.localeCompare(b.cognome));
  }, [iscrittiList, gruppiList, activeFilter, searchTerm, today]);

  const isSelected = selectedIds.length > 0;

  const clearGruppoFilter = () => {
    navigate("/iscritti");
  };

  return (
    <Box>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 3,
        }}
      >
        <Typography variant="h4" sx={{ fontWeight: "bold" }}>
          Anagrafica Soci
        </Typography>
        <Button
          variant="contained"
          color="primary"
          onClick={handleToggleForm}
          startIcon={<AddIcon />}
          sx={{ color: "white" }}
        >
          Aggiungi Socio
        </Button>
      </Box>

      <IscrittoForm
        open={isFormOpen}
        onClose={handleCloseForm}
        onIscrittoAggiunto={handleSaveIscritto}
      />

      <Paper sx={{ p: 3, mb: 3, borderRadius: 4 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
          }}
        >
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h6" gutterBottom>
              Ricerca Socio
            </Typography>
            <TextField
              fullWidth
              placeholder="Cerca per nome o cognome"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </Box>
          <Box sx={{ ml: 2 }}>
            <Typography variant="h6" gutterBottom>
              Vista
            </Typography>
            <Stack direction="row" spacing={1}>
              <IconButton
                onClick={() => setViewMode("grid")}
                color={viewMode === "grid" ? "primary" : "default"}
              >
                <ViewModuleIcon />
              </IconButton>
              <IconButton
                onClick={() => setViewMode("list")}
                color={viewMode === "list" ? "primary" : "default"}
              >
                <ViewListIcon />
              </IconButton>
            </Stack>
          </Box>
        </Box>
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6" gutterBottom>
            Filtri
          </Typography>
          <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap">
            {activeGruppoFilter ? (
              <Chip
                label={`Gruppo: ${activeGruppoFilter.nome}`}
                color="secondary"
                onDelete={clearGruppoFilter}
              />
            ) : (
              <>
                <Chip
                  label="Tutti"
                  onClick={() => setActiveFilter("tutti")}
                  color={activeFilter === "tutti" ? "primary" : "default"}
                  variant={activeFilter === "tutti" ? "filled" : "outlined"}
                />
                <Chip
                  label="Abbonamenti Scaduti"
                  onClick={() => setActiveFilter("abbonamenti_scaduti")}
                  color={
                    activeFilter === "abbonamenti_scaduti" ? "error" : "default"
                  }
                  variant={
                    activeFilter === "abbonamenti_scaduti"
                      ? "filled"
                      : "outlined"
                  }
                />
                <Chip
                  label="Abbonamenti in scadenza"
                  onClick={() => setActiveFilter("abbonamenti_in_scadenza")}
                  color={
                    activeFilter === "abbonamenti_in_scadenza"
                      ? "warning"
                      : "default"
                  }
                  variant={
                    activeFilter === "abbonamenti_in_scadenza"
                      ? "filled"
                      : "outlined"
                  }
                />
                <Chip
                  label="Certificati Scaduti"
                  onClick={() => setActiveFilter("certificati_scaduti")}
                  color={
                    activeFilter === "certificati_scaduti" ? "error" : "default"
                  }
                  variant={
                    activeFilter === "certificati_scaduti"
                      ? "filled"
                      : "outlined"
                  }
                />
                <Chip
                  label="Certificati Mancanti"
                  onClick={() => setActiveFilter("certificati_mancanti")}
                  color={
                    activeFilter === "certificati_mancanti"
                      ? "error"
                      : "default"
                  }
                  variant={
                    activeFilter === "certificati_mancanti"
                      ? "filled"
                      : "outlined"
                  }
                />
                <Chip
                  label="Certificati in scadenza"
                  onClick={() => setActiveFilter("certificati_in_scadenza")}
                  color={
                    activeFilter === "certificati_in_scadenza"
                      ? "warning"
                      : "default"
                  }
                  variant={
                    activeFilter === "certificati_in_scadenza"
                      ? "filled"
                      : "outlined"
                  }
                />
              </>
            )}
          </Stack>
        </Box>
        <IscrittiLista
          iscritti={filteredIscritti}
          onDataUpdate={onDataUpdate}
          onSelect={handleSelectIscritto}
          selection={selectedIds}
          activeFilter={activeFilter}
          viewMode={viewMode} // Passa la modalità di visualizzazione al componente lista
        />
      </Paper>

      <Box
        sx={{
          position: "fixed",
          bottom: 24,
          left: DRAWER_WIDTH + 24,
          right: 24,
          zIndex: 1100,
          display: isSelected ? "block" : "none",
        }}
      >
        <Paper
          elevation={6}
          sx={{
            padding: 2,
            borderRadius: theme.shape.borderRadius * 2,
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Typography
            variant="body1"
            sx={{ fontWeight: "bold", color: theme.palette.text.primary }}
          >
            {selectedIds.length} Soci Selezionati
          </Typography>
          <Button
            variant="contained"
            color="success"
            onClick={handleExportSelected}
            startIcon={<FileDownloadIcon />}
          >
            Esporta Lista Gara (.xlsx)
          </Button>
        </Paper>
      </Box>
    </Box>
  );
}

export default IscrittiPage;
</file>

<file path="src/App.jsx">
// File: src/App.jsx (AGGIORNATO)

import { useState, useEffect, useMemo } from "react";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { collection, query, where, getDocs, orderBy } from "firebase/firestore";
import { db } from "./firebase.js";
import { useAuth } from "./context/AuthContext.jsx";
import Layout from "./components/Layout.jsx";
import DashboardPage from "./pages/DashboardPage.jsx";
import IscrittiPage from "./pages/IscrittiPage.jsx";
import LoginPage from "./pages/LoginPage.jsx";
import ReportPage from "./pages/ReportPage.jsx";
import GruppiPage from "./pages/GruppiPage.jsx";
import TecniciPage from "./pages/TecniciPage.jsx";
import OrarioPage from "./pages/OrarioPage.jsx";
import AgendaPage from "./pages/AgendaPage.jsx";
import ArchivioPage from "./pages/ArchivioPage.jsx";
import SchedaSocioPage from "./pages/SchedaSocioPage.jsx";
import SchedaTecnicoPage from "./pages/SchedaTecnicoPage.jsx";
import Notifier from "./components/Notifier.jsx";
import DocumentazionePage from "./pages/DocumentazionePage.jsx";
import CreditsPage from "./pages/CreditsPage.jsx";
import RegistroTecniciPage from "./pages/RegistroTecniciPage.jsx"; // Assicurati che l'import sia presente
import { fetchPresenzeTecnici, fetchAgendaEvents } from "./services/firebaseService.js";
import "./App.css";

function MainApp() {
  const [iscritti, setIscritti] = useState([]);
  const [gruppi, setGruppi] = useState([]);
  const [pagamenti, setPagamenti] = useState([]);
  const [staff, setStaff] = useState([]);
  const [agendaEvents, setAgendaEvents] = useState([]); 
  const [presenzeTecnici, setPresenzeTecnici] = useState([]); 
  const [loading, setLoading] = useState(true);
  const [refreshKey, setRefreshKey] = useState(0);

  const fetchData = async () => {
    try {
      if (refreshKey === 0) setLoading(true);
      
      const allIscrittiQuery = query(collection(db, "iscritti")); 
      const gruppiQuery = query(collection(db, "gruppi"));
      const pagamentiQuery = query(collection(db, "pagamenti"), orderBy("dataPagamento", "desc"));
      const staffQuery = query(collection(db, "staff"));

      const [allIscrittiSnap, gruppiSnap, pagamentiSnap, staffSnap, agendaEventsList, presenzeTecniciList] =
        await Promise.all([
          getDocs(allIscrittiQuery),
          getDocs(gruppiQuery),
          getDocs(pagamentiQuery),
          getDocs(staffQuery),
          fetchAgendaEvents(), 
          fetchPresenzeTecnici(), 
        ]);

      setIscritti(allIscrittiSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      setGruppi(gruppiSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      setPagamenti(pagamentiSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      setStaff(staffSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      setAgendaEvents(agendaEventsList);
      setPresenzeTecnici(presenzeTecniciList);

    } catch (error) {
      console.error("Errore nel recupero dei dati principali:", error);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => { fetchData(); }, [refreshKey]);
  
  const handleDataUpdate = () => setRefreshKey(prevKey => prevKey + 1);
  
  const handleIscrittoAggiunto = (nuovoIscrittoConId) => {
    setIscritti((prev) => [...prev, nuovoIscrittoConId].sort((a, b) => a.cognome.localeCompare(b.cognome)));
    handleDataUpdate();
  };
  
  const iscrittiAttivi = useMemo(() => iscritti.filter(i => i.stato === 'attivo'), [iscritti]);
  const iscrittiArchiviati = useMemo(() => iscritti.filter(i => i.stato === 'archiviato'), [iscritti]);

  const notifications = useMemo(() => {
    // ... logica notifiche (invariata)
    if (!iscrittiAttivi) return [];
    const alerts = [];
    const oggi = new Date();
    oggi.setHours(0, 0, 0, 0);
    const dataLimiteCertificati = new Date();
    dataLimiteCertificati.setDate(oggi.getDate() + 30);
    const abbonamentiScaduti = iscrittiAttivi.filter(
      (i) => i.abbonamento?.scadenza && new Date(i.abbonamento.scadenza) < oggi
    );
    const certificatiInScadenza = iscrittiAttivi.filter((i) => {
      if (!i.certificatoMedico?.scadenza) return false;
      const scadenza = new Date(i.certificatoMedico.scadenza);
      return scadenza >= oggi && scadenza <= dataLimiteCertificati;
    });
    const certificatiMancanti = iscrittiAttivi.filter(
      (i) => !i.certificatoMedico?.presente || !i.certificatoMedico?.scadenza
    );
    if (abbonamentiScaduti.length > 0)
      alerts.push({type: "abbonamenti_scaduti", count: abbonamentiScaduti.length, message: `${abbonamentiScaduti.length} Abbonamenti Scaduti`});
    if (certificatiInScadenza.length > 0)
      alerts.push({type: "certificati_scadenza", count: certificatiInScadenza.length, message: `${certificatiInScadenza.length} Certificati in Scadenza`});
    if (certificatiMancanti.length > 0)
      alerts.push({type: "certificati_mancanti", count: certificatiMancanti.length, message: `${certificatiMancanti.length} Certificati Mancanti`});
    return alerts;
  }, [iscritti]);

  return (
    <Layout notifications={notifications}>
      <Routes>
        <Route 
            path="/" 
            element={
                <DashboardPage 
                    iscritti={iscrittiAttivi} 
                    loading={loading} 
                    gruppi={gruppi} 
                    pagamenti={pagamenti}
                    iscrittiArchiviati={iscrittiArchiviati} 
                    staff={staff} 
                    agendaEvents={agendaEvents} 
                    presenzeTecnici={presenzeTecnici} 
                />
            }
        />
        <Route path="/iscritti" element={<IscrittiPage iscrittiList={iscrittiAttivi} gruppiList={gruppi} onDataUpdate={handleDataUpdate} onIscrittoAdded={handleIscrittoAggiunto}/>}/>
        <Route path="/iscritti/:iscrittoId" element={<SchedaSocioPage onDataUpdate={handleDataUpdate} />}/>
        <Route path="/archivio" element={<ArchivioPage onDataUpdate={handleDataUpdate} />}/>
        <Route path="/tecnici" element={<TecniciPage />}/>
        <Route path="/tecnici/:tecnicoId" element={<SchedaTecnicoPage />}/>
        <Route path="/gruppi" element={<GruppiPage iscrittiList={iscrittiAttivi} />}/>
        <Route path="/report" element={<ReportPage pagamentiList={pagamenti} iscrittiList={iscritti} />}/>
        <Route path="/orario" element={<OrarioPage />}/>
        <Route path="/agenda" element={<AgendaPage />}/>
        <Route path="/documentazione" element={<DocumentazionePage />}/>
        <Route path="/credits" element={<CreditsPage />} />
        <Route path="/registro-tecnici" element={<RegistroTecniciPage />} />
        <Route path="*" element={<Navigate to="/" />} />
      </Routes>
    </Layout>
  );
}

function App() {
  const { currentUser } = useAuth();
  return (
    <>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/*" element={currentUser ? <MainApp /> : <Navigate to="/login" />}/>
      </Routes>
      <Notifier />
    </>
  );
}

export default App;
</file>

<file path="src/components/Layout.jsx">
// File: src/components/Layout.jsx (AGGIORNATO)

import React, { useState } from "react";
import { Link as RouterLink, useNavigate, useLocation } from "react-router-dom";
import {
  AppBar,
  Box,
  Button,
  Badge,
  Divider,
  Drawer,
  IconButton,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Menu,
  MenuItem,
  Toolbar,
  Typography,
  useTheme,
  useMediaQuery,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import DashboardIcon from "@mui/icons-material/Dashboard";
import PeopleIcon from "@mui/icons-material/People";
import LogoutIcon from "@mui/icons-material/Logout";
import AssessmentIcon from "@mui/icons-material/Assessment";
import NotificationsIcon from "@mui/icons-material/Notifications";
import GroupsIcon from "@mui/icons-material/Groups";
import BadgeIcon from "@mui/icons-material/Badge";
import OrarioIcon from "@mui/icons-material/CalendarMonth";
import EventIcon from "@mui/icons-material/Event";
import ArchivioIcon from "@mui/icons-material/Archive";
import DescriptionIcon from "@mui/icons-material/Description";
import InfoIcon from "@mui/icons-material/Info";
import { signOut } from "firebase/auth";
import { auth } from "../firebase.js";
import { useAuth } from "../context/AuthContext.jsx";
import packageJson from "../../package.json";
import PeopleAltIcon from '@mui/icons-material/PeopleAlt';
import logoImage from "../assets/logo.png"; // LOGO

const drawerWidth = 280;

// --- INIZIO CORREZIONE ---
// Aggiunta la riga mancante per il Registro Tecnici
const navSections = [
  {
    title: "Gestione Generale",
    links: [
      { text: "Dashboard", path: "/", icon: <DashboardIcon /> },
      { text: "Orario", path: "/orario", icon: <OrarioIcon /> },
      { text: "Agenda", path: "/agenda", icon: <EventIcon /> },
    ],
  },
  {
    title: "Anagrafica & Dati",
    links: [
      { text: "Iscritti", path: "/iscritti", icon: <PeopleIcon /> },
      { text: "Gruppi", path: "/gruppi", icon: <GroupsIcon /> },
      { text: "Tecnici", path: "/tecnici", icon: <BadgeIcon /> },
      { text: "Registro Tecnici", path: "/registro-tecnici", icon: <PeopleAltIcon /> },
      { text: "Archivio", path: "/archivio", icon: <ArchivioIcon /> },
    ],
  },
  {
    title: "Contabilità & Report",
    links: [
      { text: "Report Finanziario", path: "/report", icon: <AssessmentIcon /> },
    ],
  },
];
// --- FINE CORREZIONE ---

function Layout({ children, notifications = [] }) {
  const { currentUser } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));
  const [mobileOpen, setMobileOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);

  const handleDrawerToggle = () => setMobileOpen(!mobileOpen);
  const handleLogout = async () => {
    await signOut(auth);
    navigate("/login");
  };
  const handleNotificationsClick = (event) => setAnchorEl(event.currentTarget);
  const handleNotificationsClose = () => setAnchorEl(null);

  const totalNotifications = notifications.reduce(
    (sum, notif) => sum + notif.count,
    0
  );
  const open = Boolean(anchorEl);
  const sidebarTextColor = theme.palette.text.primary;
  const sidebarIconColor = theme.palette.text.secondary;
  const selectedColor = theme.palette.primary.main;
  const selectedBackgroundColor = theme.palette.primary.main + "20";
  const isOrarioPage =
    location.pathname === "/orario" || location.pathname === "/agenda";

  const drawerContent = (
    <>
      {/* HEADER CON LOGO (NUOVA IMPLEMENTAZIONE) */}
      <Toolbar 
          sx={{ 
              display: 'flex', 
              justifyContent: 'center', 
              alignItems: 'center', 
              py: 2, 
              minHeight: '64px !important',
              borderBottom: `1px solid ${theme.palette.divider}`, // Aggiunto divider
          }}
      >
          <Box 
              component={RouterLink} 
              to="/" 
              sx={{ display: 'flex', alignItems: 'center', textDecoration: 'none' }}
          >
              <Box 
                  component="img" 
                  src={logoImage} 
                  alt="ASD GYM POINT Logo" 
                  sx={{ width: 40, height: 40, mr: 1 }}
              />
              <Typography 
                  variant="h6" 
                  sx={{ 
                      fontWeight: "bold", 
                      color: "primary.main",
                      fontSize: '1.25rem',
                      lineHeight: 1.2
                  }}
              >
                  ASD GYM POINT
              </Typography>
          </Box>
      </Toolbar>
      <Box sx={{ overflow: "auto", p: 1 }}>
        {navSections.map((section, index) => (
          <Box key={section.title} sx={{ mb: 2, pt: index === 0 ? 0 : 1 }}>
            <Typography
              variant="caption"
              sx={{
                ml: 1,
                mb: 0.5,
                fontWeight: "bold",
                color: "text.secondary",
                textTransform: "uppercase",
                display: "block",
              }}
            >
              {section.title}
            </Typography>
            <List component="nav" disablePadding>
              {section.links.map((link) => (
                <ListItemButton
                  key={link.path}
                  component={RouterLink}
                  to={link.path}
                  selected={location.pathname === link.path}
                  onClick={isMobile ? handleDrawerToggle : undefined}
                  sx={{
                    color: sidebarTextColor,
                    px: 1,
                    py: 1,
                    borderRadius: 1,
                    mb: 0.5,
                    "&:hover": {
                      backgroundColor: selectedBackgroundColor,
                      color: selectedColor,
                    },
                    "&.Mui-selected": {
                      backgroundColor: selectedBackgroundColor,
                      color: selectedColor,
                      borderLeft: `4px solid ${selectedColor}`,
                      paddingLeft: "12px",
                      "&:hover": {
                        backgroundColor: selectedBackgroundColor,
                        opacity: 0.9,
                      },
                    },
                    "& .MuiListItemIcon": {
                      minWidth: 30,
                      color:
                        link.path === location.pathname
                          ? selectedColor
                          : sidebarIconColor,
                    },
                    "& .MuiListItemText-primary": { fontWeight: "bold" },
                  }}
                >
                  <ListItemIcon>{link.icon}</ListItemIcon>
                  <ListItemText primary={link.text} />
                </ListItemButton>
              ))}
            </List>
          </Box>
        ))}
      </Box>
      <Box
        sx={{
          p: 2,
          mt: "auto",
          borderTop: `1px solid ${theme.palette.divider}`,
        }}
      >
        <Typography
          variant="subtitle1"
          sx={{ fontWeight: "bold", color: "primary.main" }}
        >
          asdgympointOS 🌩️
        </Typography>
        <Typography variant="caption" display="block" color="text.secondary">
          Versione {packageJson.version}
        </Typography>
        <Typography variant="caption" display="block" color="text.secondary">
          Sviluppato da Daniele Arcangeli
        </Typography>
      </Box>
    </>
  );

  return (
    <Box sx={{ display: "flex" }}>
      <AppBar
        position="fixed"
        sx={{
          zIndex: (theme) => theme.zIndex.drawer + 1,
          backgroundColor: "background.paper",
          color: "text.primary",
          borderBottom: `1px solid ${theme.palette.divider}`,
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { md: "none" } }}
          >
            <MenuIcon />
          </IconButton>
          
          {/* START: Aggiunta Logo vicino al nome (sostituendo la Typography precedente) */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Box
                component="img"
                src={logoImage}
                alt="Logo ASD GYM POINT"
                sx={{
                    height: 36, // Altezza desiderata per il logo
                    display: { xs: 'none', sm: 'block' }, // Mostra solo su schermi più grandi
                }}
            />
            <Typography
              variant="h6"
              noWrap
              component="div"
              sx={{ fontWeight: "bold", color: "primary.main" }}
            >
              ASD GYM POINT
            </Typography>
          </Box>
          {/* END: Aggiunta Logo vicino al nome */}

          {/* Box invisibile per spingere tutto a destra */}
          <Box sx={{ flexGrow: 1 }} />

          {/* --- BLOCCO DI PULSANTI ALLINEATO A DESTRA --- */}
          <Box
            sx={{
              display: { xs: "none", md: "flex" },
              alignItems: "center",
              gap: 1,
            }}
          >
            <Button
              component={RouterLink}
              to="/documentazione"
              color="inherit"
              startIcon={<DescriptionIcon />}
            >
              Documentazione
            </Button>
            <Button
              component={RouterLink}
              to="/credits"
              color="inherit"
              startIcon={<InfoIcon />}
            >
              Crediti e Log
            </Button>
            <Divider orientation="vertical" flexItem sx={{ mx: 1 }} />
            <Typography variant="body2">{currentUser?.email}</Typography>
            <IconButton color="inherit" onClick={handleNotificationsClick}>
              <Badge badgeContent={totalNotifications} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            <Button
              color="inherit"
              startIcon={<LogoutIcon />}
              onClick={handleLogout}
            >
              Logout
            </Button>
          </Box>

          {/* Gestione per mobile (solo icone) */}
          <Box
            sx={{ display: { xs: "flex", md: "none" }, alignItems: "center" }}
          >
            <IconButton color="inherit" onClick={handleNotificationsClick}>
              <Badge badgeContent={totalNotifications} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            <IconButton color="inherit" onClick={handleLogout}>
              <LogoutIcon />
            </IconButton>
          </Box>
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { md: drawerWidth }, flexShrink: { md: 0 } }}
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{ keepMounted: true }}
          sx={{
            display: { xs: "block", md: "none" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
        >
          {drawerContent}
        </Drawer>
        <Drawer
          variant="permanent"
          open
          sx={{
            display: { xs: "none", md: "block" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
        >
          {drawerContent}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { xs: "100%", md: `calc(100% - ${drawerWidth}px)` },
          maxWidth: isOrarioPage ? "none" : "1400px",
          margin: "0", // FIX: Rimosso margin: 0 auto per la corretta espansione laterale
        }}
      >
        <Toolbar />
        {children}
      </Box>
      <Menu anchorEl={anchorEl} open={open} onClose={handleNotificationsClose}>
        {notifications.length > 0 ? (
          notifications.map((notif) => (
            <MenuItem
              key={notif.type}
              component={RouterLink}
              to={`/iscritti?filtro=${notif.type}`}
              onClick={handleNotificationsClose}
            >
              {notif.message}
            </MenuItem>
          ))
        ) : (
          <MenuItem onClick={handleNotificationsClose}>
            Nessuna notifica
          </MenuItem>
        )}
      </Menu>
    </Box>
  );
}
export default Layout;
</file>

</files>
